package com.vritti.crm.vcrm7;

import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.AsyncTask;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import com.vritti.crm.adapter.EntityMasterMainAdapter;
import com.vritti.crm.bean.EntityBIData;
import com.vritti.crm.classes.CommonFunctionCrm;
import com.vritti.databaselib.data.DatabaseHandlers;
import com.vritti.databaselib.other.Utility;
import com.vritti.databaselib.other.WebUrlClass;
import com.vritti.ekatm.R;
import com.vritti.sessionlib.CallbackInterface;
import com.vritti.sessionlib.StartSession;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;

public class EntityMasterMainActivity extends AppCompatActivity {

    String PlantMasterId = "", LoginId = "", Password = "", CompanyURL = "", EnvMasterId = "",
            UserMasterId = "", UserName = "", MobileNo = "";
    Utility ut;
    DatabaseHandlers db;
    CommonFunctionCrm cf;
    Context context;
    SQLiteDatabase sql;

    EntityMasterMainAdapter entityMasterMainAdapter;
    RecyclerView list_clientDetails;
    Button btn_AddCustomer;

    ArrayList<EntityBIData> entityBIDataArrayList;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_entity_master_main);

        context = EntityMasterMainActivity.this;

        ut = new Utility();
        cf = new CommonFunctionCrm(context);
        String settingKey = ut.getSharedPreference_SettingKey(context);
        String dabasename = ut.getValue(context, WebUrlClass.GET_DATABASE_NAME_KEY, settingKey);
        db = new DatabaseHandlers(context, dabasename);
        CompanyURL = ut.getValue(context, WebUrlClass.GET_COMPANY_URL_KEY, settingKey);
        EnvMasterId = ut.getValue(context, WebUrlClass.GET_EnvMasterID_KEY, settingKey);
        PlantMasterId = ut.getValue(context, WebUrlClass.GET_PlantID_KEY, settingKey);
        LoginId = ut.getValue(context, WebUrlClass.GET_LOGIN_KEY, settingKey);
        Password = ut.getValue(context, WebUrlClass.GET_PSW_KEY, settingKey);
        UserMasterId = ut.getValue(context, WebUrlClass.GET_USERMASTERID_KEY, settingKey);
        UserName = ut.getValue(context, WebUrlClass.GET_USERNAME_KEY, settingKey);
        sql = db.getWritableDatabase();

        InitView();
        SetListner();

        entityMasterMainAdapter = new EntityMasterMainAdapter(EntityMasterMainActivity.this, entityBIDataArrayList);
        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(EntityMasterMainActivity.this);
        list_clientDetails.setLayoutManager(mLayoutManager);
        list_clientDetails.setAdapter(entityMasterMainAdapter);

        if(cf.getEntityBIDataCnt() > 0){

            storeEntityBIData();
        }else{
            if (ut.isNet(EntityMasterMainActivity.this)) {
                new StartSession(EntityMasterMainActivity.this, new CallbackInterface() {
                    @Override
                    public void callMethod() {

                        new DownloadEntityMasterBIData().execute();

                    }

                    @Override
                    public void callfailMethod(String msg) {

                    }
                });
            }else{
                Toast.makeText(this, "No Interner Connection", Toast.LENGTH_SHORT).show();
            }
        }



    }

    private void SetListner() {

        btn_AddCustomer.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                startActivity(new Intent(EntityMasterMainActivity.this, EntityMasterBasicActivity.class));

            }
        });

    }

    private void InitView() {

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        //toolbar.setLogo(R.mipmap.ic_toolbar_logo_crm);
        toolbar.setLogo(R.drawable.crm_logo_1);
        toolbar.setTitle(R.string.app_name_toolbar_CRM);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        context = EntityMasterMainActivity.this;

        ut = new Utility();
        cf = new CommonFunctionCrm(context);
        String settingKey = ut.getSharedPreference_SettingKey(context);
        String dabasename = ut.getValue(context, WebUrlClass.GET_DATABASE_NAME_KEY, settingKey);
        db = new DatabaseHandlers(context, dabasename);
        CompanyURL = ut.getValue(context, WebUrlClass.GET_COMPANY_URL_KEY, settingKey);
        EnvMasterId = ut.getValue(context, WebUrlClass.GET_EnvMasterID_KEY, settingKey);
        PlantMasterId = ut.getValue(context, WebUrlClass.GET_PlantID_KEY, settingKey);
        LoginId = ut.getValue(context, WebUrlClass.GET_LOGIN_KEY, settingKey);
        Password = ut.getValue(context, WebUrlClass.GET_PSW_KEY, settingKey);
        UserMasterId = ut.getValue(context, WebUrlClass.GET_USERMASTERID_KEY, settingKey);
        UserName = ut.getValue(context, WebUrlClass.GET_USERNAME_KEY, settingKey);
        sql = db.getWritableDatabase();


        list_clientDetails = findViewById(R.id.list_clientDetails);
        btn_AddCustomer = findViewById(R.id.btn_AddCustomer);

        //  entityMasterBeanArrayList = new ArrayList<>();
        entityBIDataArrayList = new ArrayList<>();

    }


    private class DownloadEntityMasterBIData extends AsyncTask<String, Void, String> {

        Object res;
        String response = "";

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... params) {
            String url = CompanyURL + WebUrlClass.api_getEntityMasterBIData;

            try {
                res = ut.OpenConnection(url);
                if (res != null) {

                    String rplc = "\\\r\\\n";
                    response = res.toString().replaceAll("\\\\", "");
                    response = response.replaceAll("\\\\\\\\/", "");
                    // response = response.substring(1, response.length() - 1);
                    ContentValues values = new ContentValues();
                    JSONArray jResults = new JSONArray(response);
                    sql.delete(db.TABLE_ENTITY_BI_DATA, null, null);
                    Cursor c = sql.rawQuery("SELECT * FROM " + db.TABLE_ENTITY_BI_DATA, null);
                    int count = c.getCount();
                    String columnName, columnValue;
                    for (int i = 0; i < jResults.length(); i++) {
                        JSONObject jorder = jResults.getJSONObject(i);
                        for (int j = 0; j < c.getColumnCount(); j++) {
                            columnName = c.getColumnName(j);
                            columnValue = jorder.getString(columnName);
                            values.put(columnName, columnValue);
                        }
                        long a = sql.insert(db.TABLE_ENTITY_BI_DATA, null, values);
                        Log.e("", "" + a);

                    }

                } else {
                    response = "error";
                }

            } catch (Exception e) {
                e.printStackTrace();
                response = "error";
            }

            return response;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            if (!response.equals("error")) {
                storeEntityBIData();
            }
        }
    }

    private void storeEntityBIData() {

        entityBIDataArrayList.clear();

        String query = "SELECT * FROM " + db.TABLE_ENTITY_BI_DATA;

        Cursor cur = sql.rawQuery(query, null);
        if (cur.getCount() > 0) {
            cur.moveToFirst();
            do {

                EntityBIData entityBIData = new EntityBIData();
                entityBIData.setCustVendorMasterId(cur.getString(cur.getColumnIndex("CustVendorMasterId")));
                entityBIData.setCustVendor(cur.getString(cur.getColumnIndex("CustVendor")));
                entityBIData.setCustVendorCode(cur.getString(cur.getColumnIndex("CustVendorCode")));
                entityBIData.setEntityclass(cur.getString(cur.getColumnIndex("Entityclass")));
                entityBIData.setCustVendorName(cur.getString(cur.getColumnIndex("CustVendorName")));
                entityBIData.setContactName(cur.getString(cur.getColumnIndex("ContactName")));
                entityBIData.setContact(cur.getString(cur.getColumnIndex("Contact")));
                entityBIData.setEmail(cur.getString(cur.getColumnIndex("Email")));
                entityBIData.setAddress(cur.getString(cur.getColumnIndex("Address")));
                entityBIData.setEntityType(cur.getString(cur.getColumnIndex("EntityType")));
                entityBIData.setCity(cur.getString(cur.getColumnIndex("City")));

                entityBIDataArrayList.add(entityBIData);

            } while (cur.moveToNext());
        }

        entityMasterMainAdapter.notifyDataSetChanged();


    }
}