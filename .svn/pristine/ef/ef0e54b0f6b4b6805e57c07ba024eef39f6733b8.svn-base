package com.vritti.inventory.MaterialRequisition.activity;

import android.annotation.SuppressLint;
import android.app.DatePickerDialog;
import android.app.ProgressDialog;
import android.app.TimePickerDialog;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.PersistableBundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.vritti.databaselib.data.DatabaseHandlers;
import com.vritti.databaselib.other.Utility;
import com.vritti.databaselib.other.WebUrlClass;
import com.vritti.ekatm.R;
import com.vritti.inventory.MaterialRequisition.adapter.MRSNoDetailsAdapter;
import com.vritti.inventory.MaterialRequisition.classes.Inventory_CommonFunction;
import com.vritti.inventory.MaterialRequisition.classes.UpdateTime;
import com.vritti.inventory.MaterialRequisition.model.AllUsers;
import com.vritti.inventory.MaterialRequisition.model.MRSList;
import com.vritti.inventory.MaterialRequisition.model.MRSNODetails;
import com.vritti.inventory.MaterialRequisition.model.MaterialOrder;
import com.vritti.inventory.activity.VendorRegistrationForm;
import com.vritti.sessionlib.CallbackInterface;
import com.vritti.sessionlib.StartSession;
import com.vritti.vwb.classes.CommonFunction;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.UUID;

public class MaterialIssueMainActivity extends AppCompatActivity {
    String PlantMasterId = "", LoginId = "", Password = "", CompanyURL = "", EnvMasterId = "", UserMasterId = "";
    Utility ut;
    DatabaseHandlers db;
    CommonFunction cf;
    Context context;
    String UserName, MobileNo;
    String IsChatApplicable, IsGPSLocation;
    SQLiteDatabase sql;
    Inventory_CommonFunction inventory_commonFunction;
    ImageView img_time_calender, img_issueDate, img_serach;
    EditText edt_entryTime, edt_issueDate;
    Spinner spinner_issueBy, spinner_MRSNo;
    String issue_time = "", issueDate = "",issueDate1="";
    int Year, month, day;
    DatePickerDialog datePickerDialog;
    ArrayList<MRSList> mrsListArrayList;
    ArrayList<AllUsers> allUsersArrayList;
    List<String> lstMRSList = new ArrayList<String>();
    List<String> lstAllUser = new ArrayList<String>();
    private String MRSNo = "";
    private String userName = "", MRSHeaderId = "";
    ArrayList<MRSNODetails> mrsnoDetailsArrayList;
    MRSNoDetailsAdapter mrsNoDetailsAdapter;
    RecyclerView list_MRSNoDetails;
    Button btn_save, btn_cancel;
    Toolbar toolbar;
    //  ImageView refreshImg;

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.inventory_materialissue_mainactivity);


        context = getApplicationContext();
        ut = new Utility();
        cf = new CommonFunction(context);
        String settingKey = ut.getSharedPreference_SettingKey(context);
        String dabasename = ut.getValue(context, WebUrlClass.GET_DATABASE_NAME_KEY, settingKey);
        db = new DatabaseHandlers(context, dabasename);
        CompanyURL = ut.getValue(context, WebUrlClass.GET_COMPANY_URL_KEY, settingKey);
        EnvMasterId = ut.getValue(context, WebUrlClass.GET_EnvMasterID_KEY, settingKey);
        PlantMasterId = ut.getValue(context, WebUrlClass.GET_PlantID_KEY, settingKey);
        LoginId = ut.getValue(context, WebUrlClass.GET_LOGIN_KEY, settingKey);
        Password = ut.getValue(context, WebUrlClass.GET_PSW_KEY, settingKey);
        UserName = "";
        MobileNo = ut.getValue(context, WebUrlClass.GET_MOBILE_KEY, settingKey);

        UserMasterId = ut.getValue(context, WebUrlClass.GET_USERMASTERID_KEY, settingKey);
        UserName = ut.getValue(context, WebUrlClass.GET_USERNAME_KEY, settingKey);
        MobileNo = ut.getValue(context, WebUrlClass.GET_MOBILE_KEY, settingKey);
        IsChatApplicable = ut.getValue(context, WebUrlClass.GET_ISCHATAPPLICABLE_KEY, settingKey);
        IsGPSLocation = ut.getValue(context, WebUrlClass.GET_ISGPSLOCATION_KEY, settingKey);
        sql = db.getWritableDatabase();
        inventory_commonFunction = new Inventory_CommonFunction(MaterialIssueMainActivity.this);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        //  getSupportActionBar().setTitle("Inventory");
        initView();

        SetListner();

    /*    if (inventory_commonFunction.getMRSListCnt() > 0) {
            getMRSList();
        } else {*/
        if (ut.isNet(MaterialIssueMainActivity.this)) {
            new StartSession(MaterialIssueMainActivity.this, new CallbackInterface() {
                @Override
                public void callMethod() {
                    new DownloadMRSList().execute();
                }

                @Override
                public void callfailMethod(String msg) {

                }
            });
        } else {
            Toast.makeText(MaterialIssueMainActivity.this, "No Internet Connection", Toast.LENGTH_SHORT).show();
        }
        //}

        if (inventory_commonFunction.getAllUsersCnt() > 0) {
            getAllUsers();
        } else {
            if (ut.isNet(MaterialIssueMainActivity.this)) {
                new StartSession(MaterialIssueMainActivity.this, new CallbackInterface() {
                    @Override
                    public void callMethod() {
                        new DownloadGetAllUsers().execute();
                    }

                    @Override
                    public void callfailMethod(String msg) {

                    }
                });
            }
        }

    }

    private void initView() {

       /* toolbar = (Toolbar) findViewById(R.id.toolbar1);
        toolbar.setLogo(R.mipmap.ic_toolbar_logo_vwb);
        //toolbar.setLogo(R.mipmap.ic_toolbar_logo_vwb);
        toolbar.setTitle(R.string.app_name_toolbar_Vwb);
        toolbar.setTitleTextColor(Color.WHITE);*/
        //  setSupportActionBar(toolbar);
        // refreshImg = toolbar.findViewById(R.id.imgview);

        img_time_calender = findViewById(R.id.img_time_calender);
        edt_entryTime = findViewById(R.id.edt_entryTime);
        img_issueDate = findViewById(R.id.img_issueDate);
        edt_issueDate = findViewById(R.id.edt_isseDate);
        spinner_issueBy = findViewById(R.id.spinner_issueBy);
        spinner_MRSNo = findViewById(R.id.spinner_MRSNo);
        img_serach = findViewById(R.id.img_serach);
        list_MRSNoDetails = findViewById(R.id.list_MRSNoDetails);
        btn_save = findViewById(R.id.btn_save);
        btn_cancel = findViewById(R.id.btn_cancel);
        mrsListArrayList = new ArrayList<>();
        allUsersArrayList = new ArrayList<>();
        mrsnoDetailsArrayList = new ArrayList<>();


        final Calendar c = Calendar.getInstance();
        Year = c.get(Calendar.YEAR);
        month = c.get(Calendar.MONTH);
        day = (c.get(Calendar.DAY_OF_MONTH));

        issueDate = day + "-"
                + String.format("%02d", (month + 1))
                + "-" + Year;
        edt_issueDate.setText(issueDate);
        issueDate1 =  Year + "-"
                + String.format("%02d", (month + 1))
                + "-" + day;


        Calendar mcurrentTime = Calendar.getInstance();
        int hour = mcurrentTime.get(Calendar.HOUR_OF_DAY);
        int minute = mcurrentTime.get(Calendar.MINUTE);
        issue_time = UpdateTime.updateTime(hour, minute);

        edt_entryTime.setText(issue_time);

    }

    private void SetListner() {

        btn_save.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                JSONObject finalJSonObj = new JSONObject();

                if (mrsnoDetailsArrayList != null && mrsnoDetailsArrayList.size() != 0) {
                    String datetime = issueDate1 +" " +issue_time;

                    JSONObject jsonObject = new JSONObject();
                    try {
                        jsonObject.put("MISNo", "");
                        jsonObject.put("MISDt", datetime);
                        jsonObject.put("MISType", "R");
                        jsonObject.put("IssuedBy", UserMasterId);
                        jsonObject.put("Transporter", "");
                        jsonObject.put("VehicleNo", "");
                        //jsonObject.put("RefRecId", "");
                        jsonObject.put("RefRecId", mrsnoDetailsArrayList.get(0).getMRSHeaderId());
                        jsonObject.put("RefRecType", mrsnoDetailsArrayList.get(0).getMRSType());

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    JSONArray jsonArray1 = new JSONArray();
                    JSONArray jsonArray2 = new JSONArray();
                    JSONArray jsonArray3 = new JSONArray();
                    for (int i = 0; i < mrsnoDetailsArrayList.size(); i++) {


                        JSONObject jsonObject1 = new JSONObject();

                        try {
                            if (mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().size() != 0) {

                                jsonObject1.put("MISDetailId", mrsnoDetailsArrayList.get(i).getMISDetailId());
                                jsonObject1.put("MRSDetailId", mrsnoDetailsArrayList.get(i).getMRSDetailId());
                                jsonObject1.put("ItemMasterId", mrsnoDetailsArrayList.get(i).getItemMasterId());
                                jsonObject1.put("ReqQty", mrsnoDetailsArrayList.get(i).getReqQty());
                                jsonObject1.put("MRSNo", mrsnoDetailsArrayList.get(i).getMRSNo());
                                jsonObject1.put("MRSDate", mrsnoDetailsArrayList.get(i).getMRSDate());
                                jsonObject1.put("MRSHeaderId", mrsnoDetailsArrayList.get(i).getMRSHeaderId());
                                jsonObject1.put("IssuedQty", mrsnoDetailsArrayList.get(i).getIssuedQty());
                                jsonObject1.put("ItemCode", mrsnoDetailsArrayList.get(i).getItemCode());
                                jsonObject1.put("ItemDesc", mrsnoDetailsArrayList.get(i).getItemDesc());
                                jsonObject1.put("TechnicalDesc", "");
                            /*UOMMasterId": "DefData-8",
                            "UOMCode": "Mtr",
                                    "UOMDesc": "Meter",*/

                                jsonObject1.put("UOMMasterId", mrsnoDetailsArrayList.get(i).getUOMMasterId());
                                jsonObject1.put("UOMCode", mrsnoDetailsArrayList.get(i).getUOMCode());
                                jsonObject1.put("UOMDesc", mrsnoDetailsArrayList.get(i).getUOMDesc());
                                jsonObject1.put("BalQty", mrsnoDetailsArrayList.get(i).getBalQty());
                                jsonObject1.put("BatchControl", mrsnoDetailsArrayList.get(i).getBatchControl());
                                jsonObject1.put("IsPacketAppl", mrsnoDetailsArrayList.get(i).getIsPacketAppl());
                                jsonObject1.put("MRSType", mrsnoDetailsArrayList.get(i).getMRSType());
                                jsonObject1.put("WarehouseCode", mrsnoDetailsArrayList.get(i).getWarehouseCode());
                                jsonObject1.put("LocationCode", mrsnoDetailsArrayList.get(i).getLocationCode());
                                jsonObject1.put("WarehouseMasterId", mrsnoDetailsArrayList.get(i).getWarehouseMasterId());
                                jsonObject1.put("LocationMasterId", mrsnoDetailsArrayList.get(i).getLocationMasterId());
                                jsonObject1.put("AllowExcessQty", "false");
                                jsonObject1.put("CurrentIssueQty", mrsnoDetailsArrayList.get(i).getCurrentIssueQty());
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        jsonArray1.put(jsonObject1);


                        String uniqueID = UUID.randomUUID().toString();

                        if (mrsnoDetailsArrayList.get(i).getBatchControl().equals("true") && mrsnoDetailsArrayList.get(i).getIsPacketAppl().equals("N")) {

                            if (mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList() != null) {
                                for (int j = 0; j < mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().size(); j++) {
                                    JSONObject jsonObject2 = new JSONObject();
                                    try {

                                        jsonObject2.put("StockDetailsId", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getStockDetailsId());
                                        String balqty = String.valueOf(mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getBalQty());
                                        jsonObject2.put("BalQty", String.valueOf(mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getBalQty()));
                                        jsonObject2.put("ItemMasterId", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getItemMasterId());
                                        jsonObject2.put("WarehouseMasterId", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getWarehouseMasterId());
                                        jsonObject2.put("LocationMasterId", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getLocationMasterId());
                                        jsonObject2.put("BatchNo", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getBatchNo());
                                        jsonObject2.put("FiFo", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getFiFo());
                                        jsonObject2.put("WarehouseCode", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getWarehouseCode());
                                        jsonObject2.put("LocationCode", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getLocationCode());
                                        jsonObject2.put("ReqQty", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getReqQty());
                                        String issureqty = String.valueOf(mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getIssueQty());
                                        jsonObject2.put("IssueQty", String.valueOf(mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getIssueQty()));
                                        jsonObject2.put("OrderId", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getOrderId());
                                        jsonObject2.put("MRSDetailId", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getMRSDetailId());
                                        jsonObject2.put("UOMMasterId", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getUOMMasterId());
                                        jsonObject2.put("MISDetailId", mrsnoDetailsArrayList.get(i).getMISDetailId());
                                        jsonObject2.put("MISLotDetailid", UUID.randomUUID());

                                    } catch (JSONException e) {
                                        e.printStackTrace();
                                    }

                                    jsonArray2.put(jsonObject2);
                                }
                            }


                        } else if (mrsnoDetailsArrayList.get(i).getBatchControl().equals("true") && mrsnoDetailsArrayList.get(i).getIsPacketAppl().equals("Y")) {
                            if (mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList() != null) {
                                for (int j = 0; j < mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().size(); j++) {
                                    JSONObject jsonObject3 = new JSONObject();
                                    try {
                                        jsonObject3.put("PacketMasterId", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getPacketMasterId());
                                        jsonObject3.put("ItemMasterId", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getItemMasterId());
                                        jsonObject3.put("PacketSrNo", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getPacketSrNo());
                                        jsonObject3.put("PacketNo", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getPacketNo());
                                        jsonObject3.put("StockDetailsId", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getStockDetailsId());
                                        jsonObject3.put("BalQty", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getBatchNo());
                                        jsonObject3.put("FiFo", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getFiFo());
                                        jsonObject3.put("BatchNo", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getBatchNo());
                                        jsonObject3.put("WarehouseCode", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getWarehouseCode());
                                        jsonObject3.put("LocationCode", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getLocationCode());
                                        jsonObject3.put("ReqQty", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getReqQty());
                                        jsonObject3.put("IssueQty", String.valueOf(mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getIssueQty()));
                                        jsonObject3.put("OrderId", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getOrderId());
                                        jsonObject3.put("MRSDetailId", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getMRSDetailId());
                                        jsonObject3.put("UOMMasterId", mrsnoDetailsArrayList.get(i).getShowAllLotDetailsArrayList().get(j).getUOMMasterId());
                                        jsonObject3.put("MISDetailId", mrsnoDetailsArrayList.get(i).getMISDetailId());
                                        jsonObject3.put("MISPacketListId", UUID.randomUUID());

                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                    jsonArray3.put(jsonObject3);
                                }
                            }
                        }
                    }

                    try {
                        finalJSonObj.put("HeaderData", jsonObject);
                        finalJSonObj.put("ItemData", jsonArray1);
                        if (jsonArray2.length() == 0) {

                        } else {
                            finalJSonObj.put("ArrayLotdetail", jsonArray2);
                        }
                        finalJSonObj.put("Mode", "A");
                        finalJSonObj.put("MRSType", mrsnoDetailsArrayList.get(0).getMRSType());
                        if ((jsonArray3.length() == 0)) {

                        } else {
                            finalJSonObj.put("ArrayAddPacketdetail", jsonArray3);
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    final String finaljsonString = finalJSonObj.toString();
                    Log.i("finaljsonString", finaljsonString);

                    if (ut.isNet(context)) {
                        new StartSession(MaterialIssueMainActivity.this, new CallbackInterface() {
                            @Override
                            public void callMethod() {
                                new PostMR().execute(finaljsonString);
                            }

                            @Override
                            public void callfailMethod(String msg) {

                            }
                        });
                    }


                }


            }
        });

        btn_cancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onBackPressed();
            }
        });


        img_issueDate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                // TODO Auto-generated method stub
                Date date = new Date();
                Date start;
                Date end;
                final Calendar c = Calendar.getInstance();

                Year = c.get(Calendar.YEAR);
                month = c.get(Calendar.MONTH);
                day = c.get(Calendar.DAY_OF_MONTH);


                c.add(Calendar.DAY_OF_WEEK, 1);
                c.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
                long enddate = c.getTime().getTime();
                c.set(Calendar.WEEK_OF_MONTH, Calendar.SUNDAY);

                SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
                String dateString = formatter.format(new Date(Long.parseLong(String.valueOf(enddate))));


                // Launch Date Picker Dialog
                datePickerDialog = new DatePickerDialog(MaterialIssueMainActivity.this,
                        new DatePickerDialog.OnDateSetListener() {

                            @Override
                            public void onDateSet(DatePicker datePicker, int year,
                                                  int monthOfYear, int dayOfMonth) {
                                // Display Selected date in textbox

                                edt_issueDate.setText(dayOfMonth + " - "
                                        + (monthOfYear + 1) + " - " + year);
                                String trnselectDate = year + " - " + (monthOfYear + 1)
                                        + "-" + dayOfMonth + " 00:00:00.000";
                                issueDate1 = year + "-" + (monthOfYear + 1)
                                        + "-" + dayOfMonth;

                                String SelectedDate = (dayOfMonth + " - "
                                        + (monthOfYear + 1) + " - " + year);

                                if (year >= Year) {
                                    if ((year == Year) && (monthOfYear >= month)) {
                                        if ((monthOfYear == month) && (dayOfMonth >= day)) {
                                            edt_issueDate.setText(dayOfMonth + " - "
                                                    + (monthOfYear + 1) + " - " + year);
                                            trnselectDate = year + " - " + (monthOfYear + 1)
                                                    + " - " + dayOfMonth + " 00:00:00.000";
                                        } else if ((monthOfYear == month) && (dayOfMonth < day)) {
                                            edt_issueDate.setText(day + " - "
                                                    + (month + 1) + " - " + Year);
                                            trnselectDate = Year + " - " + (month + 1)
                                                    + " - " + day + " 00:00:00.000";
                                            //2018-01-15 16:43:40.440
                                            Toast.makeText(MaterialIssueMainActivity.this, "Past date is not accepted", Toast.LENGTH_SHORT).show();
                                        } else if (monthOfYear > month) {
                                            edt_issueDate.setText(dayOfMonth + " - "
                                                    + (monthOfYear + 1) + " - " + year);
                                            trnselectDate = year + " - " + (monthOfYear + 1)
                                                    + " - " + dayOfMonth + " 00:00:00.000";
                                        }
                                    } else if (year > Year) {
                                        edt_issueDate.setText(dayOfMonth + " - "
                                                + (monthOfYear + 1) + " - " + year);
                                        trnselectDate = year + " - " + (monthOfYear + 1)
                                                + " - " + dayOfMonth + " 00:00:00.000";
                                    } else if ((year == Year) && (monthOfYear < month)) {
                                        edt_issueDate.setText(day + " - "
                                                + (month + 1) + " - " + Year);
                                        datePickerDialog.getDatePicker().setMinDate(System.currentTimeMillis() - 1000);

                                        trnselectDate = Year + " - " + (month + 1)
                                                + " - " + day + " 00:00:00.000";

                                        Toast.makeText(getApplicationContext(), "Past date is not accepted", Toast.LENGTH_SHORT).show();
                                    }
                                } else {
                                    edt_issueDate.setText(day + " - "
                                            + (month + 1) + " - " + Year);
                                    trnselectDate = Year + " - " + (month + 1)
                                            + " -" + day + " 00:00:00.000";
                                    Toast.makeText(getApplicationContext(), "Past date is  accepted", Toast.LENGTH_SHORT).show();
                                }
                            }
                        }, Year, month, day);

                /*datePickerDialog.getDatePicker().setMinDate(System.currentTimeMillis());*/
                datePickerDialog.getDatePicker().setMinDate(System.currentTimeMillis() - 1000);
                // datePickerDialog.getDatePicker().setMaxDate(enddate);
                datePickerDialog.show();

                // datePickerDialog.getDatePicker().setMinDate(System.currentTimeMillis());
                //datePickerDialog.getDatePicker().setMaxDate(enddate);
                // edt_todate.setText(end_dayof_week);


            }
        });


        img_time_calender.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                final Calendar mcurrentTime = Calendar.getInstance();
                final int hour = mcurrentTime.get(Calendar.HOUR_OF_DAY);
                final int minute = mcurrentTime.get(Calendar.MINUTE);
                int hour1 = hour + 4;
                int a = mcurrentTime.get(Calendar.AM_PM);
                String a1;
                if (a == 1) {
                    a1 = "PM";
                } else {
                    a1 = "AM";
                }

                TimePickerDialog mTimePicker;
                UpdateTime.updateTime(hour, minute);

                edt_entryTime.setText(UpdateTime.updateTime(hour, minute));
                //edt_entryTime.setText(UpdateTime.updateTime(hour1, minute));

                mTimePicker = new TimePickerDialog(MaterialIssueMainActivity.this,
                        new TimePickerDialog.OnTimeSetListener() {
                            @Override
                            public void onTimeSet(TimePicker timePicker,
                                                  int selectedHour, int selectedMinute) {
                                String time = UpdateTime.updateTime(selectedHour, selectedMinute);

                                //issue_time = UpdateTime.updateTime((selectedHour + 4), selectedMinute);
                                edt_entryTime.setText(time);


                            }
                        }, hour, minute, false);// Yes 24 hour time

                mTimePicker.setTitle("Select Time");
                mTimePicker.show();

            }
        });
        spinner_MRSNo.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                MRSHeaderId = mrsListArrayList.get(position).getMRSHeaderId();
                String ClickItem = mrsListArrayList.get(position).getMRSNO();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

        spinner_issueBy.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                UserMasterId = allUsersArrayList.get(position).getUserMasterId();
                String ClickItem = allUsersArrayList.get(position).getUserName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });


        img_serach.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (ut.isNet(context)) {
                    new StartSession(MaterialIssueMainActivity.this, new CallbackInterface() {
                        @Override
                        public void callMethod() {
                            new DowloadMRSNoDetails().execute(MRSHeaderId);
                        }

                        @Override
                        public void callfailMethod(String msg) {

                        }
                    });
                }

            }
        });


    }

    public void rowClick(final int adapterPosition, final ArrayList<MRSNODetails> mrsnoDetailsArrayList) {


        if(mrsnoDetailsArrayList.get(adapterPosition).getIsPacketAppl().equalsIgnoreCase("N")){
            Toast.makeText(MaterialIssueMainActivity.this, "Stock transfer is not applicable for location name", Toast.LENGTH_SHORT).show();
        }else{
            String mrsdetailno = new Gson().toJson(new MRSNODetails(mrsnoDetailsArrayList));
            if (mrsnoDetailsArrayList.get(adapterPosition).getBatchControl().equals("true") && mrsnoDetailsArrayList.get(adapterPosition).getIsPacketAppl().equals("N")) {
                startActivityForResult(new Intent(MaterialIssueMainActivity.this, LotSelectionActivity.class).
                        putExtra("List", mrsdetailno).putExtra("position", adapterPosition).putExtra("type", "LotSelection"), 1150);
            } else if (mrsnoDetailsArrayList.get(adapterPosition).getBatchControl().equals("true") && mrsnoDetailsArrayList.get(adapterPosition).getIsPacketAppl().equals("Y")) {
                startActivityForResult(new Intent(MaterialIssueMainActivity.this, LotSelectionActivity.class).
                        putExtra("List", mrsdetailno).putExtra("position", adapterPosition).putExtra("type", "PacketSelection"), 1150);
            }
        }


       /* if(ut.isNet(MaterialIssueMainActivity.this)){
            new StartSession(MaterialIssueMainActivity.this, new CallbackInterface() {
                @Override
                public void callMethod() {
                    //http://dnatest.ekatm.com/api/MaterialRequisitionNoteAPI/GetLocationQty?SelectedValue1=DefData-4
                    // &ItemMasterId=EF01513D-2981-4603-8FE7-7F743B0288E2&WarehouseMasterId=1
                    new GetLotDetails().execute(mrsnoDetailsArrayList.get(adapterPosition).getLocationMasterId(),mrsnoDetailsArrayList.get(adapterPosition).getItemMasterId()
                    ,mrsnoDetailsArrayList.get(adapterPosition).getWarehouseMasterId(), String.valueOf(adapterPosition));
                }

                @Override
                public void callfailMethod(String msg) {

                }
            });
        }*/




    }

    class DownloadMRSList extends AsyncTask<String, Void, String> {
        Object res;
        String response;
        ProgressDialog progressDialog;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            //showProgressDialog();
            progressDialog = new ProgressDialog(MaterialIssueMainActivity.this);
            progressDialog.setMessage("Please wait data loading...");
            progressDialog.show();
        }

        @Override
        protected String doInBackground(String... params) {

            String url = CompanyURL + WebUrlClass.api_GetMRSList + "?DeptMasterId=";

            try {
                res = ut.OpenConnection(url);
                if (res != null) {
                    response = res.toString();
                    response = res.toString().replaceAll("\\\\", "");
                    response = response.replaceAll("\\\\\\\\/", "");
                    response = response.substring(1, response.length() - 1);
                    ContentValues values = new ContentValues();
                    JSONArray jResults = new JSONArray(response);

                    sql.delete(db.TABLE_MRSList, null,
                            null);
                    Cursor c = sql.rawQuery("SELECT * FROM " + db.TABLE_MRSList, null);
                    int count = c.getCount();
                    String columnName, columnValue;

                    for (int i = 0; i < jResults.length(); i++) {
                        JSONObject jorder = jResults.getJSONObject(i);
                        for (int j = 0; j < c.getColumnCount(); j++) {
                            columnName = c.getColumnName(j);
                            columnValue = jorder.getString(columnName);
                            values.put(columnName, columnValue);


                        }

                        long a = sql.insert(db.TABLE_MRSList, null, values);

                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPostExecute(String integer) {
            super.onPostExecute(integer);
            progressDialog.dismiss();
            // dismissProgressDialog();
            if (response.contains("")) {

            }
            getMRSList();
        }

    }

    private void getMRSList() {

        mrsListArrayList = inventory_commonFunction.getMRSList();
        MRSList mrsList = new MRSList();
        mrsList.setMRSNO("Select an Option");
        mrsList.setMRSHeaderId("none");
        mrsListArrayList.add(0, mrsList);
        lstMRSList.clear();
        for (int i = 0; i < mrsListArrayList.size(); i++) {
            lstMRSList.add(mrsListArrayList.get(i).getMRSNO());
        }
        MySpinnerAdapter customAdcity = new MySpinnerAdapter(MaterialIssueMainActivity.this,
                R.layout.crm_custom_spinner_txt, lstMRSList);

        spinner_MRSNo.setAdapter(customAdcity);
        spinner_MRSNo.setSelection(0);

      /*  int a = lstMRSList.indexOf(MRSNo);
        spinner_MRSNo.setSelection(lstMRSList.indexOf(MRSNo));*/


    }

    class DownloadGetAllUsers extends AsyncTask<String, Void, String> {
        Object res;
        String response;
        ProgressDialog progressDialog;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            //showProgressDialog();
            progressDialog = new ProgressDialog(MaterialIssueMainActivity.this);
            progressDialog.setMessage("Please wait data loading...");
            progressDialog.show();
        }

        @Override
        protected String doInBackground(String... params) {

            String url = CompanyURL + WebUrlClass.api_GetUserAllList;

            try {
                res = ut.OpenConnection(url);
                if (res != null) {
                    response = res.toString();
                    ContentValues values = new ContentValues();
                    JSONArray jResults = new JSONArray(response);

                    sql.delete(db.TABLE_GETALLUsers, null,
                            null);
                    Cursor c = sql.rawQuery("SELECT * FROM " + db.TABLE_GETALLUsers, null);
                    int count = c.getCount();
                    String columnName, columnValue;

                    for (int i = 0; i < jResults.length(); i++) {
                        JSONObject jorder = jResults.getJSONObject(i);
                        for (int j = 0; j < c.getColumnCount(); j++) {
                            columnName = c.getColumnName(j);
                            columnValue = jorder.getString(columnName);
                            values.put(columnName, columnValue);


                        }

                        long a = sql.insert(db.TABLE_GETALLUsers, null, values);

                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPostExecute(String integer) {
            super.onPostExecute(integer);
            progressDialog.dismiss();
            // dismissProgressDialog();
            if (response.contains("")) {

            }
            getAllUsers();
        }

    }


    private void getAllUsers() {

        allUsersArrayList = inventory_commonFunction.getAllUsers();
        lstAllUser.clear();
        for (int i = 0; i < allUsersArrayList.size(); i++) {
            lstAllUser.add(allUsersArrayList.get(i).getUserName());
        }
        MySpinnerAdapter customAdcity = new MySpinnerAdapter(MaterialIssueMainActivity.this,
                R.layout.crm_custom_spinner_txt, lstAllUser);

        spinner_issueBy.setAdapter(customAdcity);
        int pos=-1;
        for(int i = 0 ;i<allUsersArrayList.size() ; i++){
            if(allUsersArrayList.get(i).getUserMasterId().equals(UserMasterId)){
               pos = i;
               break;
            }
        }

        if(pos != -1){
            allUsersArrayList.get(pos).getUserName();
            int a = lstAllUser.indexOf(allUsersArrayList.get(pos).getUserName());
            spinner_issueBy.setSelection(a);
        }else {

            int a = lstAllUser.indexOf(userName);
            spinner_issueBy.setSelection(lstAllUser.indexOf(userName));
        }


    }

    private static class MySpinnerAdapter extends ArrayAdapter<String> {
        // Initialise custom font, for example:


        private MySpinnerAdapter(Context context, int resource,
                                 List<String> items) {
            super(context, resource, items);
        }

        // Affects default (closed) state of the spinner
        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            TextView view = (TextView) super.getView(position, convertView,
                    parent);
            //view.setTypeface(font);
            return view;
        }

        // Affects opened state of the spinner
        @Override
        public View getDropDownView(int position, View convertView,
                                    ViewGroup parent) {
            TextView view = (TextView) super.getDropDownView(position,
                    convertView, parent);
            //  view.setTypeface(font);
            return view;
        }

    }

    class DowloadMRSNoDetails extends AsyncTask<String, Void, String> {

        Object res;
        String response;
        ProgressDialog progressDialog;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            progressDialog = new ProgressDialog(MaterialIssueMainActivity.this);
            progressDialog.setMessage("Please wait data loading...");
            progressDialog.show();
        }

        @Override
        protected String doInBackground(String... params) {
            String headerid = params[0];

            String url = CompanyURL + WebUrlClass.api_GetDataToShowMRS + "?PlantId=" + PlantMasterId + "&MRSHdrId=" + params[0];

            try {
                res = ut.OpenConnection(url);
                if (res != null) {
                    response = res.toString();
                    response = res.toString().replaceAll("\\\\", "");
                    response = response.replaceAll("\\\\\\\\/", "");
                    response = response.substring(1, response.length() - 1);

                }

            } catch (Exception e) {
                e.printStackTrace();
            }


            return null;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            progressDialog.dismiss();
            if (response.equals("[]")) {

            } else {
                JSONArray jsonElements = null;
                try {
                    jsonElements = new JSONArray(response);
                    mrsnoDetailsArrayList.clear();
                    for (int i = 0; i < jsonElements.length(); i++) {

                        JSONObject jsonObject = jsonElements.getJSONObject(i);
                        MRSNODetails mrsnoDetails = new MRSNODetails();
                        mrsnoDetails.setMISDetailId(jsonObject.getString("MISDetailId"));
                        mrsnoDetails.setMRSDetailId(jsonObject.getString("MRSDetailId"));
                        mrsnoDetails.setItemMasterId(jsonObject.getString("ItemMasterId"));
                        mrsnoDetails.setReqQty(jsonObject.getString("ReqQty"));
                        mrsnoDetails.setMRSNo(jsonObject.getString("MRSNo"));
                        mrsnoDetails.setMRSDate(jsonObject.getString("MRSDate"));
                        mrsnoDetails.setMRSHeaderId(jsonObject.getString("MRSHeaderId"));
                        mrsnoDetails.setItemCode(jsonObject.getString("ItemCode"));
                        mrsnoDetails.setItemDesc(jsonObject.getString("ItemDesc"));
                        mrsnoDetails.setIssuedQty(jsonObject.getString("IssuedQty"));
                        mrsnoDetails.setBalQty(jsonObject.getString("BalQty"));
                        mrsnoDetails.setMRSType(jsonObject.getString("MRSType"));
                        mrsnoDetails.setWarehouseCode(jsonObject.getString("WarehouseCode"));
                        mrsnoDetails.setWarehouseMasterId(jsonObject.getString("WarehouseMasterId"));
                        mrsnoDetails.setLocationCode(jsonObject.getString("LocationCode"));
                        mrsnoDetails.setLocationMasterId(jsonObject.getString("LocationMasterId"));
                        mrsnoDetails.setBatchControl(jsonObject.getString("BatchControl"));
                        mrsnoDetails.setIsPacketAppl(jsonObject.getString("IsPacketAppl"));
                        mrsnoDetails.setCurrentIssueQty(jsonObject.getString("CurrentIssueQty"));
                        mrsnoDetails.setUOMMasterId(jsonObject.getString("UOMMasterId"));
                        mrsnoDetails.setUOMCode(jsonObject.getString("UOMCode"));
                        mrsnoDetails.setUOMDesc(jsonObject.getString("UOMDesc"));
                        /*UOMMasterId": "DefData-8",
                        "UOMCode": "Mtr",
                                "UOMDesc": "Meter",*/
                        mrsnoDetailsArrayList.add(mrsnoDetails);


                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                mrsNoDetailsAdapter = new MRSNoDetailsAdapter(MaterialIssueMainActivity.this, mrsnoDetailsArrayList);
                RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getApplicationContext());
                list_MRSNoDetails.setLayoutManager(mLayoutManager);
                list_MRSNoDetails.setAdapter(mrsNoDetailsAdapter);

            }

        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == 1150 && resultCode == 1221) {
            float issue = (float) 0.0;
            mrsnoDetailsArrayList = new Gson().fromJson(data.getStringExtra("objStr"), MRSNODetails.class).
                    getMrsnoDetailsArrayList();
            int positon = data.getIntExtra("position", 0);
            if (mrsnoDetailsArrayList.get(positon).getShowAllLotDetailsArrayList().size() != 0) {
                for (int i = 0; i < mrsnoDetailsArrayList.get(positon).getShowAllLotDetailsArrayList().size(); i++) {
                    issue = issue + mrsnoDetailsArrayList.get(positon).getShowAllLotDetailsArrayList().get(i).getIssueQty();
                }
            }

            if (issue != 0.0) {
                float s = Float.parseFloat(mrsnoDetailsArrayList.get(positon).getReqQty());
                if (s >= issue) {
                    mrsnoDetailsArrayList.get(positon).setIssuedQty(String.valueOf(issue));
                    mrsNoDetailsAdapter = new MRSNoDetailsAdapter(MaterialIssueMainActivity.this, mrsnoDetailsArrayList);
                    RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getApplicationContext());
                    list_MRSNoDetails.setLayoutManager(mLayoutManager);
                    list_MRSNoDetails.setAdapter(mrsNoDetailsAdapter);
                } else {
                    Toast.makeText(MaterialIssueMainActivity.this, "Issue quantity is greater than balance quantity", Toast.LENGTH_SHORT).show();
                    mrsNoDetailsAdapter = new MRSNoDetailsAdapter(MaterialIssueMainActivity.this, mrsnoDetailsArrayList);
                    RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getApplicationContext());
                    list_MRSNoDetails.setLayoutManager(mLayoutManager);
                    list_MRSNoDetails.setAdapter(mrsNoDetailsAdapter);
                }
            } else {
                mrsNoDetailsAdapter = new MRSNoDetailsAdapter(MaterialIssueMainActivity.this, mrsnoDetailsArrayList);
                RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getApplicationContext());
                list_MRSNoDetails.setLayoutManager(mLayoutManager);
                list_MRSNoDetails.setAdapter(mrsNoDetailsAdapter);
            }


        }
    }


    @Override
    public void onBackPressed() {
        super.onBackPressed();
        finish();
    }

    private class PostMR extends AsyncTask<String, Void, String> {
        Object res;
        String response;
        ProgressDialog progressDialog;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            //showProgressDialog();
            progressDialog = new ProgressDialog(MaterialIssueMainActivity.this);
            progressDialog.setMessage("Please wait data loading...");
            progressDialog.show();
        }


        @Override
        protected String doInBackground(String... strings) {

            String finalApprObj = strings[0];
            String url = CompanyURL + WebUrlClass.api_PostSaveMR;
            try {
                res = ut.OpenPostConnection(url, finalApprObj, MaterialIssueMainActivity.this);
                response = res.toString();
//                response = res.toString().replaceAll("\\\\", "");
//                response = response.replaceAll("\\\\\\\\/", "");
//                response = response.substring(1, response.length() - 1);


            } catch (Exception e) {
                e.printStackTrace();
                response = WebUrlClass.Errormsg;
            }
            return response;
        }


        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            progressDialog.dismiss();
            if (response.equals("true")) {
                Toast.makeText(MaterialIssueMainActivity.this, "Saved Successfully!!", Toast.LENGTH_SHORT).show();
                finish();

            } else {
                Toast.makeText(MaterialIssueMainActivity.this, "Please fill lot details...", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private class GetLotDetails extends AsyncTask<String,Void,String> {

        Object res;
        String response;
        ProgressDialog progressDialog;
        int pos;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            //showProgressDialog();
            progressDialog = new ProgressDialog(MaterialIssueMainActivity.this);
            progressDialog.setMessage("Please wait data loading...");
            progressDialog.show();
        }



        @Override
        protected String doInBackground(String... strings) {
            String locationId = strings[0];
            String itemMasterId = strings[1];
            String warehouseId = strings[2];
            pos = Integer.parseInt(strings[3]);


            String url = CompanyURL + WebUrlClass.api_GetLocationQty + "?SelectedValue1=" + locationId + "&ItemMasterId=" + itemMasterId +"&WarehouseMasterId="+warehouseId;

            try {
                res = ut.OpenConnection(url);
                if (res != null) {
                    response = res.toString();
                    response = res.toString().replaceAll("\\\\", "");
                    response = response.replaceAll("\\\\\\\\/", "");
                    response = response.substring(1, response.length() - 1);

                }

            } catch (Exception e) {
                e.printStackTrace();
            }


            return null;
        }


        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            progressDialog.dismiss();
            if(response.equals("1")){

            }else if(response.equals("0")){

            }


        }
    }
}
