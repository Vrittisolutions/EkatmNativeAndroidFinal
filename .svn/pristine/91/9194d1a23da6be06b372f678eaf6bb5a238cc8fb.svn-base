package com.vritti.inventory.MaterialRequisition.activity;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ProgressBar;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.vritti.crm.Interface.OnLoadMoreListener;
import com.vritti.databaselib.data.DatabaseHandlers;
import com.vritti.databaselib.other.Utility;
import com.vritti.databaselib.other.WebUrlClass;
import com.vritti.ekatm.MainActivity;
import com.vritti.ekatm.R;
import com.vritti.inventory.MaterialRequisition.model.MaterialListDataShow;
import com.vritti.sessionlib.CallbackInterface;
import com.vritti.sessionlib.StartSession;
import com.vritti.vwb.classes.CommonFunction;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;


/**
 * Created by sharvari on 18-Aug-17.
 */

public class MaterialFilter extends AppCompatActivity {

    String PlantMasterId ="", LoginId="", Password="", CompanyURL="", EnvMasterId="", UserMasterId="";
    Utility ut;
    DatabaseHandlers db;
    CommonFunction cf;
    Context context;
    String  UserName, MobileNo;
    String IsChatApplicable, IsGPSLocation;

    TextView txt_add,txt_show;
    Spinner spinner_plant;
    SQLiteDatabase sql;
    SharedPreferences sharedPreferences;
    public static final String MYPREFERENCE = "Mypreference";
    SharedPreferences.Editor editor;
    List<String> lstPlantList = new ArrayList<String>();
    RecyclerView list_material;
    ArrayList<MaterialListDataShow>materialListDataShowArrayList;
    private String PlantId;
    int check = 0;
    int index;
    int i=0;
    UserAdapter userAdapter;
    MaterialListDataShow materialListDataShow;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.inventory_material_filter_lay);

        init();



        context = getApplicationContext();
        ut = new Utility();
        cf = new CommonFunction(context);
        String settingKey = ut.getSharedPreference_SettingKey(context);
        String dabasename = ut.getValue(context, WebUrlClass.GET_DATABASE_NAME_KEY, settingKey);
        db = new DatabaseHandlers(context, dabasename);
        CompanyURL = ut.getValue(context, WebUrlClass.GET_COMPANY_URL_KEY, settingKey);
        EnvMasterId = ut.getValue(context, WebUrlClass.GET_EnvMasterID_KEY, settingKey);
        PlantMasterId = ut.getValue(context, WebUrlClass.GET_PlantID_KEY, settingKey);
        LoginId = ut.getValue(context, WebUrlClass.GET_LOGIN_KEY, settingKey);
        Password =ut.getValue(context, WebUrlClass.GET_PSW_KEY, settingKey);
        UserName = "";
        MobileNo = ut.getValue(context, WebUrlClass.GET_MOBILE_KEY, settingKey);

        UserMasterId = ut.getValue(context, WebUrlClass.GET_USERMASTERID_KEY, settingKey);
        UserName = ut.getValue(context, WebUrlClass.GET_USERNAME_KEY, settingKey);
        MobileNo = ut.getValue(context, WebUrlClass.GET_MOBILE_KEY, settingKey);
        IsChatApplicable = ut.getValue(context, WebUrlClass.GET_ISCHATAPPLICABLE_KEY, settingKey);
        IsGPSLocation = ut.getValue(context, WebUrlClass.GET_ISGPSLOCATION_KEY, settingKey);


        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
      //  sharedPreferences = getSharedPreferences(MainActivity.USERINFO,
        //        Context.MODE_PRIVATE);
      //  CompanyURL = sharedPreferences.getString("CompanyURL", null);
       // db = new DatabaseHandler(MaterialFilter.this);
        sql = db.getWritableDatabase();
        materialListDataShowArrayList=new ArrayList<>();
        materialListDataShow=new MaterialListDataShow();

        if (db.getPlantListcount() > 0) {
            getPlantlist();
        } else {
            if (isnet()) {
                new StartSession(MaterialFilter.this, new CallbackInterface() {
                    @Override
                    public void callMethod() {
                        new DownloadPlantListJSON().execute();
                    }

                    @Override
                    public void callfailMethod(String msg) {

                    }
                });
            }
        }

        list_material.setLayoutManager(new LinearLayoutManager(MaterialFilter.this));
        userAdapter = new UserAdapter(list_material, materialListDataShowArrayList, MaterialFilter.this);

        //set load more listener for the RecyclerView adapter
        userAdapter.setOnLoadMoreListener(new OnLoadMoreListener() {
            @Override
            public void onLoadMore() {
                if (materialListDataShowArrayList.size()>= 10) {
                    materialListDataShowArrayList.add(null);
                    userAdapter.notifyItemInserted(materialListDataShowArrayList.size() - 1);
                    new Handler().postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            materialListDataShowArrayList.remove(materialListDataShowArrayList.size() - 1);
                            userAdapter.notifyItemRemoved(materialListDataShowArrayList.size());

                            //Generating more data
                            index = materialListDataShowArrayList.size();
                            int end = index + 10;
                            for (i= index; i < end; i++) {
                                if (isnet()) {
                                    new StartSession(MaterialFilter.this, new CallbackInterface() {
                                        @Override
                                        public void callMethod() {
                                            new DownloadMaterialDetailsData().execute(String.valueOf(i),PlantId);
                                        }

                                        @Override
                                        public void callfailMethod(String msg) {

                                        }
                                    });
                                }
                            }
                            userAdapter.notifyDataSetChanged();
                            userAdapter.setLoaded();
                        }
                    }, 5000);
                } else {
                    Toast.makeText(MaterialFilter.this, "Loading data completed", Toast.LENGTH_SHORT).show();
                }
            }
        });

    }



    private void init() {

        txt_add= (TextView) findViewById(R.id.txtadd);
        txt_show= (TextView) findViewById(R.id.txt_show);
        spinner_plant= (Spinner) findViewById(R.id.spinner_plant);
        list_material= (RecyclerView) findViewById(R.id.list_material);

        txt_add.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                startActivity(new Intent(MaterialFilter.this,InventoryShow.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP));
            }
        });
        spinner_plant.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {

                    String query = "SELECT distinct PlantMasterId,PlantName" +
                            " FROM " + db.TABLE_PlantList +
                            " WHERE PlantName='" + spinner_plant.getSelectedItem().toString() + "'";
                    Cursor cur = sql.rawQuery(query, null);

                    if (cur.getCount() > 0) {

                        cur.moveToFirst();
                        do {

                            PlantId = cur.getString(cur.getColumnIndex("PlantMasterId"));
                            if (isnet()) {
                                new StartSession(MaterialFilter.this, new CallbackInterface() {
                                    @Override
                                    public void callMethod() {
                                        new DownloadItemListData().execute(PlantId);
                                    }

                                    @Override
                                    public void callfailMethod(String msg) {

                                    }
                                });
                            }

                        } while (cur.moveToNext());

                    } else {
                        PlantId = "";
                    }

                }


            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
        txt_show.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (isnet()) {
                    new StartSession(MaterialFilter.this, new CallbackInterface() {
                        @Override
                        public void callMethod() {
                            new DownloadMaterialDetailsData().execute(String.valueOf(i),PlantId);
                        }

                        @Override
                        public void callfailMethod(String msg) {

                        }
                    });
                }
                /*if (isnet()) {
                    new StartSession(MaterialFilter.this, new CallbackInterface() {
                        @Override
                        public void callMethod() {
                            new DownloadItemListData().execute(PlantId);
                        }
                    });
                }*/
            }
        });
    }

    private boolean isnet() {
        // TODO Auto-generated method stub
        Context context = this.getApplicationContext();
        ConnectivityManager cm = (ConnectivityManager) context
                .getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo netInfo = cm.getActiveNetworkInfo();
        if (netInfo != null && netInfo.isConnectedOrConnecting()) {
            return true;
        } else {
            Toast.makeText(context, "No internet connection", Toast.LENGTH_LONG).show();
            return false;
        }
    }
    class DownloadPlantListJSON extends AsyncTask<String, Void, String> {
        Object res;
        String response;
        ProgressDialog progressDialog;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            //showProgressDialog();
            progressDialog = new ProgressDialog(MaterialFilter.this);
            progressDialog.setMessage("Please wait data loading...");
            if (!isFinishing()) {
                progressDialog.show();
            }
        }

        @Override
        protected String doInBackground(String... params) {

            String url = CompanyURL + WebUrlClass.api_GetPlantList;

            try {
                res = ut.OpenConnection(url);
                if (res!=null) {
                    response = res.toString();
               /* response = res.toString().replaceAll("\\\\", "");
                response = response.replaceAll("\\\\\\\\/", "");
                response = response.substring(1, response.length() - 1);*/
                    ContentValues values = new ContentValues();
                    JSONArray jResults = new JSONArray(response);

                    sql.delete(db.TABLE_PlantList, null,
                            null);
                    Cursor c = sql.rawQuery("SELECT * FROM " + db.TABLE_PlantList, null);
                    int count = c.getCount();
                    String columnName, columnValue;

                    for (int i = 0; i < jResults.length(); i++) {
                        JSONObject jorder = jResults.getJSONObject(i);
                        for (int j = 0; j < c.getColumnCount(); j++) {
                            columnName = c.getColumnName(j);
                            columnValue = jorder.getString(columnName);
                            values.put(columnName, columnValue);


                        }

                        long a = sql.insert(db.TABLE_PlantList, null, values);

                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPostExecute(String integer) {
            super.onPostExecute(integer);
            progressDialog.dismiss();
            // dismissProgressDialog();
            if (response.contains("")) {

            }
            getPlantlist();
        }


    }
    private void getPlantlist() {
        lstPlantList.clear();
        String query = "SELECT distinct PlantMasterId,PlantName" +
                " FROM " + db.TABLE_PlantList;
        Cursor cur = sql.rawQuery(query, null);
        //   lstReferenceType.add("Select");
        if (cur.getCount() > 0) {

            cur.moveToFirst();
            do {


                lstPlantList.add(cur.getString(cur.getColumnIndex("PlantName")));

            } while (cur.moveToNext());

        }

        MySpinnerAdapter customDept = new MySpinnerAdapter(MaterialFilter.this,
                R.layout.custom_spinner_txt, lstPlantList);
        spinner_plant.setAdapter(customDept);
        //   customDept.notifyDataSetChanged();
        spinner_plant.setSelection(0);
    }
    private static class MySpinnerAdapter extends ArrayAdapter<String> {
        // Initialise custom font, for example:


        private MySpinnerAdapter(Context context, int resource,
                                 List<String> items) {
            super(context, resource, items);
        }
        // Affects default (closed) state of the spinner
        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            TextView view = (TextView) super.getView(position, convertView,
                    parent);
            //view.setTypeface(font);
            return view;
        }

        // Affects opened state of the spinner
        @Override
        public View getDropDownView(int position, View convertView,
                                    ViewGroup parent) {
            TextView view = (TextView) super.getDropDownView(position,
                    convertView, parent);
            //  view.setTypeface(font);
            return view;
        }

    }

//Recyclerview Code

    static class UserViewHolder extends RecyclerView.ViewHolder {
        public TextView txt_status,txt_requisition,txt_department,txt_mrsdate,txt_mrsno;
        public UserViewHolder(View itemView) {
            super(itemView);
            txt_mrsno = (TextView) itemView.findViewById(R.id.txt_mrsno);
            txt_mrsdate = (TextView) itemView.findViewById(R.id.txt_mrsdate);
            txt_department = (TextView) itemView.findViewById(R.id.txt_department);
            txt_requisition = (TextView) itemView.findViewById(R.id.txt_requisition);
            txt_status = (TextView) itemView.findViewById(R.id.txt_status);
        }
    }
    static class LoadingViewHolder extends RecyclerView.ViewHolder {
        public ProgressBar progressBar;
        public LoadingViewHolder(View itemView) {
            super(itemView);
            progressBar = (ProgressBar) itemView.findViewById(R.id.progressBar1);
        }
    }
    class UserAdapter extends RecyclerView.Adapter < RecyclerView.ViewHolder > {
        private final int VIEW_TYPE_ITEM = 0;
        private final int VIEW_TYPE_LOADING = 1;
        private OnLoadMoreListener mOnLoadMoreListener;
        private boolean isLoading;
        private int visibleThreshold = 5;
        private int lastVisibleItem, totalItemCount;
        ArrayList<MaterialListDataShow>materialListDataShowArrayList;
        Activity activity;


        public UserAdapter(RecyclerView recyclerView, ArrayList<MaterialListDataShow> materialListDataShowArrayList, Activity activity) {
            this.materialListDataShowArrayList = materialListDataShowArrayList;
            this.activity = activity;
            final LinearLayoutManager linearLayoutManager = (LinearLayoutManager) list_material.getLayoutManager();
            /*list_material.addOnScrollListener(new RecyclerView.OnScrollListener() {
                @Override
                public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                    super.onScrolled(recyclerView, dx, dy);
                    totalItemCount = linearLayoutManager.getItemCount();
                    lastVisibleItem = linearLayoutManager.findLastVisibleItemPosition();
                    if (!isLoading && totalItemCount <= (lastVisibleItem + visibleThreshold)) {
                        if (mOnLoadMoreListener != null) {
                            mOnLoadMoreListener.onLoadMore();
                        }
                        isLoading = true;
                    }
                }
            });*/
        }

        public void setOnLoadMoreListener(OnLoadMoreListener mOnLoadMoreListener) {
            this.mOnLoadMoreListener = mOnLoadMoreListener;
        }
        @Override public int getItemViewType(int position) {
            return materialListDataShowArrayList.get(position) == null ? VIEW_TYPE_LOADING : VIEW_TYPE_ITEM;
        }
        @Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            if (viewType == VIEW_TYPE_ITEM) {
                View view = LayoutInflater.from(MaterialFilter.this).inflate(R.layout.inventory_material_list_show, parent, false);
                return new UserViewHolder(view);
            }
            return null;
        }
        @Override public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
            if (holder instanceof UserViewHolder) {
                MaterialListDataShow user = materialListDataShowArrayList.get(position);
                UserViewHolder userViewHolder = (UserViewHolder) holder;
                userViewHolder.txt_mrsno.setText(user.getMRSNO());
                userViewHolder.txt_mrsdate.setText(user.getMRSDate());
                userViewHolder.txt_department.setText(user.getDepartment());
                userViewHolder.txt_requisition.setText(user.getRequisition());
                userViewHolder.txt_status.setText(user.getStatus());
            } else if (holder instanceof LoadingViewHolder) {
                LoadingViewHolder loadingViewHolder = (LoadingViewHolder) holder;
                loadingViewHolder.progressBar.setIndeterminate(true);
            }
        }
        @Override public int getItemCount() {
            return materialListDataShowArrayList == null ? 0 : materialListDataShowArrayList.size();
        }
        public void setLoaded() {
            isLoading = false;
        }
    }


    class DownloadMaterialDetailsData extends AsyncTask<String, Void, String> {
        Object res;
        String response;
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        SimpleDateFormat sdf1 = new SimpleDateFormat("dd MMM hh:mm");
        Date DOJDate = null, DOBDate = null;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
          //  showProgressDialog();
        }

        @Override
        protected String doInBackground(String... params) {

            try {
                String url = CompanyURL + WebUrlClass.api_GetMRSDataDetails + "?RowIndexStart=0&PlantMasterId="+PlantId;

                System.out.println("URLCALLHISTORY :"+url);
                res = ut.OpenConnection(url);
                if (res!=null) {
                    response = res.toString().replaceAll("\\\\", "");
               /* response = response.replaceAll("\\\\\\\\/", "");
                response = response.substring(1, response.length() - 1);*/
                    ContentValues values = new ContentValues();
                    JSONArray jResults = new JSONArray(response);

                    for (int i = 0; i < jResults.length(); i++) {
                        JSONObject jsonMaterialShow = jResults.getJSONObject(i);

                        MaterialListDataShow materialListDataShow = new MaterialListDataShow();
                        materialListDataShow.setMRSNO(jsonMaterialShow.getString("MRSNo"));
                        materialListDataShow.setDepartment(jsonMaterialShow.getString("DeptDesc"));
                        materialListDataShow.setMRSDate(jsonMaterialShow.getString("MRSDate"));
                        materialListDataShow.setRequisition(jsonMaterialShow.getString("UserName"));
                        materialListDataShowArrayList.add(materialListDataShow);

                    }

                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            return null;
        }

        @Override
        protected void onPostExecute(String integer) {
            super.onPostExecute(integer);
            userAdapter = new UserAdapter(list_material, materialListDataShowArrayList, MaterialFilter.this);
            list_material.setAdapter(userAdapter);
            userAdapter.notifyDataSetChanged();





        }

    }

    class DownloadItemListData extends AsyncTask<String, Void, String> {
        Object res;
        String response;
        ProgressDialog progressDialog;


        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            progressDialog = new ProgressDialog(MaterialFilter.this);
            progressDialog.setMessage("Please wait data loading...");
            if (!isFinishing()) {
                progressDialog.show();
            }
        }

        @Override
        protected String doInBackground(String... params) {
            try {
                String url = CompanyURL + WebUrlClass.api_GetItemList+"?PKPlantId="+params[0];
                res = ut.OpenConnection(url);
                if (res!=null) {
                    //response = res.toString().replaceAll("\\\\", "");
                    response = res.toString();
                    // response = response.replaceAll("\\\\\\\\/", "");
                    //response = response.substring(1, response.length() - 1);
                }
            } catch (Exception e) {
                e.printStackTrace();
                response = "error";
            }
            return response;
        }

        @Override
        protected void onPostExecute(String integer) {
            super.onPostExecute(integer);
            progressDialog.dismiss();

            try {
                JSONArray jResults = null;
                jResults = new JSONArray(response);
                ContentValues values = new ContentValues();

                sql.delete(db.TABLE_MaterialItemList, null,
                        null);
                Cursor c = sql.rawQuery("SELECT * FROM " + db.TABLE_MaterialItemList, null);
                int count = c.getCount();
                String columnName, columnValue;
                for (int i = 0; i < jResults.length(); i++) {
                    JSONObject jorder = jResults.getJSONObject(i);
                    for (int j = 0; j < c.getColumnCount(); j++) {

                        columnName = c.getColumnName(j);
                        columnValue = jorder.getString(columnName);
                        values.put(columnName, columnValue);

                    }

                    long a = sql.insert(db.TABLE_MaterialItemList, null, values);
                    Log.e("log data", "" + a);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }




        }


    }
    @Override
    public void onBackPressed() {
        super.onBackPressed();
        MaterialFilter.this.finish();
    }
    @Override
    public boolean onOptionsItemSelected(MenuItem menuItem) {
        switch (menuItem.getItemId()) {
            case android.R.id.home:
                onBackPressed();
        }
        return (super.onOptionsItemSelected(menuItem));
    }


}
