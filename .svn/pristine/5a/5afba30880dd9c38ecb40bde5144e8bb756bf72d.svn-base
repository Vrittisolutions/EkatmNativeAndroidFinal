package com.vritti.inventory.MaterialRequisition.activity;

import android.app.DatePickerDialog;
import android.app.ProgressDialog;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.AppCompatRadioButton;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.PopupMenu;
import android.widget.RadioGroup;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.toptoche.searchablespinnerlibrary.SearchableSpinner;
import com.vritti.databaselib.data.DatabaseHandlers;
import com.vritti.databaselib.other.Utility;
import com.vritti.databaselib.other.WebUrlClass;
import com.vritti.ekatm.R;
import com.vritti.inventory.MaterialRequisition.adapter.ItemlistAdapter;
import com.vritti.inventory.MaterialRequisition.classes.Inventory_CommonFunction;
import com.vritti.inventory.MaterialRequisition.model.MaterialOrder;
import com.vritti.sessionlib.CallbackInterface;
import com.vritti.sessionlib.StartSession;
import com.vritti.vwb.classes.CommonFunction;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/**
 * Created by sharvari on 04-Aug-17.
 */

public class InventoryShow extends AppCompatActivity implements PopupMenu.OnMenuItemClickListener {


    String PlantMasterId = "", LoginId = "", Password = "", CompanyURL = "", EnvMasterId = "", UserMasterId = "";
    Utility ut;
    DatabaseHandlers db;
    CommonFunction cf;
    Context context;
    String UserName, MobileNo;
    String IsChatApplicable, IsGPSLocation;
    SQLiteDatabase sql;
    Inventory_CommonFunction inventory_commonFunction;

    Button btncancel, btnsave;
    TextView btn_header, btn_item;
    TextView button_add, txt_mrn_no;
    ListView list_item;
    LayoutInflater mInflater;
    ViewGroup viewGroupheader, viewGroupitem;
    FrameLayout container;
    RadioGroup radiogroup_item;
    AppCompatRadioButton radio_material_item, radio_material_order;
    String Material_item, Material_order, Supplier_id = "", date;
    LinearLayout len_supplier_name;
    SharedPreferences sharedPreferences;
    public static final String MYPREFERENCE = "Mypreference";
    SharedPreferences.Editor editor;

    SearchableSpinner spinner_supplier_name, spinner_department;
    Spinner spinnera_mrs_type;
    List<String> lstSuppliername = new ArrayList<String>();
    List<String> lstDepartment = new ArrayList<String>();
    EditText editTextDate, edt_purpose, edt_remark;
    int year, month, day;
    ImageView img_mrs_date;
    SimpleDateFormat dateFormatdate;
    int check = 0;
    ArrayList<MaterialOrder> materialOrders = new ArrayList<>();
    ArrayList<MaterialOrder> materialOrderArrayList = new ArrayList<>();
    ItemlistAdapter itemlistAdapter;
    private String order;
    String MRSHeaderId, StatusId, MRSNo, MRSDate, DeptMasterId, RequisitionerId, Purpose = "", Remark = "",
            RouteName = "", SegmentType = "", RouteFrom = "", RouteTo = "", Address = "",MRSType="",MRSTypeValue;
    String Header_Json;
    String[] Work_Order;
    String[] Mode;
    String[] MRSDeleteArr;
    String[] chkMRSType;
    String Routename = "", finaljson, ItemCode, ItemDesc, ReqQty, ItemMasterId, MRSDetailId, UOMDesc, UOMMasterId,
            StockQuantity, HeaderRemark, lblhdn,
            HeaderRouteName = "", HeaderSegmentType = "", HeaderRouteFrom = "",
            HeaderRouteTo = "", HeaderAddress = "", MODetailId = "", WarehouseMasterName = "", LocationMasterName = "";

    int action_Pos;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.add_inventory_data);


        context = getApplicationContext();
        ut = new Utility();
        cf = new CommonFunction(context);
        String settingKey = ut.getSharedPreference_SettingKey(context);
        String dabasename = ut.getValue(context, WebUrlClass.GET_DATABASE_NAME_KEY, settingKey);
        db = new DatabaseHandlers(context, dabasename);
        CompanyURL = ut.getValue(context, WebUrlClass.GET_COMPANY_URL_KEY, settingKey);
        EnvMasterId = ut.getValue(context, WebUrlClass.GET_EnvMasterID_KEY, settingKey);
        PlantMasterId = ut.getValue(context, WebUrlClass.GET_PlantID_KEY, settingKey);
        LoginId = ut.getValue(context, WebUrlClass.GET_LOGIN_KEY, settingKey);
        Password = ut.getValue(context, WebUrlClass.GET_PSW_KEY, settingKey);
        UserName = "";
        MobileNo = ut.getValue(context, WebUrlClass.GET_MOBILE_KEY, settingKey);

        UserMasterId = ut.getValue(context, WebUrlClass.GET_USERMASTERID_KEY, settingKey);
        UserName = ut.getValue(context, WebUrlClass.GET_USERNAME_KEY, settingKey);
        MobileNo = ut.getValue(context, WebUrlClass.GET_MOBILE_KEY, settingKey);
        IsChatApplicable = ut.getValue(context, WebUrlClass.GET_ISCHATAPPLICABLE_KEY, settingKey);
        IsGPSLocation = ut.getValue(context, WebUrlClass.GET_ISGPSLOCATION_KEY, settingKey);
        sql = db.getWritableDatabase();
        inventory_commonFunction = new Inventory_CommonFunction(InventoryShow.this);


        initview();

        if (db.getSuppliernamecount() > 0) {
            getSupplier();
        } else {
            if (isnet()) {
                new StartSession(InventoryShow.this, new CallbackInterface() {
                    @Override
                    public void callMethod() {
                        new DownloadSuppliernameJSON().execute();
                    }

                    @Override
                    public void callfailMethod(String msg) {

                    }
                });
            }
        }
        if (isnet()) {
            new StartSession(InventoryShow.this, new CallbackInterface() {
                @Override
                public void callMethod() {
                    new GetMrsNOJson().execute();
                }

                @Override
                public void callfailMethod(String msg) {

                }
            });
        }

        if (db.getWarehousecount() > 0) {
        } else {
            if (isnet()) {

                new StartSession(InventoryShow.this, new CallbackInterface() {
                    @Override
                    public void callMethod() {
                        new DownloadWarehouseJSON().execute();
                    }

                    @Override
                    public void callfailMethod(String msg) {

                    }
                });
            }
        }

        if (db.getDepartmentcount() > 0) {
            getDepartment();
        } else {
            if (isnet()) {
                new StartSession(InventoryShow.this, new CallbackInterface() {
                    @Override
                    public void callMethod() {
                        new DownloadDepartmentJSON().execute(PlantMasterId);
                    }

                    @Override
                    public void callfailMethod(String msg) {

                    }
                });
            }
        }
        updatelist();


    }

    private void initview() {
        btnsave = (Button) findViewById(R.id.btnsave);
        btncancel = (Button) findViewById(R.id.btncancel);
        btn_header = (TextView) findViewById(R.id.btn_header);
        btn_item = (TextView) findViewById(R.id.btn_item);
        container = (FrameLayout) findViewById(R.id.container);

        mInflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        viewGroupheader = (ViewGroup) mInflater.inflate(R.layout.inventory_lay_add_material_header, container, false);
        container.addView(viewGroupheader);


        viewGroupitem = (ViewGroup) mInflater.inflate(R.layout.inventory_lay_add_material_item, container, false);


        button_add = (TextView) viewGroupitem.findViewById(R.id.button_add);
        list_item = (ListView) viewGroupitem.findViewById(R.id.list_material_item);


        radiogroup_item = (RadioGroup) viewGroupheader.findViewById(R.id.radiogroup_item);
        radio_material_item = (AppCompatRadioButton) viewGroupheader.findViewById(R.id.radio_material_item);
        radio_material_order = (AppCompatRadioButton) viewGroupheader.findViewById(R.id.radio_material_order);
        len_supplier_name = (LinearLayout) viewGroupheader.findViewById(R.id.len_supplier_name);
        editTextDate = (EditText) viewGroupheader.findViewById(R.id.editTextDate);
        edt_purpose = (EditText) viewGroupheader.findViewById(R.id.edt_purpose);
        edt_remark = (EditText) viewGroupheader.findViewById(R.id.edt_remark);

        img_mrs_date = (ImageView) viewGroupheader.findViewById(R.id.img_mrs_date);
        txt_mrn_no = (TextView) viewGroupheader.findViewById(R.id.txt_mrn_no);

        dateFormatdate = new SimpleDateFormat("yyyy/MM/dd");
        editTextDate.setText(dateFormatdate.format(new Date()));
        final Calendar c = Calendar.getInstance();
        year = c.get(Calendar.YEAR);
        month = c.get(Calendar.MONTH);
        day = c.get(Calendar.DAY_OF_MONTH);
        date = year + "-" + String.format("%02d", (month + 1)) + "-" + String.format("%02d", (day));


        spinner_supplier_name = (SearchableSpinner) viewGroupheader.findViewById(R.id.spinner_supplier_name);
        spinner_department = (SearchableSpinner) viewGroupheader.findViewById(R.id.spinner_department);
        spinnera_mrs_type =  viewGroupheader.findViewById(R.id.spinnera_mrs_type);

        sharedPreferences = getSharedPreferences(MYPREFERENCE, MODE_PRIVATE);
        editor = sharedPreferences.edit();


        btn_header.setOnClickListener(new View.OnClickListener() {
                                          @Override
                                          public void onClick(View view) {
                                              container.removeView(viewGroupitem);
                                              if (viewGroupheader.getParent() != null)
                                                  ((ViewGroup) viewGroupheader.getParent()).removeView(viewGroupheader); // <- fix
                                              container.addView(viewGroupheader);
                                              /*container.removeView(viewGroupitem);
                                              container.addView(viewGroupheader);
*/

                                          }
                                      }
        );

        btn_item.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View view) {
                                            container.removeView(viewGroupheader);
                                            if (viewGroupitem.getParent() != null)
                                                ((ViewGroup) viewGroupitem.getParent()).removeView(viewGroupitem); // <- fix
                                            container.addView(viewGroupitem);
                                            /*container.removeView(viewGroupheader);
                                            container.addView(viewGroupitem);*/
                                            updatelist();

                                            button_add.setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View view) {
                                                    String datasheetList = new Gson().toJson(new MaterialOrder(materialOrderArrayList));
                                                    Intent intent = new Intent(InventoryShow.this, ActivityMaterialOrder.class);
                                                    intent.putExtra("editMaterialOrderList", datasheetList);
                                                    intent.putExtra("Mode", "A");
                                                    intent.putExtra("position", 0);
                                                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                    startActivity(intent);


                                                }
                                            });
                                        }
                                    }
        );

        radio_material_item.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                Material_item = radio_material_item.getText().toString();
                if (radio_material_item.isChecked()) {
                    // db.deleteallMaterialitem();
                    order = "MRSItem";
                    len_supplier_name.setVisibility(View.GONE);
                    editor.putString("material", order);
                    editor.commit();
                    radio_material_item.setChecked(true);


                }
            }
        });

        radio_material_order.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                Material_order = radio_material_order.getText().toString();
                if (radio_material_order.isChecked()) {
                    //  db.deleteallMaterialitem();
                    order = "MRSPO";
                    len_supplier_name.setVisibility(View.VISIBLE);
                    editor.putString("material", order);
                    editor.commit();
                    radio_material_order.setChecked(true);
                }
            }
        });
        editTextDate.setOnClickListener(new View.OnClickListener() {


            @Override
            public void onClick(View v) {
                final Calendar c = Calendar.getInstance();
                year = c.get(Calendar.YEAR);
                month = c.get(Calendar.MONTH);
                day = c.get(Calendar.DAY_OF_MONTH);
                DatePickerDialog datePickerDialog = new DatePickerDialog(InventoryShow.this,
                        new DatePickerDialog.OnDateSetListener() {

                            @Override
                            public void onDateSet(DatePicker datePicker, int year,
                                                  int monthOfYear, int dayOfMonth) {
                                //    datePicker.setMinDate(c.getTimeInMillis());
                                date = year + "-" + String.format("%02d", (monthOfYear + 1)) + "-" + String.format("%02d", (dayOfMonth));
                                editTextDate.setText(date);
                            }
                        }, year, month, day);
                datePickerDialog.setTitle("Select Date");

                datePickerDialog.show();
            }
        });

        img_mrs_date.setOnClickListener(new View.OnClickListener() {
            int year, month, day;

            @Override
            public void onClick(View v) {
                final Calendar c = Calendar.getInstance();
                year = c.get(Calendar.YEAR);
                month = c.get(Calendar.MONTH);
                day = c.get(Calendar.DAY_OF_MONTH);
                DatePickerDialog datePickerDialog = new DatePickerDialog(InventoryShow.this,
                        new DatePickerDialog.OnDateSetListener() {

                            @Override
                            public void onDateSet(DatePicker datePicker, int year,
                                                  int monthOfYear, int dayOfMonth) {
                                //    datePicker.setMinDate(c.getTimeInMillis());
                                date = year + "-" + String.format("%02d", (monthOfYear + 1)) + "-" + String.format("%02d", (dayOfMonth));
                                editTextDate.setText(date);
                            }
                        }, year, month, day);
                datePickerDialog.setTitle("Select Date");

                datePickerDialog.show();
            }
        });

        spinner_supplier_name.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                if (++check > 1) {
                    String query = "SELECT distinct CustVendorName,CustVendorMasterId" +
                            " FROM " + db.TABLE_Suppliername +
                            " WHERE CustVendorName='" + spinner_supplier_name.getSelectedItem().toString() + "'";
                    Cursor cur = sql.rawQuery(query, null);

                    if (cur.getCount() > 0) {

                        cur.moveToFirst();
                        do {

                            Supplier_id = cur.getString(cur.getColumnIndex("CustVendorMasterId"));
                            editor.putString("supplied_id", Supplier_id);
                            editor.commit();
                            if (isnet()) {
                                new StartSession(InventoryShow.this, new CallbackInterface() {
                                    @Override
                                    public void callMethod() {
                                        new DownloadWorkorderData().execute(Supplier_id);
                                    }

                                    @Override
                                    public void callfailMethod(String msg) {

                                    }
                                });

                            }

                        } while (cur.moveToNext());

                    } else {
                        Supplier_id = "";
                    }

                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

        spinner_department.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                if (++check > 1) {
                    String query = "SELECT distinct DeptDesc,PKDeptMasterId" +
                            " FROM " + db.TABLE_Department +
                            " WHERE DeptDesc='" + spinner_department.getSelectedItem().toString() + "'";
                    Cursor cur = sql.rawQuery(query, null);

                    if (cur.getCount() > 0) {

                        cur.moveToFirst();
                        do {

                            DeptMasterId = cur.getString(cur.getColumnIndex("PKDeptMasterId"));

                        } while (cur.moveToNext());

                    } else {
                        DeptMasterId = "";
                    }

                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
        btncancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });

        btnsave.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {


                //Json_Header
                JSONObject jsonheader = new JSONObject();
                try {

                    MRSNo = txt_mrn_no.getText().toString();
                    MRSTypeValue = spinnera_mrs_type.getSelectedItem().toString();
                    MRSDate = date;
                    Purpose = edt_purpose.getText().toString();
                    Remark = edt_remark.getText().toString();
                    if(MRSTypeValue.equalsIgnoreCase("Consumption")){
                        MRSType="10";
                    }else if(MRSTypeValue.equalsIgnoreCase("Sample")){
                        MRSType="20";
                    }else if(MRSTypeValue.equalsIgnoreCase("Stock Transfer")){
                        MRSType="30";
                    }

                    jsonheader.put("MRSHeaderId", "");
                    jsonheader.put("StatusId", "10");
                    jsonheader.put("MRSType",MRSType);
                 //   jsonheader.put("MRSNo", "");
                    jsonheader.put("MRSDate", MRSDate);
                    jsonheader.put("DeptMasterId", DeptMasterId);
                    // jsonheader.put("RequisitionerId", "");
                    jsonheader.put("Purpose", Purpose);
                    jsonheader.put("Remark", Remark);
                    jsonheader.put("RouteName", "");
                    jsonheader.put("SegmentType", "");
                    jsonheader.put("RouteFrom", "");
                    jsonheader.put("RouteTo", "");
                    jsonheader.put("Address", "");
                    //  Header_Json =jsonheader;


                } catch (Exception e) {
                    e.printStackTrace();
                }

                //Json_Work_Order

                JSONObject jsonWork_order = new JSONObject();
                try {
                    if (materialOrders.size() > 0) {
                        Work_Order = new String[materialOrders.size()];


                        for (int i = 0; i < materialOrders.size(); i++) {

                            jsonWork_order.put("MRSDetailId", materialOrders.get(i).getMRSDetailId());
                            jsonWork_order.put("ItemMasterId", materialOrders.get(i).getItemMasterId());
                            jsonWork_order.put("ItemCode", materialOrders.get(i).getItemCode());
                            jsonWork_order.put("ItemDesc", materialOrders.get(i).getItemDesc());
                            jsonWork_order.put("UOMDesc", "--Select--");
                            jsonWork_order.put("UOMMasterId", materialOrders.get(i).getUOMMasterId());
                            jsonWork_order.put("StockQuantity", materialOrders.get(i).getStockQuantity());
                            jsonWork_order.put("ReqQty", materialOrders.get(i).getReqQty());
                            jsonWork_order.put("Remark", materialOrders.get(i).getRemark());
                            jsonWork_order.put("lblhdn", materialOrders.get(i).getlblhdn());
                            MODetailId = materialOrders.get(i).getMODetailId();
                            if (MODetailId == null) {
                                jsonWork_order.put("MODetailId", "");
                            } else {
                                jsonWork_order.put("MODetailId", MODetailId);
                            }

                            Supplier_id = materialOrders.get(i).getSupplierId();
                            if (Supplier_id == null) {
                                jsonWork_order.put("SupplierId", "");
                            } else {
                                jsonWork_order.put("SupplierId", Supplier_id);

                            }

                            Routename = materialOrders.get(i).getRouteName();
                            if (Routename == null) {
                                jsonWork_order.put("RouteName", "");
                            } else {
                                jsonWork_order.put("RouteName", Routename);
                            }
                            jsonWork_order.put("SegmentType", materialOrders.get(i).getSegmentType());
                            RouteFrom = materialOrders.get(i).getRouteFrom();
                            if (RouteFrom == null) {
                                jsonWork_order.put("RouteFrom", "");
                            } else {
                                jsonWork_order.put("RouteFrom", RouteFrom);
                            }

                            if (RouteFrom == null) {
                                jsonWork_order.put("RouteFrom", "");
                            } else {
                                jsonWork_order.put("RouteFrom", RouteFrom);
                            }

                            RouteTo = materialOrders.get(i).getRouteTo();
                            if (RouteTo == null) {
                                jsonWork_order.put("RouteTo", "");
                            } else {
                                jsonWork_order.put("RouteTo", RouteTo);
                            }

                            jsonWork_order.put("Address", materialOrders.get(i).getAddress());


                            Work_Order[i] = jsonWork_order.toString();
                        }
                    } else {
                        Work_Order = new String[0];
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }

                Mode = new String[5];
                JSONObject jsonMode = new JSONObject();
                try {

                    jsonMode.put("Mode", "A");

                } catch (JSONException e) {
                    e.printStackTrace();
                }
                MRSDeleteArr = new String[5];
                JSONObject jsonMrsdelete = new JSONObject();
                try {

                    jsonMrsdelete.put("MRSDeleteArr", "");

                } catch (JSONException e) {
                    e.printStackTrace();
                }

                chkMRSType = new String[5];
                JSONObject jsonchkMRSType = new JSONObject();
                try {

                    jsonchkMRSType.put("chkMRSType", order);

                } catch (JSONException e) {
                    e.printStackTrace();
                }

                JSONObject jsonData = new JSONObject();

                try {


                    //   JSONArray obj1 = new JSONArray();
                    /* JSONObject a = new JSONObject(Header_Json);
                     String obj1=a.toString();
*/
                    jsonData.put("HeaderData", jsonheader);

                    JSONArray obj = new JSONArray();
                    JSONObject a1;
                    int i;
                    for (i = 0; i < Work_Order.length; i++) {
                        a1 = new JSONObject(Work_Order[i]);
                        obj.put(a1);
                    }
                    jsonData.put("MRequNoteData", obj);
                    // jsonData.put("MRSDeleteArr", obj);

                   /* JSONArray Mode1 = new JSONArray();
                    //    JSONArray MRSDeleteArr1 = new JSONArray();
                    JSONArray chkMRSType1 = new JSONArray();
                     JSONObject Mode = new JSONObject(jsonMode.toString());
                     Mode1.put(Mode);
                    JSONObject chkMRSType = new JSONObject(jsonchkMRSType.toString());
                    chkMRSType1.put(chkMRSType);
*/
                    jsonData.put("Mode", "A");
                    jsonData.put("chkMRSType", order);


                } catch (JSONException e) {
                    e.printStackTrace();
                }
                finaljson = jsonData.toString();
                finaljson = finaljson.replaceAll("\\\\", "");

                if (isnet()) {
                    new StartSession(InventoryShow.this, new CallbackInterface() {
                        @Override
                        public void callMethod() {
                            new MaterialPOSTSaveMRSNoteJSON().execute(finaljson);
                        }

                        @Override
                        public void callfailMethod(String msg) {

                        }
                    });
                }

            }
        });

    }

    private void updatelist() {

        materialOrders.clear();
        materialOrderArrayList.clear();

        String query = "SELECT * FROM " + db.TABLE_AddMaterialPoOrder;
        Cursor cur = sql.rawQuery(query, null);
        int count = cur.getCount();
        if (cur.getCount() > 0) {
            cur.moveToFirst();
            do {
                MaterialOrder materialOrder = new MaterialOrder();
                ItemCode = cur.getString(cur.getColumnIndex("ItemCode"));
                materialOrder.setItemCode(ItemCode);
                ItemDesc = cur.getString(cur.getColumnIndex("ItemDesc"));
                materialOrder.setItemDesc(ItemDesc);
                ReqQty = cur.getString(cur.getColumnIndex("ReqQty"));
                materialOrder.setReqQty(ReqQty);
                ItemMasterId = cur.getString(cur.getColumnIndex("ItemMasterId"));
                materialOrder.setItemMasterId(ItemMasterId);
                MRSDetailId = cur.getString(cur.getColumnIndex("MRSDetailId"));
                materialOrder.setMRSDetailId(MRSDetailId);
                UOMDesc = cur.getString(cur.getColumnIndex("UOMDesc"));
                materialOrder.setUOMDesc(UOMDesc);
                UOMMasterId = cur.getString(cur.getColumnIndex("UOMMasterId"));
                materialOrder.setUOMMasterId(UOMMasterId);
                StockQuantity = cur.getString(cur.getColumnIndex("StockQuantity"));
                materialOrder.setStockQuantity(StockQuantity);
                HeaderRemark = cur.getString(cur.getColumnIndex("Remark"));
                materialOrder.setRemark(HeaderRemark);
                lblhdn = cur.getString(cur.getColumnIndex("lblhdn"));
                materialOrder.setlblhdn(lblhdn);
                MODetailId = cur.getString(cur.getColumnIndex("MODetailId"));
                materialOrder.setMODetailId(MODetailId);
                Supplier_id = cur.getString(cur.getColumnIndex("SupplierId"));
                materialOrder.setSupplierId(Supplier_id);
                HeaderRouteName = cur.getString(cur.getColumnIndex("RouteName"));
                materialOrder.setRouteName(HeaderRouteName);
                HeaderSegmentType = cur.getString(cur.getColumnIndex("SegmentType"));
                materialOrder.setSegmentType(HeaderSegmentType);
                HeaderRouteFrom = cur.getString(cur.getColumnIndex("RouteFrom"));
                materialOrder.setRouteFrom(HeaderRouteFrom);
                HeaderRouteTo = cur.getString(cur.getColumnIndex("RouteTo"));
                materialOrder.setRouteTo(HeaderRouteTo);
                HeaderAddress = cur.getString(cur.getColumnIndex("Address"));
                materialOrder.setAddress(HeaderAddress);
                WarehouseMasterName = cur.getString(cur.getColumnIndex("WarehouseName"));
                materialOrder.setWarehouseMasterName(WarehouseMasterName);
                LocationMasterName = cur.getString(cur.getColumnIndex("LocationMasterName"));
                materialOrder.setLocationMasterName(LocationMasterName);
                // materialOrder.setMaterialOrderArrayList(materialOrders);
                materialOrders.add(materialOrder);
                materialOrderArrayList.add(materialOrder);
            } while (cur.moveToNext());

            itemlistAdapter = new ItemlistAdapter(InventoryShow.this, materialOrders);
            list_item.setAdapter(itemlistAdapter);
        }


    }


    private boolean isnet() {
        // TODO Auto-generated method stub
        Context context = this.getApplicationContext();
        ConnectivityManager cm = (ConnectivityManager) context
                .getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo netInfo = cm.getActiveNetworkInfo();
        if (netInfo != null && netInfo.isConnectedOrConnecting()) {
            return true;
        } else {
            Toast.makeText(context, "No internet connection", Toast.LENGTH_LONG).show();
            return false;
        }
    }


    class DownloadSuppliernameJSON extends AsyncTask<String, Void, String> {
        Object res;
        String response;
        ProgressDialog progressDialog;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            //showProgressDialog();
            progressDialog = new ProgressDialog(InventoryShow.this);
            progressDialog.setMessage("Please wait data loading...");
            progressDialog.show();
        }

        @Override
        protected String doInBackground(String... params) {

            String url = CompanyURL + WebUrlClass.api_GetSuppliername;

            try {
                res = ut.OpenConnection(url);
                if (res != null) {
                    response = res.toString();
               /* response = res.toString().replaceAll("\\\\", "");
                response = response.replaceAll("\\\\\\\\/", "");
                response = response.substring(1, response.length() - 1);*/
                    ContentValues values = new ContentValues();
                    JSONArray jResults = new JSONArray(response);

                    sql.delete(db.TABLE_Suppliername, null,
                            null);
                    Cursor c = sql.rawQuery("SELECT * FROM " + db.TABLE_Suppliername, null);
                    int count = c.getCount();
                    String columnName, columnValue;

                    for (int i = 0; i < jResults.length(); i++) {
                        JSONObject jorder = jResults.getJSONObject(i);
                        for (int j = 0; j < c.getColumnCount(); j++) {
                            columnName = c.getColumnName(j);
                            columnValue = jorder.getString(columnName);
                            values.put(columnName, columnValue);


                        }

                        long a = sql.insert(db.TABLE_Suppliername, null, values);

                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPostExecute(String integer) {
            super.onPostExecute(integer);
            progressDialog.dismiss();
            // dismissProgressDialog();
            if (response.contains("")) {

            }
            getSupplier();
        }

    }

    private void getSupplier() {
        lstSuppliername.clear();
        String query = "SELECT distinct CustVendor,CustVendorName" +
                " FROM " + db.TABLE_Suppliername;
        Cursor cur = sql.rawQuery(query, null);
        //   lstReferenceType.add("Select");
        if (cur.getCount() > 0) {

            cur.moveToFirst();
            do {


                lstSuppliername.add(cur.getString(cur.getColumnIndex("CustVendorName")));

            } while (cur.moveToNext());

        }

        MySpinnerAdapter customDept = new MySpinnerAdapter(InventoryShow.this,
                R.layout.custom_spinner_txt, lstSuppliername);
        spinner_supplier_name.setAdapter(customDept);
        //   customDept.notifyDataSetChanged();
        spinner_supplier_name.setSelection(0);
    }

    class DownloadDepartmentJSON extends AsyncTask<String, Void, String> {
        Object res;
        String response;
        ProgressDialog progressDialog;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            //showProgressDialog();
            progressDialog = new ProgressDialog(InventoryShow.this);
            progressDialog.setMessage("Please wait data loading...");
            progressDialog.show();
        }

        @Override
        protected String doInBackground(String... params) {

            String url = CompanyURL + WebUrlClass.api_GetDepartCode + "?PKPlantId=" + params[0];

            try {
                res = ut.OpenConnection(url);
                if (res != null) {
                    response = res.toString();
               /* response = res.toString().replaceAll("\\\\", "");
                response = response.replaceAll("\\\\\\\\/", "");
                response = response.substring(1, response.length() - 1);*/
                    ContentValues values = new ContentValues();
                    JSONArray jResults = new JSONArray(response);

                    sql.delete(db.TABLE_Department, null,
                            null);
                    Cursor c = sql.rawQuery("SELECT * FROM " + db.TABLE_Department, null);
                    int count = c.getCount();
                    String columnName, columnValue;

                    for (int i = 0; i < jResults.length(); i++) {
                        JSONObject jorder = jResults.getJSONObject(i);
                        for (int j = 0; j < c.getColumnCount(); j++) {
                            columnName = c.getColumnName(j);
                            columnValue = jorder.getString(columnName);
                            values.put(columnName, columnValue);


                        }

                        long a = sql.insert(db.TABLE_Department, null, values);

                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPostExecute(String integer) {
            super.onPostExecute(integer);
            progressDialog.dismiss();
            // dismissProgressDialog();
            if (response.contains("")) {

            }
            getDepartment();
        }

    }


    private void getDepartment() {
        lstDepartment.clear();
        String query = "SELECT distinct PKDeptMasterId,DeptDesc" +
                " FROM " + db.TABLE_Department;
        Cursor cur = sql.rawQuery(query, null);
        //   lstReferenceType.add("Select");
        if (cur.getCount() > 0) {

            cur.moveToFirst();
            do {


                lstDepartment.add(cur.getString(cur.getColumnIndex("DeptDesc")));

            } while (cur.moveToNext());

        }

        MySpinnerAdapter customDept = new MySpinnerAdapter(InventoryShow.this,
                R.layout.custom_spinner_txt, lstDepartment);
        spinner_department.setAdapter(customDept);
        //   customDept.notifyDataSetChanged();
        spinner_department.setSelection(0);
    }

    private static class MySpinnerAdapter extends ArrayAdapter<String> {
        // Initialise custom font, for example:


        private MySpinnerAdapter(Context context, int resource,
                                 List<String> items) {
            super(context, resource, items);
        }

        // Affects default (closed) state of the spinner
        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            TextView view = (TextView) super.getView(position, convertView,
                    parent);
            //view.setTypeface(font);
            return view;
        }

        // Affects opened state of the spinner
        @Override
        public View getDropDownView(int position, View convertView,
                                    ViewGroup parent) {
            TextView view = (TextView) super.getDropDownView(position,
                    convertView, parent);
            //  view.setTypeface(font);
            return view;
        }

    }

    private class GetMrsNOJson extends AsyncTask<String, String, String> {
        Object res;
        String response;
        ProgressDialog progressDialog;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            progressDialog = new ProgressDialog(InventoryShow.this);
            progressDialog.setMessage("Please wait data loading...");
            progressDialog.show();
        }

        @Override
        protected String doInBackground(String... params) {
            String url = CompanyURL + WebUrlClass.api_GetMrsNo;
            try {
                res = ut.OpenConnection(url);
                if (res != null) {
                    response = res.toString().replaceAll(" ", "");
                    //response = res.toString();
                    response = response.substring(1, response.length() - 1);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return response;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            progressDialog.dismiss();
            System.out.println("Output :" + s);


            txt_mrn_no.setText(s);


        }
    }

    class DownloadWorkorderData extends AsyncTask<String, Void, String> {
        Object res;
        String response;
        ProgressDialog progressDialog;


        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            progressDialog = new ProgressDialog(InventoryShow.this);
            progressDialog.setMessage("Please wait data loading...");
            progressDialog.show();
        }

        @Override
        protected String doInBackground(String... params) {
            try {
                String url = CompanyURL + WebUrlClass.api_GetWorkOrder + "?Supplierid=" + params[0];
                res = ut.OpenConnection(url);
                if (res != null) {
                    //response = res.toString().replaceAll("\\\\", "");
                    response = res.toString();
                    // response = response.replaceAll("\\\\\\\\/", "");
                    //response = response.substring(1, response.length() - 1);
                }
            } catch (Exception e) {
                e.printStackTrace();
                response = "error";
            }
            return response;
        }

        @Override
        protected void onPostExecute(String integer) {
            super.onPostExecute(integer);
            progressDialog.dismiss();

            try {
                JSONArray jResults = null;
                jResults = new JSONArray(response);
                ContentValues values = new ContentValues();

                sql.delete(db.TABLE_WORK_ORDER, null,
                        null);
                Cursor c = sql.rawQuery("SELECT * FROM " + db.TABLE_WORK_ORDER, null);
                int count = c.getCount();
                String columnName, columnValue;
                for (int i = 0; i < jResults.length(); i++) {
                    JSONObject jorder = jResults.getJSONObject(i);
                    for (int j = 0; j < c.getColumnCount(); j++) {

                        columnName = c.getColumnName(j);
                        columnValue = jorder.getString(columnName);
                        values.put(columnName, columnValue);

                    }

                    long a = sql.insert(db.TABLE_WORK_ORDER, null, values);
                    Log.e("log data", "" + a);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }


        }

    }

    class DownloadWarehouseJSON extends AsyncTask<String, Void, String> {
        Object res;
        String response;
        ProgressDialog progressDialog;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            //showProgressDialog();
            progressDialog = new ProgressDialog(InventoryShow.this);
            progressDialog.setMessage("Please wait data loading...");
            progressDialog.show();
        }

        @Override
        protected String doInBackground(String... params) {

            String url = CompanyURL + WebUrlClass.api_GetWarehouse;

            try {
                res = ut.OpenConnection(url);
                if (res != null) {
                    response = res.toString();
               /* response = res.toString().replaceAll("\\\\", "");
                response = response.replaceAll("\\\\\\\\/", "");
                response = response.substring(1, response.length() - 1);*/
                    ContentValues values = new ContentValues();
                    JSONArray jResults = new JSONArray(response);

                    sql.delete(db.TABLE_WAREHOUSE, null,
                            null);
                    Cursor c = sql.rawQuery("SELECT * FROM " + db.TABLE_WAREHOUSE, null);
                    int count = c.getCount();
                    String columnName, columnValue;

                    for (int i = 0; i < jResults.length(); i++) {
                        JSONObject jorder = jResults.getJSONObject(i);
                        for (int j = 0; j < c.getColumnCount(); j++) {
                            columnName = c.getColumnName(j);
                            columnValue = jorder.getString(columnName);
                            values.put(columnName, columnValue);


                        }

                        long a = sql.insert(db.TABLE_WAREHOUSE, null, values);

                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPostExecute(String integer) {
            super.onPostExecute(integer);
            progressDialog.dismiss();
            // dismissProgressDialog();
            if (response.contains("")) {

            }
            //  getWarehouse();
        }

    }

    class MaterialPOSTSaveMRSNoteJSON extends AsyncTask<String, Void, String> {
        Object res;
        String response;

        ProgressDialog progressDialog;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            progressDialog = new ProgressDialog(InventoryShow.this);
            progressDialog.setMessage("Please wait data sending...");
            progressDialog.show();
        }

        @Override
        protected String doInBackground(String... params) {
            String url = CompanyURL + WebUrlClass.api_POSTSaveMRSNote;
            try {
                res = ut.OpenPostConnection(url, params[0], InventoryShow.this);
                if (res != null) {
                    response = res.toString();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return response;
        }

        @Override
        protected void onPostExecute(String integer) {
            super.onPostExecute(integer);
            progressDialog.dismiss();

            Toast.makeText(InventoryShow.this, " Data added successfully", Toast.LENGTH_LONG).show();
            db.deleteallMaterialitem();

        }

    }

    public void showPopup(View v, ArrayList<MaterialOrder> materialOrderArrayList, int action_position) {

     /*   PopupMenu popup = new PopupMenu(context, v);
        MenuInflater inflater = popup.getMenuInflater();
        inflater.inflate(R.menu.inventory_action_menu, popup.getMenu());
        MenuItem item = (MenuItem) popup.getMenu();*/


        String ItemCode = materialOrderArrayList.get(action_position).getItemCode();
        String ItemDesc = materialOrderArrayList.get(action_position).getItemDesc();
        String ItemMasterId = materialOrderArrayList.get(action_position).getItemMasterId();
        action_Pos = action_position;

        PopupMenu popup = new PopupMenu(InventoryShow.this, v);
        popup.setOnMenuItemClickListener(InventoryShow.this);
        popup.inflate(R.menu.inventory_action_menu);


        popup.show();
    }

    @Override
    public boolean onMenuItemClick(MenuItem item) {

        switch (item.getItemId()) {
            case R.id.delete:
                MaterialOrder itemMasterId = materialOrders.get(action_Pos);
                inventory_commonFunction = new Inventory_CommonFunction(context);
                inventory_commonFunction.deleteItemLocal(itemMasterId);
                materialOrders.remove(action_Pos);
                String query = "SELECT * FROM " + db.TABLE_AddMaterialPoOrder;
                Cursor cur = sql.rawQuery(query, null);
                int count = cur.getCount();
                itemlistAdapter.updateList(materialOrders, action_Pos);


                return true;

            case R.id.edit:
                MaterialOrder itemMasterId1 = materialOrderArrayList.get(action_Pos);
                String datasheetObjStr = new Gson().toJson(materialOrderArrayList.get(action_Pos));
                String datasheetList = new Gson().toJson(new MaterialOrder(materialOrderArrayList));
                startActivity(new Intent(InventoryShow.this, ActivityMaterialOrder.class).
                        putExtra("editMaterialOrderList", datasheetList).putExtra("Mode", "E").
                        putExtra("position", action_Pos));
            default:
                return false;
        }
    }


}
