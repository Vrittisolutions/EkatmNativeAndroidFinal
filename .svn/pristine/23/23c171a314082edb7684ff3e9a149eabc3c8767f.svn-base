package com.vritti.sales.activity;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Build;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.vritti.databaselib.data.DatabaseHandlers;
import com.vritti.databaselib.other.Utility;
import com.vritti.databaselib.other.WebUrlClass;
import com.vritti.ekatm.R;
import com.vritti.sales.adapters.OpenOrderListAdapter;
import com.vritti.sales.beans.OrderHistoryBean;
import com.vritti.sales.beans.Tbuds_commonFunctions;
import com.vritti.sales.data.AnyMartData;
import com.vritti.sales.utils_tbuds.NetworkUtils;
import com.vritti.sales.utils_tbuds.StartSession_tbuds;
import com.vritti.sessionlib.CallbackInterface;

import org.json.JSONArray;
import org.json.JSONException;

import java.io.BufferedReader;
import java.net.URLConnection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.Set;
import java.util.TreeSet;

public class ShipmentAndInvoicing extends AppCompatActivity {

    private static Context parent;

    Toolbar toolbar;
    static ProgressBar mprogress;
    static ListView listview_recent_ordered_list;
    static TextView pending_ordrcnt, txt_showmore;
    static ImageView imgrefresh;

    public static ArrayList<OrderHistoryBean> historyBeanList;
    static ArrayList<OrderHistoryBean> newList = null;

    static OpenOrderListAdapter myOrderHistoryAdapter;

    SharedPreferences sharedpreferences;
    public String restoredText, restoredusername, restoredownername, usertype, domainname;
    String CustVendorMasterId, CustomerID;

    static Tbuds_commonFunctions tcf;
    Utility ut;
    private static DatabaseHandlers db;
    static SQLiteDatabase sql_db;
    String PlantMasterId = "", LoginId = "", Password = "", CompanyURL = "", EnvMasterId = "",
            UserMasterId = "", UserName = "", MobileNo = "", Sourcetype = "", intentFrom = "", OrderType = "";

    private static String json;
    private static int index = 0;
    private static String DateToStr;
    private static int newlistCount = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.tbuds_activity_shipment_and_invoicing);

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        toolbar.setTitle("Shipment & Invoicing");

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {

            //  activity.getWindow().setStatusBarColor(darkenColor(ContextCompat.getColor(activity, color)));
            this.getWindow().setStatusBarColor(Color.parseColor("#ff4112"));
        }

        init();

       // int c = tcf.getShipmentCount();

        new StartSession_tbuds(parent, new CallbackInterface() {

            @Override
            public void callMethod() {

                new GetPendingOrderHistoryList().execute();
            }

            @Override
            public void callfailMethod(String s) {

            }
        });

        setListeners();
    }

    public void init(){
        parent = ShipmentAndInvoicing.this;

        toolbar = (Toolbar) findViewById(R.id.toolbar1);
        // toolbar.setLogo(R.mipmap.ic_toolbar_logo_vwb);  //attach sales logo
        toolbar.setTitle("Shipment & Invoicing");
        toolbar.setTitleTextColor(Color.WHITE);
        setSupportActionBar(toolbar);

        mprogress = (ProgressBar) findViewById(R.id.toolbar_progress_Assgnwork);
        imgrefresh = (ImageView)findViewById(R.id.imgrefresh);

        txt_showmore = (TextView)findViewById(R.id.txt_showmore);
        pending_ordrcnt = (TextView) findViewById(R.id.pending_ordrcnt);
        pending_ordrcnt.setText(String.valueOf(index));
        listview_recent_ordered_list = (ListView) findViewById(R.id.listview_recent_ordered_list);

        sharedpreferences = getSharedPreferences(WebUrlClass.MyPREFERENCES, Context.MODE_PRIVATE);

        restoredText = sharedpreferences.getString("Mobileno", null);
        //restoredownername = sharedpreferences.getString("OwnerName", null);
        restoredusername = sharedpreferences.getString("username", null);
        usertype = sharedpreferences.getString("usertype", null);
        domainname = sharedpreferences.getString("companyURL_LOGO",null);
        restoredownername = sharedpreferences.getString("companyURL_LOGO",null);
        AnyMartData.MAIN_URL = sharedpreferences.getString("CompanyURL",null);
        CustVendorMasterId = sharedpreferences.getString("CustVendorMasterId",null);
        CustomerID = sharedpreferences.getString("CustVendorMasterId",null);

        ut = new Utility();
        tcf = new Tbuds_commonFunctions(ShipmentAndInvoicing.this);
        String settingKey = ut.getSharedPreference_SettingKey(parent);
        String dabasename = ut.getValue(parent, WebUrlClass.GET_DATABASE_NAME_KEY, settingKey);
        db = new DatabaseHandlers(parent, dabasename);
        sql_db = db.getWritableDatabase();
        CompanyURL = ut.getValue(parent, WebUrlClass.GET_COMPANY_URL_KEY, settingKey);
        EnvMasterId = ut.getValue(parent, WebUrlClass.GET_EnvMasterID_KEY, settingKey);
        PlantMasterId = ut.getValue(parent, WebUrlClass.GET_PlantID_KEY, settingKey);
        LoginId = ut.getValue(parent, WebUrlClass.GET_LOGIN_KEY, settingKey);
        Password =ut.getValue(parent, WebUrlClass.GET_PSW_KEY, settingKey);
        UserMasterId = ut.getValue(parent, WebUrlClass.GET_USERMASTERID_KEY, settingKey);
        UserName = ut.getValue(parent, WebUrlClass.GET_USERNAME_KEY, settingKey);
        MobileNo = ut.getValue(parent, WebUrlClass.GET_MOBILE_KEY, settingKey);

        AnyMartData.MODULE = "ORDERBILLING";
        AnyMartData.MOBILE = MobileNo/*"7057411246"*/;  //logged in's mobile number.
        usertype = "C";

        sharedpreferences = getSharedPreferences(WebUrlClass.MyPREFERENCES, MODE_PRIVATE);
        CompanyURL = ut.getValue(parent, WebUrlClass.GET_COMPANY_URL_KEY, settingKey);
        AnyMartData.MAIN_URL = CompanyURL + "/api/OrderBillingAPI/";

        historyBeanList = new ArrayList<OrderHistoryBean>();

    }

    public void setListeners(){

        imgrefresh.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                new StartSession_tbuds(parent, new CallbackInterface() {

                    @Override
                    public void callMethod() {

                        new GetPendingOrderHistoryList().execute();
                    }

                    @Override
                    public void callfailMethod(String s) {

                    }
                });
            }
        });

        listview_recent_ordered_list.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> p, View view, final int position, long id) {

                String SOHeaderID = newList.get(position).getSOHeaderId();
                String status = newList.get(position).getStatus();
                String Consignee = newList.get(position).getConsigneeName();
                String ConsigneeID = newList.get(position).getCustomerMasterId();
                String TotalAmt = String.valueOf(newList.get(position).getNetAmt());
                String sono = newList.get(position).getSONo();
                String address = newList.get(position).getAddress();
                String ShipToMasterId = newList.get(position).getShipToMasterId();
                String deliveryAddress = newList.get(position).getAddress();
                String deliveryDate = newList.get(position).getSODate();
                String prfDelFrmTime = String.valueOf(newList.get(position).getPrefDelFrmTime());
                String prfDelToTime = String.valueOf(newList.get(position).getPrefDelToTime());

                Intent intent_go = new Intent(parent, ShipmentEntryActivity.class);
                intent_go.putExtra("SOHeaderID", SOHeaderID);
                intent_go.putExtra("TotalAmt",TotalAmt);
                intent_go.putExtra("SONO",sono);
                intent_go.putExtra("Consignee",Consignee);
                intent_go.putExtra("OrdType",AnyMartData.Order_Type);
                intent_go.putExtra("ShipToMasterId",ShipToMasterId);
                intent_go.putExtra("DeliveryAddress",deliveryAddress);
                intent_go.putExtra("DeliveryDate",deliveryDate);
                intent_go.putExtra("ConsigneeID",ConsigneeID);
                intent_go.putExtra("prfDelFrmTime",prfDelFrmTime);
                intent_go.putExtra("prfDelToTime",prfDelToTime);

                startActivity(intent_go);
                finish();
            }
        });
    }

    public static class GetPendingOrderHistoryList extends AsyncTask<Void, Void, Void> {
        ProgressDialog progressDialog;
        String responseString = "";
        String resp_orderHistory = "";
        String res = "";

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            imgrefresh.setVisibility(View.GONE);
            mprogress.setVisibility(View.VISIBLE);
        }

        @Override
        protected Void doInBackground(Void... params) {

            String url_orderHistory = AnyMartData.MAIN_URL + AnyMartData.METHOD_PENDING_ORDERS_SHIPMENTS +
                    "?mobileno=" + AnyMartData.MOBILE +
                    "&handler=" + AnyMartData.HANDLE +
                    "&sessionid=" + AnyMartData.SESSION_ID +
                    "&index=" + index;

            URLConnection urlConnection = null;
            BufferedReader bufferedReader = null;

            try {
                res = Utility.OpenconnectionOrferbilling(url_orderHistory, parent);
                int a = res.getBytes().length;
                res = res.replaceAll("\\\\", "");
                responseString = res.toString().replaceAll("^\"|\"$", "");
                Log.e("Response", responseString);

                resp_orderHistory = responseString.replaceAll("\\\\", "");
                System.out.println("rsep = " + resp_orderHistory);


            } catch (NullPointerException e) {
                resp_orderHistory = "empty";
                e.printStackTrace();
            } catch (Exception e) {
                resp_orderHistory = "error";
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPostExecute(Void result) {
            super.onPostExecute(result);

            if (resp_orderHistory.equalsIgnoreCase("Session Expired")) {
                if (NetworkUtils.isNetworkAvailable(parent)) {

                    new StartSession_tbuds(parent, new CallbackInterface() {
                        @Override
                        public void callMethod() {
                            new GetPendingOrderHistoryList().execute();
                        }

                        @Override
                        public void callfailMethod(String s) {

                        }
                    });
                }
            } else if (resp_orderHistory.equalsIgnoreCase("empty")) {
                imgrefresh.setVisibility(View.VISIBLE);
                mprogress.setVisibility(View.GONE);

                Toast.makeText(parent, "No Order Yet..! Please Place Some Order..", Toast.LENGTH_LONG)
                        .show();
            } else if (resp_orderHistory.equalsIgnoreCase("error")) {

                Toast.makeText(parent, "The server is taking too long to respond OR " +
                        "something is wrong with your iternet connection. Please try again later.", Toast.LENGTH_LONG)
                        .show();
            } else {
                imgrefresh.setVisibility(View.VISIBLE);
                mprogress.setVisibility(View.GONE);

                json = resp_orderHistory;
                parseJson_pendingorder(json);
            }
        }
    }

    protected static void parseJson_pendingorder(String json) {
        tcf.clearTable(parent, db.TABLE_MY_ORDER_HISTORY);

        historyBeanList.clear();

        sql_db = db.getWritableDatabase();

        String Address = null, City = null, ConsigneeName = null, CustomerMasterId = null, ItemMasterId = null,
                Mobile = null, Qty = null, Rate = null, SODate = null, SOHeaderId = null, DODisptch = null,
                DORcvd = null, DoAck = null, status = null, sono = null, NetAmt = null, LineAmt = null, ItemDesc = null,
                merchantid = null, merchantname = null, SODetailId = null, statusname = null, ShipToMasterId = null,
                prefDelFromTime = null, prefDelToTime = null;

        try {
            JSONArray jsonArray = new JSONArray(json);

            for (int i = 0; i < jsonArray.length(); i++) {

                OrderHistoryBean historybean = new OrderHistoryBean();
                String a = jsonArray.getJSONObject(i).getString("status");
                String placeOrderDate = jsonArray.getJSONObject(i).getString("DoAck");

                if(!placeOrderDate.equalsIgnoreCase("")){
                    SimpleDateFormat Format = new SimpleDateFormat("MMM dd yyyy");//Feb 23 2016 12:16PM
                    //SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
                    SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
                    SimpleDateFormat toFormat = new SimpleDateFormat("MM/dd/yyyy");
                    Date d1 = format.parse(placeOrderDate);
                    DateToStr = Format.format(d1);
                    System.out.println(DateToStr);
                }else {
                    DateToStr = "";
                }

                Address = jsonArray.getJSONObject(i).getString("Address");
                City = jsonArray.getJSONObject(i).getString("City");
                ConsigneeName = jsonArray.getJSONObject(i).getString("ConsigneeName");
                CustomerMasterId = jsonArray.getJSONObject(i).getString("CustomerMasterId");
                ItemMasterId = jsonArray.getJSONObject(i).getString("ItemMasterId");
                Mobile = jsonArray.getJSONObject(i).getString("Mobile");
                Qty = jsonArray.getJSONObject(i).getString("Qty");
                Rate = jsonArray.getJSONObject(i).getString("Rate");
                SODate = jsonArray.getJSONObject(i).getString("SODate");
                SOHeaderId = jsonArray.getJSONObject(i).getString("SOHeaderId");
                DODisptch = jsonArray.getJSONObject(i).getString("DODisptch");
                DORcvd = jsonArray.getJSONObject(i).getString("DORcvd");
                status = jsonArray.getJSONObject(i).getString("status");
                DoAck = jsonArray.getJSONObject(i).getString("DoAck");
                NetAmt = jsonArray.getJSONObject(i).getString("NetAmt");
                ItemDesc = jsonArray.getJSONObject(i).getString("ItemDesc");
                LineAmt = jsonArray.getJSONObject(i).getString("LineAmt");
                merchantid = jsonArray.getJSONObject(i).getString("merchantid");
                merchantname = jsonArray.getJSONObject(i).getString("merchantname");
                SODetailId = jsonArray.getJSONObject(i).getString("SODetailId");
                sono = jsonArray.getJSONObject(i).getString("sono");
                statusname = jsonArray.getJSONObject(i).getString("statusname");
                ShipToMasterId = jsonArray.getJSONObject(i).getString("ShipToMasterId");
                prefDelFromTime = jsonArray.getJSONObject(i).getString("PrefDelFrmTime");
                prefDelToTime = jsonArray.getJSONObject(i).getString("PrefDelToTime");

                historybean.setSOHeaderId(SOHeaderId);
                historybean.setConsigneeName(ConsigneeName);
                historybean.setSODate(SODate);
                historybean.setNetAmt(Float.parseFloat(NetAmt));
                historybean.setDoAck(DoAck);
                //historybean.setDoAck(DateToStr);
                historybean.setStatus(status);
                historybean.setStatusname(statusname);
                historybean.setSONo(sono);
                historybean.setAddress(Address);
                historybean.setShipToMasterId(ShipToMasterId);
                historybean.setPrefDelFrmTime(prefDelFromTime);
                historybean.setPrefDelToTime(prefDelToTime);

                //for Vendor purpose for pending shipments
                if(status.equalsIgnoreCase("10")){

                }else {
                    historyBeanList.add(historybean);
                }
            }

            int i = historyBeanList.size();
            Log.e("", "" + i);

            System.out.println(historyBeanList);
            Set<OrderHistoryBean> set = new TreeSet<OrderHistoryBean>(new Comparator<OrderHistoryBean>() {
                @Override
                public int compare(OrderHistoryBean o1, OrderHistoryBean o2) {
                    String a = o1.getSOHeaderId();
                    String b = o2.getSOHeaderId();
                    Log.e("", "" + a + " " + b);
                    if (o1.getSOHeaderId().equalsIgnoreCase(o2.getSOHeaderId())) {
                        return 0;
                    }
                    return 1;
                }
            });
            set.addAll(historyBeanList);
            System.out.println(historyBeanList);

            newList = new ArrayList<OrderHistoryBean>(set);

            System.out.println(newList);

            //historyBeanList = new ArrayList<OrderHistoryBean>(set);
            System.out.println(historyBeanList);
            int i2 = historyBeanList.size();
            Log.e("", "" + i2);

            myOrderHistoryAdapter = new OpenOrderListAdapter(parent, newList);
            listview_recent_ordered_list.setAdapter(myOrderHistoryAdapter);

            if(!(newlistCount==0)){
                int cntdisp = newList.size() - newlistCount;
                //listview_recent_ordered_list.setSelection((newList.size())-(newList.size()-newlistCount));
                listview_recent_ordered_list.setSelection(newList.size() - cntdisp);
            }

            newlistCount = newList.size();

            //listview_recent_ordered_list.smoothScrollToPosition(listview_recent_ordered_list.getCount());
            pending_ordrcnt.setText(String.valueOf(listview_recent_ordered_list.getCount()));
            //   pending_ordrcnt.setText(String.valueOf(newList.size()));

        } catch (JSONException e) {
            e.printStackTrace();
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        finish();
    }
}
