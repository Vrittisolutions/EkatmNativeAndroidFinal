package com.vritti.crm.vcrm7;

import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.view.View;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.vritti.crm.adapter.CallLogDetailsAdapter;
import com.vritti.crm.adapter.DatasheetFormListAdapter;
import com.vritti.crm.bean.DatasheetFormList;
import com.vritti.crm.classes.CommonFunctionCrm;
import com.vritti.databaselib.data.DatabaseHandlers;
import com.vritti.databaselib.other.Utility;
import com.vritti.databaselib.other.WebUrlClass;
import com.vritti.ekatm.R;
import com.vritti.sessionlib.CallbackInterface;
import com.vritti.sessionlib.StartSession;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.UUID;

public class DisplayDatasheetFormsActivity extends AppCompatActivity {


    String PlantMasterId = "", LoginId = "", Password = "", CompanyURL = "", EnvMasterId = "",
            UserMasterId = "", UserName = "", MobileNo = "";
    Utility ut;
    DatabaseHandlers db;
    CommonFunctionCrm cf;


    public static Context context;
    SQLiteDatabase sql;
    ArrayList<DatasheetFormList> datasheetFormListArrayList;
    RecyclerView list_forms;
    DatasheetFormListAdapter datasheetFormListAdapter;
    int pos;
    String prospectName = "", prospectId;
    ProgressBar progress_bar;
    String cssFormDesc = "", cssFormCode = "", cssFormId = "",finalJson="";

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.crm_display_datasheet_forms);
        context = DisplayDatasheetFormsActivity.this;

        ut = new Utility();
        cf = new CommonFunctionCrm(context);
        String settingKey = ut.getSharedPreference_SettingKey(context);
        String dabasename = ut.getValue(context, WebUrlClass.GET_DATABASE_NAME_KEY, settingKey);
        db = new DatabaseHandlers(context, dabasename);
        CompanyURL = ut.getValue(context, WebUrlClass.GET_COMPANY_URL_KEY, settingKey);
        EnvMasterId = ut.getValue(context, WebUrlClass.GET_EnvMasterID_KEY, settingKey);
        PlantMasterId = ut.getValue(context, WebUrlClass.GET_PlantID_KEY, settingKey);
        LoginId = ut.getValue(context, WebUrlClass.GET_LOGIN_KEY, settingKey);
        Password = ut.getValue(context, WebUrlClass.GET_PSW_KEY, settingKey);
        UserMasterId = ut.getValue(context, WebUrlClass.GET_USERMASTERID_KEY, settingKey);
        UserName = ut.getValue(context, WebUrlClass.GET_USERNAME_KEY, settingKey);
        sql = db.getWritableDatabase();


        initView();
        if (getIntent() != null) {
            prospectName = getIntent().getStringExtra("ProspectName");
            prospectId = getIntent().getStringExtra("ProspectId");

            if (ut.isNet(context)) {
                progress_bar.setVisibility(View.VISIBLE);
                new StartSession(DisplayDatasheetFormsActivity.this, new CallbackInterface() {
                    @Override
                    public void callMethod() {
                        new DownloadDatasheetFormsList().execute(prospectName);
                    }

                    @Override
                    public void callfailMethod(String msg) {
                        progress_bar.setVisibility(View.GONE);
                        Toast.makeText(DisplayDatasheetFormsActivity.this, "No Internet Connection", Toast.LENGTH_SHORT).show();
                    }
                });
            } else {
                progress_bar.setVisibility(View.GONE);
                Toast.makeText(DisplayDatasheetFormsActivity.this, "No Internet Connection", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void initView() {
        Toolbar toolbar_action = (Toolbar) findViewById(R.id.toolbar);
        toolbar_action.setLogo(R.mipmap.ic_toolbar_logo_crm);
        toolbar_action.setTitle(R.string.app_name_toolbar_CRM);
        setSupportActionBar(toolbar_action);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        list_forms = findViewById(R.id.list_forms);
        progress_bar = findViewById(R.id.progress_bar);
        datasheetFormListArrayList = new ArrayList<>();
    }

    public void rowClick(int position, ArrayList<DatasheetFormList> datasheetFormListArrayList) {
        progress_bar.setVisibility(View.VISIBLE);
        pos = position;

        cssFormDesc = datasheetFormListArrayList.get(pos).getCSSFormsDesc();
        cssFormCode = datasheetFormListArrayList.get(pos).getCSSFormsDesc();
        cssFormId = datasheetFormListArrayList.get(pos).getPKCssFormsId();

        /*Intent intent = new Intent(DisplayDatasheetFormsActivity.this, CommonDatasheetMainActivity.class);
        intent.putExtra("PropectId", prospectId);
        intent.putExtra("CssFormId", cssFormId);
        intent.putExtra("Sourcetype", "Prospect");
        intent.putExtra("FormDesc", cssFormDesc);
        startActivity(intent);*/



        JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("PKCssHeaderId", "");
            jsonObject.put("FKCustomerId", "");
            jsonObject.put("FKCssFormsId", cssFormId);
            // jsonObject.put("FKCssFormsId", "52ccea06-d0fb-4422-b908-200fd830a35a");
            jsonObject.put("FKFeedbackById", "");
            jsonObject.put("FeedBackDate", "");
            jsonObject.put("FeedBackCallId", "");
            jsonObject.put("Notes", "");
            jsonObject.put("IsRequestToCustomer", "");
            jsonObject.put("IsRequestSentTo", "");
            jsonObject.put("MailFormatId", "");
            jsonObject.put("FKDatasheetSchId", "");
            jsonObject.put("FreqDescriptor", "");
            jsonObject.put("FKActivityId", "");
            jsonObject.put("Status", "");
            jsonObject.put("ScheduleDate", "");
            jsonObject.put("AllowDatasheetEntryOn", "");
            jsonObject.put("SaveActivityAction", "");
            jsonObject.put("SourceType", "Prospect");
            jsonObject.put("SourceId", prospectId);
            //  jsonObject.put("SourceId", "b7b5ace7-4bb8-4fdd-ae7e-b005c2");
        } catch (JSONException e) {
            e.printStackTrace();
        }
        finalJson = jsonObject.toString();


        if (ut.isNet(DisplayDatasheetFormsActivity.this)) {
            new StartSession(DisplayDatasheetFormsActivity.this, new CallbackInterface() {
                @Override
                public void callMethod() {
                    new CheckPOSTCSSDetails().execute(finalJson);
                }

                @Override
                public void callfailMethod(String msg) {

                }
            });
        }

        progress_bar.setVisibility(View.GONE);


    }

    private class DownloadDatasheetFormsList extends AsyncTask<String, Void, String> {

        Object res;
        String response = "";
        String prosName = "";

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            progress_bar.setVisibility(View.VISIBLE);
        }

        @Override
        protected String doInBackground(String... params) {
            prosName = params[0];
            String url = CompanyURL + WebUrlClass.api_get_formsData + "?UseFor=" + prosName;
            res = ut.OpenConnection(url);
            try {


                if (res != null) {
                    response = res.toString();
                } else {
                    response = "error";
                }
            } catch (Exception e) {
                e.printStackTrace();
                response = "error";
            }

            return response;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            if (!(response.equals("error") || response.equals("[]"))) {
                JSONArray jsonArray = null;
                try {
                    jsonArray = new JSONArray(response);
//[{"PKCssFormsId":"ab3d4935-9630-4e5d-a409-d03f7a20dc4e","CSSFormsCode":"Q1","CSSFormsDesc":"Declaration","AllowDatasheetEntryOn":"PM","ItemLevelApproval":"Y","Attachment":"Y"}]
                    for (int i = 0; i < jsonArray.length(); i++) {
                        DatasheetFormList datasheetFormList = new DatasheetFormList();
                        JSONObject jsonObject = jsonArray.getJSONObject(i);
                        datasheetFormList.setPKCssFormsId(jsonObject.getString("PKCssFormsId"));
                        datasheetFormList.setCSSFormsDesc(jsonObject.getString("CSSFormsCode"));
                        datasheetFormList.setCSSFormsDesc(jsonObject.getString("CSSFormsDesc"));
                        datasheetFormList.setAllowDatasheetEntryOn(jsonObject.getString("AllowDatasheetEntryOn"));
                        datasheetFormList.setItemLevelApproval(jsonObject.getString("ItemLevelApproval"));
                        datasheetFormList.setAttachment(jsonObject.getString("Attachment"));
                        datasheetFormListArrayList.add(datasheetFormList);
                    }
                    datasheetFormListAdapter = new DatasheetFormListAdapter(DisplayDatasheetFormsActivity.this, datasheetFormListArrayList);
                    RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(DisplayDatasheetFormsActivity.this);
                    list_forms.setLayoutManager(mLayoutManager);
                    list_forms.setItemAnimator(new DefaultItemAnimator());
                    list_forms.setAdapter(datasheetFormListAdapter);
                } catch (JSONException e) {
                    e.printStackTrace();

                }

                progress_bar.setVisibility(View.GONE);


            } else {
                progress_bar.setVisibility(View.GONE);
                Toast.makeText(DisplayDatasheetFormsActivity.this, "No data present", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private class CheckPOSTCSSDetails extends AsyncTask<String, Void, String> {

        Object res;
        String response = "";
        //ProgressBar progressBar;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            progress_bar.setVisibility(View.VISIBLE);

        }

        @Override
        protected String doInBackground(String... params) {
            String finaljson = params[0];
            // String url = CompanyURL + WebUrlClass.api_Datasheet_CheckPOSTCSSDetails;
            String url = CompanyURL + WebUrlClass.api_Datasheet_CheckPOSTCSSData;
            res = ut.OpenPostConnection(url, finaljson, DisplayDatasheetFormsActivity.this);
            try {

                if (res != null) {
                    response = res.toString();
                   /* response = res.toString().replaceAll("\\\\", "");
                    response = response.replaceAll("\\\\\\\\/", "");
                    response = response.substring(1, response.length() - 1);*/
                } else {
                    response = "error";
                }

            } catch (Exception e) {
                e.printStackTrace();
                response = "error";
            }
            return response;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            progress_bar.setVisibility(View.GONE);

            if (response.equals("[]")) {
                String guid = UUID.randomUUID().toString();

            } else {

                try {
                    JSONObject jsonObject = new JSONObject(response);
                    JSONArray cssdetails = jsonObject.getJSONArray("CSSDetails");

                    ContentValues values = new ContentValues();
                    sql.delete(db.TABLE_DATASHEET_DATA_NEW, null,
                            null);
                    Cursor c = sql.rawQuery("SELECT * FROM " + db.TABLE_DATASHEET_DATA_NEW, null);
                    int count = c.getCount();
                    String columnName, columnValue;

                    for (int i = 0; i < cssdetails.length(); i++) {
                        JSONObject jorder = cssdetails.getJSONObject(i);
                        String headerId = jorder.getString("PKCssHeaderId");
                        for (int j = 0; j < c.getColumnCount(); j++) {
                            columnName = c.getColumnName(j);

                            /*  if (columnName.equalsIgnoreCase("SourceId")) {
                                columnValue = prospectId;
                            } else */
                            if (columnName.equalsIgnoreCase("FKCssFormsId")) {
                                columnValue = cssFormId;
                            } else if (columnName.equalsIgnoreCase("FKCustomerId")) {
                                columnValue = "";
                            } else {
                                columnValue = jorder.getString(columnName);
                            }
                            values.put(columnName, columnValue);
                        }
                        long a = sql.insert(db.TABLE_DATASHEET_DATA_NEW, null, values);
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }

                Intent intent = new Intent(DisplayDatasheetFormsActivity.this, EditDatasheetActivityMainNew.class);
                intent.putExtra("PropectId", prospectId);
                intent.putExtra("CssFormId", cssFormId);
                intent.putExtra("Sourcetype", "Prospect");
                intent.putExtra("FormDesc", cssFormDesc);
                startActivity(intent);




            }
        }
    }
}
