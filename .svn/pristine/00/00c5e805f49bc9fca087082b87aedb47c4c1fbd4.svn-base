package com.vritti.vwb.vworkbench;

import android.content.Context;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.vritti.databaselib.data.DatabaseHandlers;
import com.vritti.databaselib.other.Utility;
import com.vritti.databaselib.other.WebUrlClass;
import com.vritti.ekatm.R;
import com.vritti.sessionlib.CallbackInterface;
import com.vritti.sessionlib.StartSession;
import com.vritti.vwb.Adapter.SendBackForwardAdapter;
import com.vritti.vwb.Beans.SendBackForwardBean;
import com.vritti.vwb.classes.CommonFunction;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;

public class SendBackDocuments extends AppCompatActivity {

    RecyclerView list_SchoolName;
    ArrayList<SendBackForwardBean> sendBackForwardBeanArrayList = new ArrayList<>();
    String responseArrayList = "";
    String methodName = "";
    Context context;
    String PlantMasterId = "", LoginId = "", Password = "", CompanyURL = "", EnvMasterId = "",
            UserMasterId = "", UserName = "", MobileNo = "",Designation="";
    Utility ut;
    CommonFunction cf;
    DatabaseHandlers db;
    SQLiteDatabase sql;
    SendBackForwardBean sendBackForwardBean;
    RecyclerView list_sendBack;
    TextView txt_heading;


    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_sendback);
        Toolbar toolbar_action = (Toolbar) findViewById(R.id.toolbar);
        // toolbar_action.setLogo(R.mipmap.ic_toolbar_logo_crm);
        toolbar_action.setLogo(R.mipmap.ic_toolbar_logo_vwb);
        toolbar_action.setTitle(R.string.app_name_toolbar_Vwb);
        setSupportActionBar(toolbar_action);


        context = getApplicationContext();
        ut = new Utility();
        cf = new CommonFunction(context);
        String settingKey = ut.getSharedPreference_SettingKey(context);
        String dabasename = ut.getValue(context, WebUrlClass.GET_DATABASE_NAME_KEY, settingKey);
        db = new DatabaseHandlers(context, dabasename);
        CompanyURL = ut.getValue(context, WebUrlClass.GET_COMPANY_URL_KEY, settingKey);
        EnvMasterId = ut.getValue(context, WebUrlClass.GET_EnvMasterID_KEY, settingKey);
        PlantMasterId = ut.getValue(context, WebUrlClass.GET_PlantID_KEY, settingKey);
        LoginId = ut.getValue(context, WebUrlClass.GET_LOGIN_KEY, settingKey);
        Password = ut.getValue(context, WebUrlClass.GET_PSW_KEY, settingKey);
        UserMasterId = ut.getValue(context, WebUrlClass.GET_USERMASTERID_KEY, settingKey);
        UserName = ut.getValue(context, WebUrlClass.GET_USERNAME_KEY, settingKey);
        Designation = ut.getValue(context, WebUrlClass.GET_Designation, settingKey);

        sql = db.getWritableDatabase();

        if (getIntent() != null) {
            methodName = getIntent().getStringExtra("methodName");

            getSendBackForwardActivities(methodName);
        }


        initView();

    }

    private void initView() {
        list_sendBack = findViewById(R.id.list_sendBack);
        txt_heading = findViewById(R.id.txt_heading);


        if(Designation.contains("Kendra")){
            if(methodName.equalsIgnoreCase("getBackwardKendraActivities")){
                txt_heading.setText("Activities Sent Back by Kendra");
            }else if(methodName.equalsIgnoreCase("getForwardKendraActivities")){
                txt_heading.setText("Activities Sent Forward by Kendra");
            }

        }else if(Designation.contains("Extension Officer")){
            if(methodName.equalsIgnoreCase("getForwardEOActivities")){
                txt_heading.setText("Activities Sent Forward by Extension Officer");
            }
        }else if(Designation.contains("BEO")){
            if(methodName.equalsIgnoreCase("getBackBEOActivities")){
                txt_heading.setText("Activities Sent Back by BEO");
            }
        }

    }

    public void getSendBackForwardActivities(final String methodName) {

        if (ut.isNet(context)) {
            new StartSession(SendBackDocuments.this, new CallbackInterface() {
                @Override
                public void callMethod() {
                    new DownloadSendBackForwardActivity().execute(methodName);
                }

                @Override
                public void callfailMethod(String msg) {

                }
            });
        }


    }

    class DownloadSendBackForwardActivity extends AsyncTask<String, Void, String> {
        Object res;
        String response;
        String methodName = "";

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... params) {

            methodName = params[0];

            String url = "http://e207.ekatm.com/api/SaharaBackFwdActivitiesAPI/" + methodName;
            response = ut.OpenConnection(url, SendBackDocuments.this);


            sendBackForwardBeanArrayList = new ArrayList<>();

            if (response != null) {

                try {
                    JSONArray jsonArray = new JSONArray(response);
                    for (int i = 0; i < jsonArray.length(); i++) {
                        sendBackForwardBean = new SendBackForwardBean();
                        JSONObject jsonObject = jsonArray.getJSONObject(i);
                        sendBackForwardBean.setActivityName(jsonObject.getString("ActivityName"));
                        sendBackForwardBean.setEndDate(jsonObject.getString("EndDate"));
                        sendBackForwardBean.setUserName(jsonObject.getString("UserName"));
                        sendBackForwardBean.setProjectName(jsonObject.getString("ProjectName"));
                        // sendBackForwardBean.setPresent(true);
                        sendBackForwardBeanArrayList.add(sendBackForwardBean);
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }


            }

            return null;
        }


        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            if (response != null) {
             /*   if (methodName.equalsIgnoreCase("getBackBEOActivities") || methodName.equalsIgnoreCase("getBackwardKendraActivities")) {*/
                    SendBackForwardAdapter sendBackForwardAdapter = new SendBackForwardAdapter(SendBackDocuments.this, sendBackForwardBeanArrayList);
                    RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getApplicationContext());
                    list_sendBack.setLayoutManager(mLayoutManager);
                    list_sendBack.setItemAnimator(new DefaultItemAnimator());
                    list_sendBack.setAdapter(sendBackForwardAdapter);
               // }

            } else {
                Toast.makeText(SendBackDocuments.this, "Record Not Present", Toast.LENGTH_SHORT).show();
            }

        }
    }
}
