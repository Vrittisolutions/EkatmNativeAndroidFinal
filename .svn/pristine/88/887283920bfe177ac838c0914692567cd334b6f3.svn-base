package com.vritti.vwb.Adapter;

import android.content.Context;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.support.annotation.NonNull;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.vritti.databaselib.other.Utility;
import com.vritti.databaselib.other.WebUrlClass;
import com.vritti.ekatm.Constants;
import com.vritti.ekatm.R;
import com.vritti.vwb.Beans.ActivityBean;
import com.vritti.vwb.vworkbench.ActivityMain;
import com.vritti.vwb.vworkbench.SaharaDisplayActivity;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import butterknife.OnLongClick;

public class ActivityListMainAdapter_New extends RecyclerView.Adapter<ActivityListMainAdapter_New.ActivityHolder> {
    Context context;
    ArrayList<ActivityBean> lsActivityList;
    ArrayList<ActivityBean> tempFilterList = new ArrayList<>();
    String actid, time, starttime, sp_date;
    int sp_count;
    String CompanyURL, MobileNo;
    SharedPreferences userpreferences;
    String EnvMasterId, LoginId, Password, PlantMasterId;
    SharedPreferences AtendanceSheredPreferance;
    SimpleDateFormat dfDate;
    String getdate, currentTime;
    static String convertedDate = null;
    String fromDoc="";

    public ActivityListMainAdapter_New(Context context, ArrayList<ActivityBean> lsActivityList) {
        this.context = context;
        this.lsActivityList = lsActivityList;
        tempFilterList.addAll(this.lsActivityList);
    }
    public ActivityListMainAdapter_New(Context context, ArrayList<ActivityBean> lsActivityList,String fromDoc) {
        this.context = context;
        this.lsActivityList = lsActivityList;
        tempFilterList.addAll(this.lsActivityList);
        this.fromDoc= fromDoc;
    }

    public ActivityListMainAdapter_New() {

    }

    @NonNull
    @Override
    public ActivityHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View itemView = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.vwb_custom_activity_list, parent, false);
        userpreferences = context.getSharedPreferences(WebUrlClass.USERINFO,
                Context.MODE_PRIVATE);
        AtendanceSheredPreferance = context.getSharedPreferences(WebUrlClass.ATTENDANCE_PREFERENCES,
                Context.MODE_PRIVATE);


        return new ActivityHolder(itemView);
    }

    @Override
    public void onBindViewHolder(@NonNull ActivityHolder holder, int position) {

        if(fromDoc.equalsIgnoreCase("fromDoc")){

        }else {

                if ((lsActivityList.size() - 1) == position) {
                  //  pos = lsActivityList.size();
                    String reQuery = "N";
                    ((ActivityMain) context).loadNextActivity(reQuery);
            }
        }

                holder.cView.setVisibility(View.VISIBLE);
                Date EndDate = null, Todaydate = null, StartDate = null;
                SimpleDateFormat sdf1 = new SimpleDateFormat("dd MMM");
                SimpleDateFormat sdf3 = new SimpleDateFormat("yyyy-MM-dd");
                SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                SimpleDateFormat sdfdisplay = new SimpleDateFormat("dd-MMM-yyyy");
                SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MMM-yyyy");
                String jsonEDate = lsActivityList.get(position).getEndDate();
                String jsonSDate = lsActivityList.get(position).getStartDate();

//            String jsonEDate = lsActivityList.get(position).getExpectedComplete_Date1();
//            String jsonSDate = lsActivityList.get(position).getExpectedComplete_Date1();

                String endDate = "", todayDate, startDate = "", endDatedisplay = "", startDatedisplay = "";

                try {
                    holder.cView.setVisibility(View.VISIBLE);

                    String EndDresults = jsonEDate.substring(jsonEDate.indexOf("(") + 1, jsonEDate.lastIndexOf(")"));
                    long Etime = Long.parseLong(EndDresults);
                    String StarDresult = jsonSDate.substring(jsonSDate.indexOf("(") + 1, jsonSDate.lastIndexOf(")"));
                    long Stime = Long.parseLong(StarDresult);
                    EndDate = new Date(Etime);
                    Todaydate = new Date();


                    todayDate = sdf.format(Todaydate);
                    endDate = sdf.format(EndDate);
                    endDatedisplay = sdfdisplay.format(EndDate);
                    EndDate = sdf.parse(endDate);
                    Todaydate = sdf.parse(todayDate);
                    StartDate = new Date(Stime);
                    startDate = sdf.format(StartDate);
                    startDatedisplay = sdfdisplay.format(EndDate);

                    StartDate = sdf.parse(startDate);
                    System.out.println("Result Date: " + endDate);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }

                if (EndDate.before(Todaydate)) {
                    holder.tv_endDate.setText("Delayed");
                    holder.tv_endDate.setTextColor(Color.parseColor("#F05050"));
                } else if (StartDate.equals(Todaydate) && EndDate.equals(Todaydate)) {
                    holder.tv_endDate.setText("Ends");
                    holder.tv_endDate.setTextColor(Color.parseColor("#27C24C"));
                } else if (StartDate.before(Todaydate) && EndDate.equals(Todaydate)) {
                    holder.tv_endDate.setText("Ends on Today");
                    holder.tv_endDate.setTextColor(Color.parseColor("#27C24C"));
                } else if (StartDate.before(Todaydate) && EndDate.after(Todaydate)) {
                    holder.tv_endDate.setText("Ends on " + endDatedisplay);
                    holder.tv_endDate.setTextColor(Color.parseColor("#27C24C"));
                } else if (StartDate.equals(Todaydate) && EndDate.after(Todaydate)) {
                    holder.tv_endDate.setText("Ends on " + endDatedisplay);
                    holder.tv_endDate.setTextColor(Color.parseColor("#27C24C"));
                } else if (StartDate.after(Todaydate) && EndDate.after(Todaydate)) {
                    holder.tv_endDate.setText("Starts on " + startDatedisplay);
                    holder.tv_endDate.setTextColor(Color.parseColor("#FF902B"));
                }
                String endD = "";
                Date date;
                if (ActivityMain.Activity_AssignByMe) {
                    if (lsActivityList.get(position).getIssuedToName().contains(" ")) {
                        holder.tv_assignedBy.setText("to " + lsActivityList.get(position).getIssuedToName()
                                .substring(0, lsActivityList.get(position).getIssuedToName().lastIndexOf(" ")));
                    } else {
                        holder.tv_assignedBy.setText("to " + lsActivityList.get(position).getIssuedToName());
                    }

                } else if (ActivityMain.Activity_Unapprove == true) {
                    holder.tv_assignedBy.setText("by " + lsActivityList.get(position)
                            .getIssuedToName().substring(0, lsActivityList.get(position).getIssuedToName().lastIndexOf(" ")));

                } else {
                    if (lsActivityList.get(position).getAssigned_By().contains(" ")) {
                        holder.tv_assignedBy.setText("by " + lsActivityList.get(position).getAssigned_By().substring(0, lsActivityList.get(position).getAssigned_By().lastIndexOf(" ")));
                    } else {
                        holder.tv_assignedBy.setText("by " + lsActivityList.get(position).getAssigned_By());
                    }
           /* holder.tv_assignedBy.setText("by " +lsActivityList.get(position).getAssigned_By());
            //lsActivityList.get(position).getAssigned_By().substring(0, lsActivityList.get(position).getAssigned_By().lastIndexOf(" "))*/
                }

                holder.tv_workspace.setText("Under " + lsActivityList.get(position).getProjectName().toString());
                endD = sdf1.format(EndDate);
                holder.tv_endDate1.setText(endD);

                    if (Constants.type == Constants.Type.Sahara){
                        holder.tv_hoursbook.setVisibility(View.GONE);
                        holder.tv_hoursreq.setVisibility(View.GONE);

                    }

        if (!lsActivityList.get(position).getTotalHoursBooked().toString().equalsIgnoreCase("0")) {
                    holder.tv_hoursbook.setText(lsActivityList.get(position).getTotalHoursBooked().toString() + " of ");
                    holder.tv_hoursreq.setText(lsActivityList.get(position).getHoursRequired().toString());
                } else {
                    holder.tv_hoursbook.setText("");
                    holder.tv_hoursreq.setText(lsActivityList.get(position).getHoursRequired().toString() + " hrs");
                }

                if (lsActivityList.get(position).getPriorityIndex().equalsIgnoreCase("1")) {
                    holder.lay_PriorityIndex.setBackgroundColor(Color.parseColor("#F05050"));
                } else if (lsActivityList.get(position).getPriorityIndex().equalsIgnoreCase("2")) {
                    holder.lay_PriorityIndex.setBackgroundColor(Color.parseColor("#FF902B"));
                } else if (lsActivityList.get(position).getPriorityIndex().equalsIgnoreCase("3")) {
                    holder.lay_PriorityIndex.setBackgroundColor(Color.parseColor("#27C24C"));
                } else {
                    holder.lay_PriorityIndex.setBackgroundColor(Color.parseColor("#27C24C"));
                }

                if (lsActivityList.get(position).getStatus().equalsIgnoreCase("PAUSED")) {
                    holder.tv_activityStatus.setBackgroundResource(R.drawable.pause_white);
                } else if (lsActivityList.get(position).getStatus().equalsIgnoreCase("WIP")) {
                    holder.tv_activityStatus.setBackgroundResource(R.drawable.wip_white);
                }

                if (position % 2 == 1) {
                    holder.cView.setBackgroundColor(Color.parseColor("#DBE8EA"));
                } else {
                    holder.cView.setBackgroundColor(Color.parseColor("#F1F6F7"));
                }

                if (lsActivityList.get(position).getSourceType().equalsIgnoreCase("Email")) {
                    holder.lay_ticketDesc.setVisibility(View.GONE);
                    holder.tv_SorceType.setBackgroundResource(R.drawable.email_icon_white);
                    holder.tv_activity_desc.setText(lsActivityList.get(position).getActivityName().toString());
                } else if (lsActivityList.get(position).getSourceType().equalsIgnoreCase("Support")) {
                    holder.lay_ticketDesc.setVisibility(View.VISIBLE);
                    holder.tv_activityCode.setText(lsActivityList.get(position).getActivityCode());
                    holder.tv_ConsigneeName.setText(" - " + lsActivityList.get(position).getConsigneeName() + "-" + lsActivityList.get(position).getContMob());
                    holder.tv_activity_desc.setText(lsActivityList.get(position).getActivityName().toString());
                    holder.tv_SorceType.setBackgroundResource(R.drawable.ticket_white);
                } else if (lsActivityList.get(position).getSourceType().equalsIgnoreCase("Datasheet")) {
                    holder.lay_ticketDesc.setVisibility(View.GONE);
                    holder.tv_activity_desc.setText(lsActivityList.get(position).getActivityName().toString());
                    holder.tv_SorceType.setBackgroundResource(R.drawable.datasheet_icon2_white);
                } else {
                    holder.tv_activity_desc.setText(lsActivityList.get(position).getActivityName().toString());
                    holder.lay_ticketDesc.setVisibility(View.GONE);
                }
                actid = AtendanceSheredPreferance.getString(WebUrlClass.ATTENDANCE_PREFERENCES_ACTIVITY_KEY, null);
                starttime = AtendanceSheredPreferance.getString(WebUrlClass.ATTENDANCE_PREFERENCES_ACTSTART_KEY, null);
                if (actid != null) {
                    if (actid.equalsIgnoreCase(lsActivityList.get(position).getActivityId())) {
                        holder.cView.setBackgroundColor(Color.CYAN);
                    } else {
                        if (position % 2 == 1) {
                            holder.cView.setBackgroundColor(Color.parseColor("#DBE8EA"));
                        } else {
                            holder.cView.setBackgroundColor(Color.parseColor("#F1F6F7"));
                        }
                    }
                }


        }

    @Override
    public int getItemCount() {
        return lsActivityList.size();

    }

    public void filter(String charText) {
        charText = charText.toLowerCase(Locale.getDefault());
        lsActivityList.clear();
        if (charText.length() == 0) {
            lsActivityList.addAll(tempFilterList);
        }
        else
        {
            for (ActivityBean wp : lsActivityList)
            {
                if (wp.getActivityName().toLowerCase(Locale.getDefault()).contains(charText))
                {
                    lsActivityList.add(wp);
                }
            }
        }
        notifyDataSetChanged();
    }



    public class ActivityHolder extends RecyclerView.ViewHolder {
        @BindView(R.id.tv_activity_desc)
        TextView tv_activity_desc;
        @BindView(R.id.tv_assignedBy)
        TextView tv_assignedBy;
        @BindView(R.id.tv_endDate1)
        TextView tv_endDate1;
        @BindView(R.id.tv_ConsigneeName)
        TextView tv_ConsigneeName;
        @BindView(R.id.tv_activityCode)
        TextView tv_activityCode;
        @BindView(R.id.tv_workspace)
        TextView tv_workspace;
        @BindView(R.id.tv_hoursreq)
        TextView tv_hoursreq;
        @BindView(R.id.tv_hoursbook)
        TextView tv_hoursbook;

        @BindView(R.id.tv_endDate)
        TextView tv_endDate;


        @BindView(R.id.lay_ticketDesc)
        LinearLayout lay_ticketDesc;
        @BindView(R.id.lay_PriorityIndex)
        LinearLayout lay_PriorityIndex;
        @BindView(R.id.header)
        LinearLayout cView;

        @BindView(R.id.tv_SorceType)
        ImageView tv_SorceType;
        @BindView(R.id.tv_activityStatus)
        ImageView tv_activityStatus;

        public ActivityHolder(View itemView) {
            super(itemView);
            ButterKnife.bind(this ,itemView);
        }
        @OnClick(R.id.header)
        void header()
        {
            if(fromDoc.equalsIgnoreCase("fromDoc")){
                ((SaharaDisplayActivity)context).rowClick(getAdapterPosition());
            }else{
                ((ActivityMain)context).rowClick(getAdapterPosition());
            }

        }
        @OnLongClick(R.id.header)
        boolean longPress(){
            ((ActivityMain)context).longPress(getAdapterPosition());;
            return  true;
        }

    }

    public static String formateDateFromstring(String inputFormat, String outputFormat, String inputDate) {

        Date parsed = null;
        String outputDate = "";

        SimpleDateFormat df_input = new SimpleDateFormat(inputFormat, java.util.Locale.getDefault());
        SimpleDateFormat df_output = new SimpleDateFormat(outputFormat, java.util.Locale.getDefault());

        try {
            parsed = df_input.parse(inputDate);
            outputDate = df_output.format(parsed);

        } catch (ParseException e) {

        }

        return outputDate;

    }

    public static String dateFormater(String dateFromJSON, String expectedFormat, String oldFormat) {
        SimpleDateFormat dateFormat = new SimpleDateFormat(oldFormat);
        Date date = null;

        try {
            date = dateFormat.parse(dateFromJSON);
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(expectedFormat);
            convertedDate = simpleDateFormat.format(date);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return convertedDate;
    }

}
