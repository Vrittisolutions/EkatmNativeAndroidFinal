package com.vritti.sales.activity;

import android.app.Activity;
import android.app.Dialog;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Build;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.vritti.databaselib.data.DatabaseHandlers;
import com.vritti.databaselib.other.Utility;
import com.vritti.databaselib.other.WebUrlClass;
import com.vritti.ekatm.R;
import com.vritti.sales.CounterBilling.AddEditItemForCBilling;
import com.vritti.sales.adapters.PendingDeliveryAdapter;
import com.vritti.sales.beans.ShipmentEntryBean;
import com.vritti.sales.beans.Tbuds_commonFunctions;
import com.vritti.sales.data.AnyMartData;
import com.vritti.sessionlib.CallbackInterface;
import com.vritti.sessionlib.StartSession;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;

public class PendingDeliveries extends AppCompatActivity {
	private Context parent;
	Toolbar toolbar;
	ListView list_pending_deliveries;
	ProgressBar mprogress;

	Utility ut;
	static DatabaseHandlers db;
	Tbuds_commonFunctions tcf;
	static String settingKey = "";
	String PlantMasterId = "", LoginId = "", Password = "", CompanyURL = "", EnvMasterId = "",
			UserMasterId = "", UserName = "", MobileNo = "", Sourcetype = "",  usertype = "", username = "";
	String IsChatApplicable, IsGPSLocation;
	public static SQLiteDatabase sql;
	SharedPreferences sharedpreferences;

	ArrayList<ShipmentEntryBean> list_deliveries;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.tbuds_activity_pending_deliveries);

		Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
		toolbar.setTitle("Pending Deliveries");

		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {

			//  activity.getWindow().setStatusBarColor(darkenColor(ContextCompat.getColor(activity, color)));
			this.getWindow().setStatusBarColor(Color.parseColor("#ff4112"));
		}

		init();

		//get data from server
		if (isnet()) {
			new StartSession(parent, new CallbackInterface() {
				@Override
				public void callMethod() {
					new DownloadPendingDeliveriesJSON().execute();
				}
				@Override
				public void callfailMethod(String msg) {

				}
			});
		}

		//getDataFromdatabase();

		setListeners();
	}

	public void init(){
		parent = PendingDeliveries.this;

		toolbar = (Toolbar) findViewById(R.id.toolbar1);
		toolbar.setLogo(R.mipmap.ic_toolbar_logo_vwb);  //attach sales logo
		toolbar.setTitle(R.string.app_name_toolbar_sales);
		toolbar.setTitleTextColor(Color.WHITE);
		setSupportActionBar(toolbar);

		list_pending_deliveries = (ListView)findViewById(R.id.list_pending_deliveries);
		mprogress = (ProgressBar)findViewById(R.id.toolbar_progress_Assgnwork);

		ut = new Utility();
		tcf = new Tbuds_commonFunctions(PendingDeliveries.this);
		String settingKey = ut.getSharedPreference_SettingKey(parent);
		String dabasename = ut.getValue(parent, WebUrlClass.GET_DATABASE_NAME_KEY, settingKey);
		db = new DatabaseHandlers(parent, dabasename);
		sql = db.getWritableDatabase();
		CompanyURL = ut.getValue(parent, WebUrlClass.GET_COMPANY_URL_KEY, settingKey);
		EnvMasterId = ut.getValue(parent, WebUrlClass.GET_EnvMasterID_KEY, settingKey);
		PlantMasterId = ut.getValue(parent, WebUrlClass.GET_PlantID_KEY, settingKey);
		LoginId = ut.getValue(parent, WebUrlClass.GET_LOGIN_KEY, settingKey);
		Password =ut.getValue(parent, WebUrlClass.GET_PSW_KEY, settingKey);
		UserMasterId = ut.getValue(parent, WebUrlClass.GET_USERMASTERID_KEY, settingKey);
		UserName = ut.getValue(parent, WebUrlClass.GET_USERNAME_KEY, settingKey);
		MobileNo = ut.getValue(parent, WebUrlClass.GET_MOBILE_KEY, settingKey);

		AnyMartData.MODULE = "ORDERBILLING";
		AnyMartData.MOBILE = MobileNo/*"7057411246"*/;  //customer's mobile number.
		usertype = "C";

		sharedpreferences = getSharedPreferences(WebUrlClass.MyPREFERENCES, MODE_PRIVATE);
		CompanyURL = ut.getValue(parent, WebUrlClass.GET_COMPANY_URL_KEY, settingKey);
		AnyMartData.MAIN_URL = CompanyURL + "/api/OrderBillingAPI/";

		list_deliveries = new ArrayList<ShipmentEntryBean>();

	}

	public void setListeners(){

		list_pending_deliveries.setOnItemClickListener(new AdapterView.OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

				Intent intent = new Intent(PendingDeliveries.this, DeliveryAgentSelection.class);
				intent.putExtra("IntentFrom","PendingDelivery");
				intent.putExtra("InvoiceNo",list_deliveries.get(position).getInvoiceNo());
				intent.putExtra("DeliveryDate",list_deliveries.get(position).getScheduleDate());
				intent.putExtra("ConsigneeName",list_deliveries.get(position).getConsignee());
				intent.putExtra("DelvAddress",list_deliveries.get(position).getDeliveryAddress());
				intent.putExtra("SONO_frmIntent",list_deliveries.get(position).getSOno());
				intent.putExtra("OrderType", AnyMartData.Order_Type);
				intent.putExtra("ShipToMasterId",list_deliveries.get(position).getShipToMasterId());
				intent.putExtra("SODate",list_deliveries.get(position).getScheduleDate());
				intent.putExtra("OrderTypeMasterId",list_deliveries.get(position).getOrderTypeMasterId());
				intent.putExtra("prfDelFrmTime",list_deliveries.get(position).getPrefDelFrmTime());
				intent.putExtra("prfDelToTime",list_deliveries.get(position).getPrefDelToTime());
				startActivity(intent);
				finish();
			}
		});

	}

	private boolean isnet() {
		// TODO Auto-generated method stub
		Context context = this.getApplicationContext();
		ConnectivityManager cm = (ConnectivityManager) context
				.getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo netInfo = cm.getActiveNetworkInfo();
		if (netInfo != null && netInfo.isConnectedOrConnecting()) {
			return true;
		} else {
			Toast.makeText(context, "No internet connection", Toast.LENGTH_LONG).show();
			return false;
		}
	}

	/*public void getDataFromdatabase(){
		sql = db.getReadableDatabase();

		String invoiceNo, expDelDate, shipmentDate, custName, DelvAddress, SONO_frmIntent, OrderType, ShipToMasterId, OrderTypeMasterId ;

		String query = "Select * from  " +db.TABLE_SHIPMENT_INVOICE + " WHERE isActivityAssigned='N'";
		Cursor c = sql.rawQuery(query,null);

		if(c.getCount() > 0){
			c.moveToFirst();
			do{
				custName = c.getString(c.getColumnIndex("CustName"));
				expDelDate = c.getString(c.getColumnIndex("expDelDate"));
				invoiceNo = c.getString(c.getColumnIndex("InvoiceNo"));
				shipmentDate = (c.getString(c.getColumnIndex("AddedDt")));

				DelvAddress = (c.getString(c.getColumnIndex("DelvAddress")));
				SONO_frmIntent = (c.getString(c.getColumnIndex("SONO")));
				OrderTypeMasterId = (c.getString(c.getColumnIndex("OrderTypeMasterId")));
				ShipToMasterId = (c.getString(c.getColumnIndex("ShipToMasterId")));

				*//*if(OrderTypeMasterId.equalsIgnoreCase("1")){
					AnyMartData.Order_Type = AnyMartData.OType1;
				}else if(OrderTypeMasterId.equalsIgnoreCase("2")){
					AnyMartData.Order_Type = AnyMartData.OType2;
				}else if(OrderTypeMasterId.equalsIgnoreCase("3")){
					AnyMartData.Order_Type = AnyMartData.OType3;
				}else if(OrderTypeMasterId.equalsIgnoreCase("4")){
					AnyMartData.Order_Type = AnyMartData.OType4;
				}else if(OrderTypeMasterId.equalsIgnoreCase("5")){
					AnyMartData.Order_Type = AnyMartData.OType5;
				}*//*

				ShipmentEntryBean sbean = new ShipmentEntryBean();
				sbean.setInvoiceNo(invoiceNo);
				sbean.setScheduleDate(expDelDate);
				sbean.setConsignee(custName);
				sbean.setInvoiceDate(shipmentDate);
				sbean.setDeliveryAddress(DelvAddress);
				sbean.setSOno(SONO_frmIntent);
				sbean.setOrderTypeMasterId(OrderTypeMasterId);
				sbean.setOrderType(AnyMartData.Order_Type);
				sbean.setShipToMasterId(ShipToMasterId);

				list_deliveries.add(sbean);

			}while (c.moveToNext());

			list_pending_deliveries.setAdapter(new PendingDeliveryAdapter(this, list_deliveries));

		}else {

		}
	}*/

	class DownloadPendingDeliveriesJSON extends AsyncTask<String, Void, String> {
		Object res;
		String response;
		JSONArray jResults;

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			mprogress.setVisibility(View.VISIBLE);
			Toast.makeText(parent,"Searching for pending deliveries...", Toast.LENGTH_SHORT).show();
		}

		@Override
		protected String doInBackground(String... params) {
			try {
				String url = CompanyURL + WebUrlClass.api_GetPendingDeliveries;

				res = ut.OpenConnection(url);

				if (res != null) {
					response = res.toString().replaceAll("\\\\", "");
					response = res.toString().replaceAll("^\"+ \"+$","");
					//response = response.substring(1, response.length()-1);
					jResults = new JSONArray(response);
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
			return response;
		}

		@Override
		protected void onPostExecute(String integer) {
			super.onPostExecute(integer);
			mprogress.setVisibility(View.GONE);

			try{
				if(jResults != null){
					parsePendingDeliveriesJson(jResults);
				}else {
					Toast.makeText(parent,"No pending deliveries found.", Toast.LENGTH_SHORT).show();
				}
			}catch (Exception e){

			}
		}
	}

	public void parsePendingDeliveriesJson(JSONArray jResults){
		list_deliveries.clear();

		String InvoiceNo = "", InvoiceDt = "", SODate = "", ConsigneeName = "", Address = "",
				PrefDelFrmTime = "", PrefDelToTime = "", Mobile = "",ShipToMasterId = "", OrderTypeMasterId = "", SONo = "" ;

		for(int i=0; i<=jResults.length();i++){
			try {
				JSONObject jsonObject = jResults.getJSONObject(i);
				InvoiceNo = jsonObject.getString("InvoiceNo");
				InvoiceDt = jsonObject.getString("InvoiceDt");
				SODate = jsonObject.getString("SODate");
				ShipToMasterId = jsonObject.getString("ShipToMasterId");
				OrderTypeMasterId = jsonObject.getString("OrderTypeMasterId");
				SONo = jsonObject.getString("SONo");
				ConsigneeName = jsonObject.getString("ConsigneeName");
				Address = jsonObject.getString("Address");
				PrefDelFrmTime = jsonObject.getString("PrefDelFrmTime");
				PrefDelToTime = jsonObject.getString("PrefDelToTime");
				Mobile = jsonObject.getString("Mobile");

				String[] idate = InvoiceDt.split("T");
				InvoiceDt = idate[0] + " " + idate[1];

				String[] sdate = SODate.split("T");
				SODate =sdate[0] + " " + sdate[1];

				ShipmentEntryBean sbean = new ShipmentEntryBean();
				sbean.setInvoiceNo(InvoiceNo);
				sbean.setScheduleDate(SODate);
				sbean.setConsignee(ConsigneeName);
				sbean.setInvoiceDate(InvoiceDt);
				sbean.setDeliveryAddress(Address);
				sbean.setSOno(SONo);
				sbean.setOrderTypeMasterId(OrderTypeMasterId);
				sbean.setOrderType(AnyMartData.Order_Type);
				sbean.setShipToMasterId(ShipToMasterId);
                sbean.setPrefDelFrmTime(PrefDelFrmTime);
                sbean.setPrefDelToTime(PrefDelToTime);

				list_deliveries.add(sbean);

                Collections.sort(list_deliveries, new Comparator<ShipmentEntryBean>() {
                    @Override
                    public int compare(ShipmentEntryBean lhs, ShipmentEntryBean rhs) {
                        return rhs.getInvoiceNo().compareTo(lhs.getInvoiceNo());
                    }
                });

			} catch (JSONException e) {
				e.printStackTrace();
			}
		}

		list_pending_deliveries.setAdapter(new PendingDeliveryAdapter(this, list_deliveries));

	}

}
