package com.vritti.vwb.vworkbench;

import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.PersistableBundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.vritti.databaselib.data.DatabaseHandlers;
import com.vritti.databaselib.other.Utility;
import com.vritti.databaselib.other.WebUrlClass;
import com.vritti.ekatm.R;
import com.vritti.sessionlib.CallbackInterface;
import com.vritti.sessionlib.StartSession;
import com.vritti.vwb.Adapter.DocListAdapter;
import com.vritti.vwb.Beans.CommonObject;
import com.vritti.vwb.Beans.CommonSubObject;
import com.vritti.vwb.Beans.KendraIdJsonBean;
import com.vritti.vwb.Beans.ListObjectDoc;
import com.vritti.vwb.Beans.ReportsTotalCount;
import com.vritti.vwb.Beans.SelectedKendraBean;
import com.vritti.vwb.Beans.SelectedKendraObj;
import com.vritti.vwb.Beans.ViewReportsDT;
import com.vritti.vwb.Beans.ZPKendraIDJsonBean;
import com.vritti.vwb.Beans.ZPSelectedKendraBean;
import com.vritti.vwb.classes.CommonFunction;

import org.apache.commons.lang3.StringUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.net.URLDecoder;
import java.util.ArrayList;

import com.vritti.vwb.classes.commonObjectProperties;

public class SaharaSchoolDisplayList extends AppCompatActivity {

    protected ArrayList<String> selectedKendraId = new ArrayList<>();
    KendraIdJsonBean kendraIdJsonObject;
    ZPKendraIDJsonBean ZPKendraIDJsonBean;
    String FinalObj = "";
    String PlantMasterId = "", LoginId = "", Password = "", CompanyURL = "", EnvMasterId = "",
            UserMasterId = "", UserName = "", MobileNo = "";
    Utility ut;
    Context context;
    CommonFunction cf;
    DatabaseHandlers db;
    SQLiteDatabase sql;
    ArrayList<ListObjectDoc> listObjectDocs = new ArrayList<>();
    RecyclerView list_SchoolName;
    DocListAdapter docListAdapter;
    Button btn_view;
    String[] user;
    String userMasterId = "", schoolId = "", kendraNames;
    commonObjectProperties commonObjectProperties;
    String type = "", formId = "", academicYear = "", fromDate = "", toDate = "";
    CommonObject commonObgj;
    String kendraObj = "";
    ArrayList<ViewReportsDT> viewReportsDTS;
    ArrayList<ReportsTotalCount> stringArrayList;
    TextView txt_title;


    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.school_display_list);
        Toolbar toolbar_action = (Toolbar) findViewById(R.id.toolbar);
        // toolbar_action.setLogo(R.mipmap.ic_toolbar_logo_crm);
        toolbar_action.setLogo(R.mipmap.ic_toolbar_logo_vwb);
        toolbar_action.setTitle(R.string.app_name_toolbar_Vwb);
        setSupportActionBar(toolbar_action);
        // getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        context = getApplicationContext();
        ut = new Utility();
        cf = new CommonFunction(context);
        String settingKey = ut.getSharedPreference_SettingKey(context);
        String dabasename = ut.getValue(context, WebUrlClass.GET_DATABASE_NAME_KEY, settingKey);
        db = new DatabaseHandlers(context, dabasename);
        CompanyURL = ut.getValue(context, WebUrlClass.GET_COMPANY_URL_KEY, settingKey);
        EnvMasterId = ut.getValue(context, WebUrlClass.GET_EnvMasterID_KEY, settingKey);
        PlantMasterId = ut.getValue(context, WebUrlClass.GET_PlantID_KEY, settingKey);
        LoginId = ut.getValue(context, WebUrlClass.GET_LOGIN_KEY, settingKey);
        Password = ut.getValue(context, WebUrlClass.GET_PSW_KEY, settingKey);
        UserMasterId = ut.getValue(context, WebUrlClass.GET_USERMASTERID_KEY, settingKey);
        UserName = ut.getValue(context, WebUrlClass.GET_USERNAME_KEY, settingKey);
        sql = db.getWritableDatabase();

        initView();
        setListner();

        if (getIntent() != null) {

            selectedKendraId = getIntent().getStringArrayListExtra("SelectedKendraId");
            type = getIntent().getStringExtra("type");
            formId = getIntent().getStringExtra("formId");
            academicYear = getIntent().getStringExtra("academicYear");
            fromDate = getIntent().getStringExtra("fromDate");
            toDate = getIntent().getStringExtra("toDate");

            // selectedKendraId = (ArrayList<String>) getIntent().getBundleExtra("SelectedKendraId").getSerializable("abc");
            if (type.equalsIgnoreCase("reports")) {
                btn_view.setText("View");
                txt_title.setText("Reports");
            } else {
                btn_view.setText("View Datasheet List");
                txt_title.setText("School List");
            }
            showKendraNames();
        }
    }

    private void setListner() {

        btn_view.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (type.equalsIgnoreCase("reports")) {

                    SelectedKendraObj selectedKendraObj = new SelectedKendraObj();
                    JSONArray jsonArray = new JSONArray(selectedKendraId);

                    ArrayList<SelectedKendraBean> beanArrayList = new ArrayList<>();
                    for (int i = 0; i < listObjectDocs.size(); i++) {
                        try {
                            if (listObjectDocs.get(i).isSelected()) {
                                if (listObjectDocs.get(i).getUserMasterId() != null) {
                                    beanArrayList.add(new SelectedKendraBean(listObjectDocs.get(i).getUserMasterId()));
                                } else {
                                    beanArrayList.add(new SelectedKendraBean(""));
                                }
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }


                    selectedKendraObj.setFormId(formId);
                    selectedKendraObj.setFromDate(fromDate);
                    selectedKendraObj.setToDate(toDate);
                    selectedKendraObj.setYear(academicYear);
                    selectedKendraObj.setSelectedKendraBeanArrayList(beanArrayList);
                    kendraObj = new Gson().toJson(selectedKendraObj);

                    Log.i("JsonObject", new Gson().toJson(selectedKendraObj));
                    if (beanArrayList.size() == 0) {
                        Toast.makeText(SaharaSchoolDisplayList.this, "Please Select any school", Toast.LENGTH_SHORT).show();
                    } else {


                        if (ut.isNet(SaharaSchoolDisplayList.this)) {
                            new StartSession(SaharaSchoolDisplayList.this, new CallbackInterface() {
                                @Override
                                public void callMethod() {
                                    new DownloadReportsDetails().execute();
                                }

                                @Override
                                public void callfailMethod(String msg) {

                                }
                            });
                        }
                    }

                } else {
                    ArrayList<String> schoolId1 = new ArrayList<>();
                    String join;

                    if (listObjectDocs.size() > 0) {
                        user = new String[listObjectDocs.size()];
                        for (int i = 1; i < listObjectDocs.size(); i++) {
                            if (listObjectDocs.get(i).isSelected()) {
                                userMasterId = listObjectDocs.get(i).getUserMasterId();
                                schoolId1.add(userMasterId);
                                if (schoolId1.size() > 0) {
                                    schoolId = "'" + StringUtils.join(schoolId1, "','") + "'";
                                }
                            }
                        }


                    }
                    if (schoolId.length() != 0) {
                        getActivityDetails(schoolId);
                    } else {
                        // getActivityDetails(schoolId);
                        Toast.makeText(context, "Please Select any School", Toast.LENGTH_SHORT).show();

                    }

                }
            }
        });
    }

    class DownloadReportsDetails extends AsyncTask<Integer, Void, String> {

        String resp = "";
        Object res;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(Integer... strings) {

            String url = CompanyURL + WebUrlClass.api_Viewreports;
            try {
                res = ut.OpenPostConnection(url, kendraObj, SaharaSchoolDisplayList.this);
                resp = res.toString().replaceAll("\\\\\\\\\\\"", "");
                resp = res.toString();
                resp = res.toString().replaceAll("\\\\\\\\\\\"", "");
                resp = resp.replaceAll("\\\\", "");
                resp = resp.replaceAll("u0026", "&");
                //resp = resp.replaceAll("%", "per.");
                resp = resp.substring(1, resp.length() - 1);


                JSONObject jsonObj = new JSONObject(resp);

                JSONArray ja_data = jsonObj.getJSONArray("dt");
                int length = jsonObj.length();
                viewReportsDTS = new ArrayList<>();
                for (int i = 0; i < ja_data.length(); i++) {
                    JSONObject jsonObject = ja_data.getJSONObject(i);
                    ViewReportsDT viewReportsDT = new ViewReportsDT();
                    viewReportsDT.setA13(jsonObject.getString("A13"));
                    viewReportsDT.setFeedbackBy(jsonObject.getString("FeedbackBy"));
                    viewReportsDT.setClientName(jsonObject.getString("ClientName"));
                    viewReportsDT.setFeedbackDate(jsonObject.getString("FeedbackDate"));
                    viewReportsDT.setA14(jsonObject.getString("A14"));
                    viewReportsDTS.add(viewReportsDT);
                    //viewReportsDT.setViewReports(viewReportsDTS);
                }

                JSONObject jsonObj1 = new JSONObject(resp);
                stringArrayList = new ArrayList<>();

                JSONArray ja_data1 = jsonObj1.getJSONArray("Total");
                for (int i = 0; i < ja_data1.length(); i++) {
                    JSONObject jsonObject = ja_data1.getJSONObject(i);
                    ReportsTotalCount reportsTotalCount = new ReportsTotalCount();
                    reportsTotalCount.setColumnName(jsonObject.getString("ColumnName"));
                    reportsTotalCount.setSum(jsonObject.getString("Sum"));
                    stringArrayList.add(reportsTotalCount);
                    //  viewReportsDT.setTotalReports(stringArrayList);
                }

/*
                Log.i("array",getting_data)*/
                ;


            /*   JSONArray jsonElements = new JSONArray(resp);
                for(int i= 0 ; i< jsonElements.length();i++){
                    JSONObject jsonObject = jsonElements.getJSONObject(1);
                }*/


            } catch (Exception e) {
                e.printStackTrace();
            }
            return resp;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            if (viewReportsDTS.size() == 0 && stringArrayList.size() == 0) {
                Toast.makeText(SaharaSchoolDisplayList.this, "No Record Found", Toast.LENGTH_SHORT).show();
            } else {
                Intent intent = new Intent(SaharaSchoolDisplayList.this, ViewReports.class);
                intent.putExtra("response", resp);
                String viewreportsDetails = new Gson().toJson(new ViewReportsDT(viewReportsDTS));
                String totalDetails = new Gson().toJson(new ReportsTotalCount(stringArrayList));
                intent.putExtra("viewReports", viewreportsDetails);
                intent.putExtra("Total", totalDetails);
                startActivity(intent);
            }
        }
    }

    public void getActivityDetails(String schoolId) {
        //  showProgressDialog();

        // JSONArray jsArray = new JSONArray(schoolId);

        commonObjectProperties = new commonObjectProperties();

        JSONObject jsoncommonObj = commonObjectProperties.WorkDataObj();
        JSONObject jsonObj;
        commonObgj = new CommonObject();


        commonObgj.setActivityCode(new CommonSubObject("activityCode"));
        commonObgj.getActivityCode().setOperator("eq");
        commonObgj.setActDesc(new CommonSubObject("actDesc"));
        commonObgj.getActDesc().setOperator("eq");
        commonObgj.setIssuedTo(new CommonSubObject("issuedTo"));
        commonObgj.getIssuedTo().setOperator("eq");
        commonObgj.setAssignBy(new CommonSubObject("assignBy"));
        commonObgj.getAssignBy().setOperator("eq");
        commonObgj.setProjId(new CommonSubObject("ProjId"));
        commonObgj.getProjId().setOperator("eq");
        commonObgj.setMainGrpId(new CommonSubObject("MainGrpId"));
        commonObgj.getMainGrpId().setOperator("eq");
        commonObgj.setUnitId(new CommonSubObject("UnitId"));
        commonObgj.getUnitId().setOperator("eq");

        commonObgj.setFromDt(new CommonSubObject("FromDt"));
        commonObgj.getFromDt().setOperator("bet");
        if (fromDate.equals("")) {
            commonObgj.getFromDt().setSet(false);
        } else {
            commonObgj.getFromDt().setSet(true);
        }
        commonObgj.getFromDt().setValue1(fromDate);


        commonObgj.setToDt(new CommonSubObject("ToDt"));
        //commonObgj.getToDt().setName("ToDt");
        commonObgj.getToDt().setOperator("bet");
        commonObgj.getToDt().setValue1(toDate);
        if (toDate.equals("")) {
            commonObgj.getToDt().setSet(false);
        } else {
            commonObgj.getToDt().setSet(true);
        }


        commonObgj.setExpCompltnDt(new CommonSubObject("ExpCompltnDt"));
        commonObgj.getExpCompltnDt().setOperator("eq");
        commonObgj.setSourceType(new CommonSubObject("SourceType"));
        commonObgj.getSourceType().setOperator("eq");
        commonObgj.setSourceId(new CommonSubObject("SourceId"));
        commonObgj.getSourceId().setOperator("eq");

        commonObgj.setStatus(new CommonSubObject("Status"));
        commonObgj.getStatus().setName("Status");
        commonObgj.getStatus().setSet(true);
        commonObgj.getStatus().setOperator("<>");
        if (type.equalsIgnoreCase("previous")) {
            commonObgj.getStatus().setValue1("('15','13')");
        } else if (type.equalsIgnoreCase("current")) {
            commonObgj.getStatus().setValue1("('15','12')");
        }

        commonObgj.setPriorityId(new CommonSubObject("PriorityId"));
        commonObgj.getPriorityId().setOperator("eq");
        commonObgj.setHoursRequired(new CommonSubObject("HoursRequired"));
        commonObgj.getHoursRequired().setOperator("eq");
        commonObgj.setComFromDt(new CommonSubObject("comFromDt"));
        commonObgj.getComFromDt().setOperator("eq");
        commonObgj.setComToDt(new CommonSubObject("comToDt"));
        commonObgj.getComToDt().setOperator("eq");
        commonObgj.setPerform(new CommonSubObject("perform"));
        commonObgj.getPerform().setOperator("eq");
        commonObgj.setIsSystemGenerated(new CommonSubObject("IsSystemGenerated"));
        commonObgj.getIsSystemGenerated().setOperator("eq");
        commonObgj.setIsUnplanned(new CommonSubObject("IsUnplanned"));
        commonObgj.getIsUnplanned().setOperator("eq");
        commonObgj.setAwait(new CommonSubObject("Await"));
        commonObgj.getAwait().setOperator("eq");
        commonObgj.setPriorityIndex(new CommonSubObject("PriorityIndex"));
        commonObgj.getPriorityIndex().setOperator("eq");


        commonObgj.setParentActId(new CommonSubObject("ParentActId"));
        commonObgj.getParentActId().setName("ParentActId");
        commonObgj.getParentActId().setSet(true);
        commonObgj.getParentActId().setValue1("");//"["wsc
        commonObgj.getParentActId().setOperator("eq");

        commonObgj.setModifiedDt(new CommonSubObject("ModifiedDt"));
        commonObgj.getModifiedDt().setOperator("eq");

        commonObgj.setYear(new CommonSubObject("year"));
        if (academicYear.equals("")) {
            commonObgj.getYear().setSet(false);
        } else {
            commonObgj.getYear().setSet(true);
        }
        commonObgj.getYear().setValue1(academicYear);
        commonObgj.getYear().setOperator("eq");


        commonObgj.setFormId(new CommonSubObject("FormId"));
        if (formId.equals("")) {
            commonObgj.getFormId().setSet(false);
        } else {
            commonObgj.getFormId().setSet(true);
        }
        commonObgj.getFormId().setValue1(formId);
        commonObgj.getFormId().setOperator("eq");


        commonObgj.setDocumentType(new CommonSubObject("DocumentType"));
        commonObgj.getDocumentType().setSet(true);
        commonObgj.getDocumentType().setValue1(type);
        commonObgj.getDocumentType().setOperator("eq");

        //CommonSubObjectSchool commonSubObjectSchool=new CommonSubObjectSchool();
        /*    if (schoolId.size()>0) {*/
        // commonSubObjectSchool.setValue1(schoolId);
        commonObgj.setSchholId(new CommonSubObject("SchholId"));
        if (!schoolId.equals("")) {
            String join = "'" + StringUtils.join(schoolId, "','") + "'";
            commonObgj.getSchholId().setValue1("(" + schoolId + ")");
            commonObgj.getSchholId().setSet(true);
            commonObgj.getSchholId().setOperator("IN");
        } else {
            commonObgj.getSchholId().setValue1(schoolId.replace("(", "").replace(")", ""));
            commonObgj.getSchholId().setSet(false);
            commonObgj.getSchholId().setOperator("eq");//
        }

        commonObgj.setDatasheetStatus(new CommonSubObject("DatasheetStatus"));
        String es = "=";
        commonObgj.getDatasheetStatus().setSet(true);
        if (type.equalsIgnoreCase("current")) {
            commonObgj.getDatasheetStatus().setValue1("('20','21','11')");
            commonObgj.getDatasheetStatus().setOperator("");

        } else if (type.equalsIgnoreCase("previous")) {
            commonObgj.getDatasheetStatus().setValue1("30");
            commonObgj.getDatasheetStatus().setOperator(es);
        }

        try {
            FinalObj = new JSONObject(new Gson().toJson(commonObgj)).toString();
        } catch (JSONException e) {
            e.printStackTrace();
        }

        if (ut.isNet(context)) {
            new StartSession(SaharaSchoolDisplayList.this, new CallbackInterface() {
                @Override
                public void callMethod() {
                    new DownloadCommanDataURLJSON().execute();
                }

                @Override
                public void callfailMethod(String msg) {

                }
            });
        }


       /* Intent intent = new Intent(DocumentReviewActivity.this, SaharaDisplayActivity.class);
        intent.putExtra("finalObj", FinalObj);
        startActivity(intent);*/
    }

    class DownloadCommanDataURLJSON extends AsyncTask<Integer, Void, String> {
        Object res;
        String response;


        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }


        @Override
        protected String doInBackground(Integer... params) {
            String url = CompanyURL + WebUrlClass.api_PostloadWorkData;
            try {
                res = ut.OpenPostConnection(url, FinalObj, SaharaSchoolDisplayList.this);
                response = res.toString().replaceAll("\\\\\\\\\\\"", "");
                response = response.replaceAll("\\\\", "");
                response = response.replaceAll("u0026", "&");
                response = response.replaceAll("%", "per.");
                response = response.substring(1, response.length() - 1);


                ContentValues values = new ContentValues();
                JSONArray jResults = new JSONArray(response);
                String msg = "";
                sql.delete(db.TABLE_ACTIVITYMASTER, null,
                        null);
                Cursor c = sql.rawQuery("SELECT * FROM " + db.TABLE_ACTIVITYMASTER, null);
                int count = c.getCount();
                String columnName, columnValue;
                for (int i = 0; i < jResults.length(); i++) {
                    JSONObject jorder = jResults.getJSONObject(i);
                    for (int j = 0; j < c.getColumnCount(); j++) {


                        columnName = c.getColumnName(j);
                        columnValue = jorder.getString(columnName);
                        if (columnName.equalsIgnoreCase("ActivityName")) {
                            columnValue = jorder.getString(columnName);
                            columnValue = URLDecoder.decode(columnValue, "UTF-8");
                        }
                        values.put(columnName, columnValue);
                    }
                    long a = sql.insert(db.TABLE_ACTIVITYMASTER, null, values);
                    Log.e("", "" + a);
                }
            } catch (Exception e) {
                e.printStackTrace();
                response = WebUrlClass.Errormsg;
            }
            return response;
        }

        @Override
        protected void onPostExecute(String res) {
            super.onPostExecute(res);

            if (res.contains("[]")) {
                Toast.makeText(SaharaSchoolDisplayList.this, "No Records Found", Toast.LENGTH_SHORT).show();

            } else {

                Intent intent = new Intent(SaharaSchoolDisplayList.this, SaharaDisplayActivity.class);
                intent.putExtra("response", response);
                intent.putExtra("flagForReview", 1);
                startActivity(intent);
            }

          /*  if (!res.contains("[]")) {
                if (!(res.equalsIgnoreCase(WebUrlClass.Errormsg))) {
                    updateList();
                } else {
                    ut.displayToast(SaharaSchoolDisplayList.this, "No Record Found");
                    startActivity(new Intent(SaharaSchoolDisplayList.this, DocumentReviewActivity.class));
                }
            } else {
                ut.displayToast(SaharaSchoolDisplayList.this, "Could Not Connect to server");
                startActivity(new Intent(SaharaSchoolDisplayList.this, DocumentReviewActivity.class));
            }*/


        }

    }

    private void initView() {

        list_SchoolName = findViewById(R.id.list_SchoolName);
        btn_view = findViewById(R.id.btn_view);
        txt_title = findViewById(R.id.txt_title);
    }

    private void showKendraNames() {
        /*if (type.equalsIgnoreCase("reports")){

         *//*      ZPKendraIDJsonBean = new ZPKendraIDJsonBean();
                ArrayList<ZPSelectedKendraBean> beanArrayList = new ArrayList<>();
                for (int i = 0; i < selectedKendraId.size(); i++) {
                    try {
                        beanArrayList.add(new ZPSelectedKendraBean(selectedKendraId.get(i)));


                    } catch (Exception e) {
                        e.printStackTrace();
                    }


            }

            ZPKendraIDJsonBean.setStringArrayList(beanArrayList);
            ZPKendraIDJsonBean.setMicrovertical("ZP");

            FinalObj = new Gson().toJson(ZPKendraIDJsonBean);
            FinalObj = FinalObj.replaceAll("\\\\", "");
*//*

        } else {*/
        for (int i = 0; i < selectedKendraId.size(); i++) {
            kendraIdJsonObject = new KendraIdJsonBean();

            try {
                kendraIdJsonObject.setStringArrayList(selectedKendraId);
                if (type.equalsIgnoreCase("reports")) {
                    kendraIdJsonObject.setMicrovertical("ZP");
                } else {
                    kendraIdJsonObject.setMicrovertical("sahara");
                }
                //kendraIdJsonObject.put("Microvertical", "Microvertical");
            } catch (Exception e) {
                e.printStackTrace();
            }


            FinalObj = new Gson().toJson(kendraIdJsonObject);
            FinalObj = FinalObj.replaceAll("\\\\", "");
        }
        // }


        if (ut.isNet(context)) {
            new StartSession(context, new CallbackInterface() {
                @Override
                public void callMethod() {
                    new showMultiClient().execute();
                }

                @Override
                public void callfailMethod(String msg) {
                    Toast.makeText(context, "Please check your internet connection", Toast.LENGTH_SHORT).show();
                }
            });
        }


    }

    class showMultiClient extends AsyncTask<Integer, Void, Integer> {
        Object respond;
        String res, response;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

        }


        @Override
        protected Integer doInBackground(Integer... params) {

            String url = CompanyURL + WebUrlClass.api_ShowMultiClient_Sahara;
            try {

                respond = ut.OpenPostConnection(url, FinalObj, getApplicationContext());
                res = respond.toString();
                // res = res.replaceAll("\"", "");
                response = res;


            } catch (Exception e) {
                e.printStackTrace();
            }

            return null;
        }

        @Override
        protected void onPostExecute(Integer integer) {
            super.onPostExecute(integer);
            if (response != null && !res.equals("")) {

                JSONArray jArray = null;
                try {
                    jArray = new JSONArray(response);

                    if (jArray.length() > 0) {
                        for (int i = 0; i < jArray.length(); i++) {
                            // String jorder = new Gson().toJson(jArray.getJSONObject(i).getJSONObject(""));
                            listObjectDocs.add(new Gson().fromJson(jArray.getJSONObject(i).toString(), ListObjectDoc.class));
                        }
                    }
                    if (listObjectDocs.size() != 0) {
                        //btn_view.setVisibility(View.VISIBLE);
                        openListUi(listObjectDocs);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        }
    }

    private void openListUi(ArrayList<ListObjectDoc> listObjectDocs) {
        // list_SchoolName.setVisibility(View.VISIBLE);
        listObjectDocs.add(0, new ListObjectDoc());
        docListAdapter = new DocListAdapter(this, listObjectDocs);
        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(SaharaSchoolDisplayList.this);
        list_SchoolName.setLayoutManager(mLayoutManager);
        list_SchoolName.setAdapter(docListAdapter);
    }


    public void updateCheck(int adapterPosition) {
        //ArrayList<ListObjectDoc> listObjectDocs = new ArrayList<>();
        if (listObjectDocs.get(adapterPosition).isSelected()) {
            listObjectDocs.get(adapterPosition).setSelected(false);
        } else {
            listObjectDocs.get(adapterPosition).setSelected(true);

        }

        docListAdapter.updateList(adapterPosition);

        // arrayList.add();


    }

    public void updateCheckAll() {
        int i = -1;
        if (listObjectDocs.get(0).isSelected())
            i = 0;
        else
            i = 1;

        for (int j = 0; j < listObjectDocs.size(); j++) {
            if (i == 1)
                listObjectDocs.get(j).setSelected(true);
            else
                listObjectDocs.get(j).setSelected(false);
        }
        docListAdapter.notifyDataSetChanged();

    }
}
