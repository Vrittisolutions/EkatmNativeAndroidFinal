package com.vritti.vwb.vworkbench;

import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Parcelable;
import android.os.PersistableBundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.DatePicker;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.vritti.databaselib.data.DatabaseHandlers;
import com.vritti.databaselib.other.Utility;
import com.vritti.databaselib.other.WebUrlClass;
import com.vritti.ekatm.R;
import com.vritti.sessionlib.CallbackInterface;
import com.vritti.sessionlib.StartSession;
import com.vritti.vwb.Beans.FormNameSahara;
import com.vritti.vwb.Beans.KendraIdJsonBean;
import com.vritti.vwb.Beans.KendraName;
import com.vritti.vwb.Beans.ListObjectDoc;
import com.vritti.vwb.Beans.ReportsTotalCount;
import com.vritti.vwb.Beans.SelectedKendraBean;
import com.vritti.vwb.Beans.SelectedKendraObj;
import com.vritti.vwb.Beans.ViewReportsDT;
import com.vritti.vwb.classes.CommonFunction;

import org.apache.commons.lang3.StringUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

public class ZPSaharaReportsMain extends AppCompatActivity {

    LinearLayout len_datasheet, ln_datasheet, ln_period, ln_date;
    Spinner spinner_datasheet, spinner_period;
    CheckBox check_period, check_fillBetween, check_school;
    TextView txt_fromDate, txt_toDate, spinner_schoolName;
    Button btn_showKendra, btn_view;
    ArrayList<ListObjectDoc> listObjectDocs = new ArrayList<>();
    String[] user;

    DatabaseHandlers db;
    CommonFunction cf;
    SQLiteDatabase sql;
    String PlantMasterId = "", LoginId = "", Password = "", CompanyURL = "", EnvMasterId = "",
            UserMasterId = "", UserName = "", MobileNo = "";
    Utility ut;
    Context context;

    String periodYear = "", fromDate = "", toDate = "", kendraNames, datasheetId = "", userMasterId = "", schoolId = "";

    ArrayList<FormNameSahara> list_FormName;
    public ArrayList<CharSequence> selectedKendra;
    protected ArrayList<String> selectedKendraId;
    List<KendraName> list_KendraName;
    protected CharSequence[] kendraName;
    KendraIdJsonBean kendraIdJsonObject;
    StringBuilder stringBuilder;
    String kendraObj = "";
    ArrayList<ViewReportsDT> viewReportsDTS;
    ArrayList<ReportsTotalCount>  stringArrayList;

    static int year, month, day;
    Date result;

    String date;


    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.reports_main_zpsahara);

        Toolbar toolbar_action = (Toolbar) findViewById(R.id.toolbar);
        toolbar_action.setLogo(R.mipmap.ic_toolbar_logo_vwb);
        toolbar_action.setTitle(R.string.app_name_toolbar_Vwb);
        setSupportActionBar(toolbar_action);

        context = getApplicationContext();
        ut = new Utility();
        cf = new CommonFunction(context);
        String settingKey = ut.getSharedPreference_SettingKey(context);
        String dabasename = ut.getValue(context, WebUrlClass.GET_DATABASE_NAME_KEY, settingKey);
        db = new DatabaseHandlers(context, dabasename);
        CompanyURL = ut.getValue(context, WebUrlClass.GET_COMPANY_URL_KEY, settingKey);
        EnvMasterId = ut.getValue(context, WebUrlClass.GET_EnvMasterID_KEY, settingKey);
        PlantMasterId = ut.getValue(context, WebUrlClass.GET_PlantID_KEY, settingKey);
        LoginId = ut.getValue(context, WebUrlClass.GET_LOGIN_KEY, settingKey);
        Password = ut.getValue(context, WebUrlClass.GET_PSW_KEY, settingKey);
        UserMasterId = ut.getValue(context, WebUrlClass.GET_USERMASTERID_KEY, settingKey);
        UserName = ut.getValue(context, WebUrlClass.GET_USERNAME_KEY, settingKey);
        sql = db.getWritableDatabase();

        initView();
        getIntent();
        setListner();

        if (cf.getFormNameCount() > 0) {
            getDatasheetName();
        } else {
            if (ut.isNet(context)) {
                new StartSession(context, new CallbackInterface() {
                    @Override
                    public void callMethod() {
                        new DownloadDatasheetName().execute();
                    }

                    @Override
                    public void callfailMethod(String msg) {

                    }
                });
            }
        }

        if (cf.getBranchNameCount() > 0) {
            getKendraName();
        } else {
            if (ut.isNet(context)) {
                new StartSession(context, new CallbackInterface() {
                    @Override
                    public void callMethod() {
                        new DownloadKendraNameJSON().execute();
                    }

                    @Override
                    public void callfailMethod(String msg) {

                    }
                });
            }
        }

        final Calendar c = Calendar.getInstance();
        year = c.get(Calendar.YEAR);
        month = c.get(Calendar.MONTH);
        day = (c.get(Calendar.DAY_OF_MONTH));
        date = day + "/"
                + String.format("%02d", (month + 1))
                + "/" + year;

        txt_fromDate.setText(date);
        txt_toDate.setText(date);
        fromDate = formateDateFromstring("dd/MM/yyyy", "yyyy-MM-dd", date);
        toDate = formateDateFromstring("dd/MM/yyyy", "yyyy-MM-dd", date);
        fromDate = fromDate +" 00:00:00";
        toDate = toDate +" 23:59:59";
        String test = toDate;



    }


    private void initView() {

        len_datasheet = findViewById(R.id.len_datasheet);
        ln_datasheet = findViewById(R.id.ln_datasheet);
        spinner_datasheet = findViewById(R.id.spinner_datasheet);
        check_period = findViewById(R.id.check_period);
        ln_period = findViewById(R.id.ln_period);
        spinner_period = findViewById(R.id.spinner_period);
        check_fillBetween = findViewById(R.id.check_fillBetween);
        check_school = findViewById(R.id.check_school);
        ln_date = findViewById(R.id.ln_date);
        txt_fromDate = findViewById(R.id.txt_fromDate);
        txt_toDate = findViewById(R.id.txt_toDate);
        spinner_schoolName = findViewById(R.id.spinner_schoolName);
        btn_showKendra = findViewById(R.id.btn_showKendra);
        btn_view = findViewById(R.id.btn_view);

        list_FormName = new ArrayList<>();
        selectedKendra = new ArrayList<CharSequence>();
        selectedKendraId = new ArrayList<>();
        list_KendraName = new ArrayList<KendraName>();

    }

    private void setListner() {

        check_period.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (isChecked) {
                    spinner_period.setSelection(0);
                    ln_period.setVisibility(View.VISIBLE);
                } else {
                    periodYear = "";
                    ln_period.setVisibility(View.GONE);
                }
            }
        });


        check_fillBetween.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (isChecked) {
                    ln_date.setVisibility(View.VISIBLE);
                } else {
                    txt_fromDate.setText("");
                    txt_toDate.setText("");
                    fromDate = "";
                    toDate = "";
                    ln_date.setVisibility(View.GONE);
                }

            }
        });

        check_school.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (isChecked) {
                    spinner_schoolName.setVisibility(View.VISIBLE);
                    btn_showKendra.setVisibility(View.VISIBLE);
                     btn_view.setVisibility(View.GONE);
                    showSelectColoursDialog();
                } else {
                    spinner_schoolName.setVisibility(View.GONE);
                    btn_showKendra.setVisibility(View.GONE);
                    btn_view.setVisibility(View.VISIBLE);
                    selectedKendra.clear();
                    selectedKendraId.clear();
                    spinner_schoolName.setText("");
                }

            }
        });
        btn_view.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (datasheetId == null || datasheetId.equals("")) {
                    Toast.makeText(ZPSaharaReportsMain.this, "Please Select Datasheet", Toast.LENGTH_SHORT).show();
                } else {
                    SelectedKendraObj selectedKendraObj = new SelectedKendraObj();
                    JSONArray jsonArray = new JSONArray(selectedKendraId);

                    ArrayList<SelectedKendraBean> beanArrayList = new ArrayList<>();
                    for (int i = 0; i < selectedKendraId.size(); i++) {
                        try {
                            beanArrayList.add(new SelectedKendraBean(selectedKendraId.get(i)));
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                    selectedKendraObj.setFormId(datasheetId);
                    selectedKendraObj.setFromDate(fromDate);
                    selectedKendraObj.setToDate(toDate);
                    selectedKendraObj.setYear(periodYear);
                    selectedKendraObj.setSelectedKendraBeanArrayList(beanArrayList);
                    kendraObj = new Gson().toJson(selectedKendraObj);

                    Log.i("JsonObject", new Gson().toJson(selectedKendraObj));


                    if (ut.isNet(ZPSaharaReportsMain.this)) {
                        new StartSession(ZPSaharaReportsMain.this, new CallbackInterface() {
                            @Override
                            public void callMethod() {
                                new DownloadReportsDetails().execute();
                            }

                            @Override
                            public void callfailMethod(String msg) {

                            }
                        });
                    }


                /*    startActivity(new Intent(ZPSaharaReportsMain.this, ViewReports.class).
                            putExtra("kendraObj",kendraObj));*/





                    /*{
                        "year": "2020",
                            "SourceIdarr": [{
                        "SchoolMasterId": "c9d4d996-ecea-4b4d-98d2-7c07ca2a2b98"
                    }, {
                        "SchoolMasterId": "2a145e8e-9b4b-4dcc-938c-de9b35344e20"
                    }, {
                        "SchoolMasterId": "d5311275-a613-4a3c-bd54-b4770a7819c2"
                    }],
                        "FormId": "e91b2796-36a9-4186-b919-c6ddbc3320c3",
                            "FromDate": "2020-03-04 00:00:00",
                            "ToDate": "2020-04-06 23:59:59"
                    }*/


                }
            }
        });

        spinner_datasheet.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                if (list_FormName.size() != 0) {
                    datasheetId = list_FormName.get(position).getPKCssFormsId();
                    String formDesc = list_FormName.get(position).getCSSFormsDesc();
                }

            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

        spinner_period.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                periodYear = spinner_period.getSelectedItem().toString();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

        txt_fromDate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                final Calendar c = Calendar.getInstance();
                year = c.get(Calendar.YEAR);
                month = c.get(Calendar.MONTH);
                day = c.get(Calendar.DAY_OF_MONTH);
                date = "";
                result = c.getTime();
                android.app.DatePickerDialog datePickerDialog = new android.app.DatePickerDialog(ZPSaharaReportsMain.this,
                        new android.app.DatePickerDialog.OnDateSetListener() {

                            @Override
                            public void onDateSet(DatePicker datePicker, int year,
                                                  int monthOfYear, int dayOfMonth) {

                                //  datePicker.setMinDate(c.getTimeInMillis() - 10000);
                                date = dayOfMonth + "/"
                                        + String.format("%02d", (monthOfYear + 1))
                                        + "/" + year;
                                txt_fromDate.setText(date);
                                fromDate = formateDateFromstring("dd/MM/yyyy", "yyyy-MM-dd", date);
                                fromDate = fromDate+" 00:00:00";

                                /*2020-03-04 00:00:00
                                * 2020-04-15 00:00:00*/
                            }
                        }, year, month, day);
                datePickerDialog.setTitle("Select Date");

                datePickerDialog.show();

            }
        });


        txt_toDate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                final Calendar c = Calendar.getInstance();
                year = c.get(Calendar.YEAR);
                month = c.get(Calendar.MONTH);
                day = c.get(Calendar.DAY_OF_MONTH);
                date = "";
                result = c.getTime();
                android.app.DatePickerDialog datePickerDialog = new android.app.DatePickerDialog(ZPSaharaReportsMain.this,
                        new android.app.DatePickerDialog.OnDateSetListener() {

                            @Override
                            public void onDateSet(DatePicker datePicker, int year,
                                                  int monthOfYear, int dayOfMonth) {

                                //  datePicker.setMinDate(c.getTimeInMillis() - 10000);
                                date = dayOfMonth + "/"
                                        + String.format("%02d", (monthOfYear + 1))
                                        + "/" + year;
                                txt_toDate.setText(date);
                                toDate = formateDateFromstring("dd/MM/yyyy", "yyyy-MM-dd", date);
                                toDate = toDate+" 23:59:59";
                                //format: 'YYYY-MM-DD'

                            }
                        }, year, month, day);
                datePickerDialog.setTitle("Select Date");

                datePickerDialog.show();

            }
        });




        btn_showKendra.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // btn_view.setVisibility(View.VISIBLE);
                //  String selectedKendraId1 = new Gson().toJson(selectedKendraId);
                if (datasheetId == null || datasheetId.equals("")) {
                    Toast.makeText(ZPSaharaReportsMain.this, "Please Select Datasheet", Toast.LENGTH_SHORT).show();
                } else {
                    Intent intent = new Intent(ZPSaharaReportsMain.this, SaharaSchoolDisplayList.class);
                    intent.putExtra("SelectedKendraId", selectedKendraId);
                    intent.putExtra("type", "Reports");
                    intent.putExtra("formId", datasheetId);
                    intent.putExtra("academicYear", periodYear);
                    if(check_fillBetween.isChecked()) {
                        intent.putExtra("fromDate", fromDate);
                        intent.putExtra("toDate", toDate);
                    }else{
                        intent.putExtra("fromDate", "");
                        intent.putExtra("toDate", "");
                    }

                    startActivity(intent);
                }

                //   selectedKendraId
                //  showKendraNames();
                    /* Bundle bundle = new Bundle();
                bundle.putSerializable("abc" , (Serializable)selectedKendraId);
                intent.putExtra("SelectedKendraId",bundle);*/


            }
        });

    }

    public static String formateDateFromstring(String inputFormat, String outputFormat, String inputDate) {

        Date parsed = null;
        String outputDate = "";

        SimpleDateFormat df_input = new SimpleDateFormat(inputFormat, Locale.getDefault());
        SimpleDateFormat df_output = new SimpleDateFormat(outputFormat, Locale.getDefault());

        try {
            parsed = df_input.parse(inputDate);
            outputDate = df_output.format(parsed);

        } catch (ParseException e) {

        }

        return outputDate;

    }

    class DownloadReportsDetails extends AsyncTask<Integer, Void, String> {

        String resp = "";
        Object res;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(Integer... strings) {

            String url = CompanyURL + WebUrlClass.api_Viewreports;
            try {
                res = ut.OpenPostConnection(url, kendraObj, ZPSaharaReportsMain.this);
                resp = res.toString().replaceAll("\\\\\\\\\\\"", "");
                resp = res.toString();
                resp = res.toString().replaceAll("\\\\\\\\\\\"", "");
                resp = resp.replaceAll("\\\\", "");
                resp = resp.replaceAll("u0026", "&");
                //resp = resp.replaceAll("%", "per.");
                resp = resp.substring(1, resp.length() - 1);


                JSONObject jsonObj = new JSONObject(resp);

                JSONArray ja_data = jsonObj.getJSONArray("dt");
                int length = jsonObj.length();
               viewReportsDTS = new ArrayList<>();
                for (int i = 0; i < ja_data.length(); i++) {
                    JSONObject jsonObject = ja_data.getJSONObject(i);
                    ViewReportsDT viewReportsDT = new ViewReportsDT();
                    viewReportsDT.setA13(jsonObject.getString("A13"));
                    viewReportsDT.setFeedbackBy(jsonObject.getString("FeedbackBy"));
                    viewReportsDT.setClientName(jsonObject.getString("ClientName"));
                    viewReportsDT.setFeedbackDate(jsonObject.getString("FeedbackDate"));
                    viewReportsDT.setA14(jsonObject.getString("A14"));
                    viewReportsDTS.add(viewReportsDT);
                    //viewReportsDT.setViewReports(viewReportsDTS);
                }

                JSONObject jsonObj1 = new JSONObject(resp);
               stringArrayList = new ArrayList<>();

                JSONArray ja_data1 = jsonObj1.getJSONArray("Total");
                for(int i = 0; i<ja_data1.length();i++){
                    JSONObject jsonObject = ja_data1.getJSONObject(i);
                    ReportsTotalCount reportsTotalCount = new ReportsTotalCount();
                    reportsTotalCount.setColumnName(jsonObject.getString("ColumnName"));
                    reportsTotalCount.setSum(jsonObject.getString("Sum"));
                    stringArrayList.add(reportsTotalCount);
                  //  viewReportsDT.setTotalReports(stringArrayList);
                }

/*
                Log.i("array",getting_data)*/
                ;


            /*   JSONArray jsonElements = new JSONArray(resp);
                for(int i= 0 ; i< jsonElements.length();i++){
                    JSONObject jsonObject = jsonElements.getJSONObject(1);
                }*/


            } catch (Exception e) {
                e.printStackTrace();
            }
            return resp;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            if (resp.contains("[]")) {
                Toast.makeText(ZPSaharaReportsMain.this, "No Record Found", Toast.LENGTH_SHORT).show();
            } else {
                Intent intent = new Intent(ZPSaharaReportsMain.this, ViewReports.class);
                intent.putExtra("response", resp);
                String viewreportsDetails = new Gson().toJson(new ViewReportsDT(viewReportsDTS));
                String totalDetails = new Gson().toJson(new ReportsTotalCount(stringArrayList));
                intent.putExtra("viewReports", viewreportsDetails);
                intent.putExtra("Total", totalDetails);
                startActivity(intent);
            }
        }
    }

    protected void showSelectColoursDialog() {

        kendraName = toCharSequenceArray(list_KendraName);

        boolean[] checkedColours = new boolean[kendraName.length];

        int count = kendraName.length;
        if (selectedKendra.size() != 0) {


            for (int i = 0; i < kendraName.length; i++) {
                // selectedKendra )
                boolean flag = false;
                for (int j = 0; j < selectedKendra.size(); j++) {
                    flag = kendraName[i].equals(selectedKendra.get(j));
                    if (flag)
                        break;
                }
                checkedColours[i] = flag;


            }
        }
      /*  for (int i = 0; i < count; i++)
            checkedColours[3] = true;
       */
        // checkedColours[3] = list_KendraName.contains(kendraName[i]);

        DialogInterface.OnMultiChoiceClickListener coloursDialogListener = new DialogInterface.OnMultiChoiceClickListener() {

            @Override

            public void onClick(DialogInterface dialog, int position, boolean isChecked) {

                if (isChecked) {

                    selectedKendra.add(kendraName[position]);
                    selectedKendraId.add(list_KendraName.get(position).getPKBranchId());

                } else {

                    selectedKendra.remove(kendraName[position]);
                    selectedKendraId.remove(list_KendraName.get(position).getPKBranchId());
                }

                onChangeSelectedColours();

            }

        };

        AlertDialog.Builder builder = new AlertDialog.Builder(this);


        builder.setTitle("Select Kendra");
        // builder.setIcon(R.drawable.correct);

        builder.setPositiveButton("Select Schools", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
               /* ArrayList<String> arrayList = new ArrayList<>();
                arrayList.add(String.valueOf(selectedKendra));*/
                kendraNames = "";
                kendraNames = String.valueOf(selectedKendra).replaceAll("\\[", "").replaceAll("\\]", "");

                spinner_schoolName.setText(kendraNames);
            }
        });

        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
               /* ArrayList<String> arrayList = new ArrayList<>();
                arrayList.add(String.valueOf(selectedKendra));*/
                kendraNames = "";
                selectedKendra.clear();
                check_school.setChecked(false);
                spinner_schoolName.setVisibility(View.GONE);
                // kendraNames = String.valueOf(selectedKendra).replaceAll("\\[","").replaceAll("\\]","");

                spinner_schoolName.setText(kendraNames);
            }
        });


        builder.setMultiChoiceItems(kendraName, checkedColours, coloursDialogListener);

        AlertDialog dialog = builder.create();

        dialog.show();


    }


    public CharSequence[] toCharSequenceArray(List<KendraName> kendraNames) {

        CharSequence[] bookTitles = new CharSequence[kendraNames.size()];
        for (int i = 0; i < bookTitles.length; i++) {
            bookTitles[i] = kendraNames.get(i).getBranchName();
        }
        return bookTitles;
    }

    public void onChangeSelectedColours() {

        stringBuilder = new StringBuilder();

        for (CharSequence colour : selectedKendra) {
            stringBuilder.append(colour + " , ");
        }
        kendraNames = String.valueOf(selectedKendra).replaceAll("\\[", "").replaceAll("\\]", "");

        spinner_schoolName.setText(kendraNames);


    }

    private void getDatasheetName() {
//
        list_FormName.clear();
        String query = "SELECT * FROM " + db.TABLE_FORM_NAME;
        Cursor cur = sql.rawQuery(query, null);
        //   lstReferenceType.add("Select");
        if (cur.getCount() > 0) {

            cur.moveToFirst();
            do {

                list_FormName.add(new FormNameSahara(cur.getString(cur.getColumnIndex("PKCssFormsId")),
                        cur.getString(cur.getColumnIndex("CSSFormsCode")),
                        cur.getString(cur.getColumnIndex("CSSFormsDesc"))));


            } while (cur.moveToNext());

        }

        /*cityArrayList.add(0, Select);*/
        FormNameSahara formNameSahara = new FormNameSahara();
        formNameSahara.setCSSFormsDesc("Select");
        list_FormName.add(0, formNameSahara);


        ArrayAdapter<FormNameSahara> formNameSaharaArrayAdapter = new ArrayAdapter<FormNameSahara>
                (ZPSaharaReportsMain.this,
                        android.R.layout.simple_spinner_dropdown_item, list_FormName);
        spinner_datasheet.setAdapter(formNameSaharaArrayAdapter);

    }

    class DownloadDatasheetName extends AsyncTask<String, Void, String> {
        Object res;
        String response;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... params) {

            String url = CompanyURL + WebUrlClass.api_GetformName_Sahara;

            try {
                res = ut.OpenConnection(url);
                if (res != null) {
                    response = res.toString().replaceAll("\\\\", "");


                    JSONArray jResults = new JSONArray(res.toString());

                    ContentValues values = new ContentValues();
                    sql.delete(db.TABLE_FORM_NAME, null, null);
                    Cursor c = sql.rawQuery("SELECT * FROM " + db.TABLE_FORM_NAME, null);
                    int count = c.getCount();
                    String columnName, columnValue;
                    for (int index = 0; index < jResults.length(); index++) {
                        JSONObject jorder = jResults.getJSONObject(index);
                        for (int j = 0; j < c.getColumnCount(); j++) {
                            columnName = c.getColumnName(j);
                            columnValue = jorder.getString(columnName);
                            values.put(columnName, columnValue);
                        }
                        long a = sql.insert(db.TABLE_FORM_NAME, null, values);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return response;
        }

        @Override
        protected void onPostExecute(String res) {
            super.onPostExecute(res);

            if (response != null) {
                getDatasheetName();
            } else {

            }

        }
    }

    private void getKendraName() {
//
        list_KendraName.clear();
        String query = "SELECT * FROM " + db.TABLE_BRANCH_NAME;
        Cursor cur = sql.rawQuery(query, null);
        //   lstReferenceType.add("Select");
        if (cur.getCount() > 0) {
            cur.moveToFirst();

            do {

                list_KendraName.add(new KendraName(cur.getString(cur.getColumnIndex("PKBranchId")),
                        cur.getString(cur.getColumnIndex("BranchName"))));

            } while (cur.moveToNext());

        }

    }

    class DownloadKendraNameJSON extends AsyncTask<String, Void, String> {
        Object res;
        String response;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... params) {

            String url = CompanyURL + WebUrlClass.api_GetBranchName + "?Designation=";

            try {
                res = ut.OpenConnection(url);
                if (res != null) {
                    response = res.toString().replaceAll("\\\\", "");


                    JSONArray jResults = new JSONArray(res.toString());

                    ContentValues values = new ContentValues();
                    sql.delete(db.TABLE_BRANCH_NAME, null, null);
                    Cursor c = sql.rawQuery("SELECT * FROM " + db.TABLE_BRANCH_NAME, null);
                    int count = c.getCount();
                    String columnName, columnValue;
                    for (int index = 0; index < jResults.length(); index++) {
                        JSONObject jorder = jResults.getJSONObject(index);
                        for (int j = 0; j < c.getColumnCount(); j++) {
                            columnName = c.getColumnName(j);
                            columnValue = jorder.getString(columnName);
                            values.put(columnName, columnValue);
                        }
                        long a = sql.insert(db.TABLE_BRANCH_NAME, null, values);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return response;
        }

        @Override
        protected void onPostExecute(String res) {
            super.onPostExecute(res);

            if (response != null || response.contains("No action was found")) {
                getKendraName();
            } else {
                Toast.makeText(ZPSaharaReportsMain.this, "Unable to load Kendra Name...Please contact to support", Toast.LENGTH_SHORT).show();
            }

        }
    }
}
