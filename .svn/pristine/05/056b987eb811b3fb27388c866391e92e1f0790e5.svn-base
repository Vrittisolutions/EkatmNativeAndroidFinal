package com.vritti.crm.vcrm7;

import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.AsyncTask;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.GridView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.vritti.crm.adapter.EntityMasterEnterpriseAdapter;
import com.vritti.crm.adapter.WorkOperationAdapter;
import com.vritti.crm.bean.BankDetails;
import com.vritti.crm.bean.EntityClass;
import com.vritti.crm.bean.EntityContactDetails;
import com.vritti.crm.bean.EntityMasterEnterpriseType;
import com.vritti.crm.bean.EntityMasterGroup;
import com.vritti.crm.bean.EntityTaxCode;
import com.vritti.crm.bean.EntityTerms;
import com.vritti.ekatm.R;

import com.vritti.crm.classes.CommonFunctionCrm;
import com.vritti.databaselib.data.DatabaseHandlers;
import com.vritti.databaselib.other.Utility;
import com.vritti.databaselib.other.WebUrlClass;
import com.vritti.sessionlib.CallbackInterface;
import com.vritti.sessionlib.StartSession;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.UUID;


public class EntityMasterClassificationActivity extends AppCompatActivity {


    String PlantMasterId = "", LoginId = "", Password = "", CompanyURL = "", EnvMasterId = "",
            UserMasterId = "", UserName = "", MobileNo = "";
    Utility ut;
    DatabaseHandlers db;
    CommonFunctionCrm cf;
    Context context;
    SQLiteDatabase sql;

    AutoCompleteTextView edt_entitygrp, edt_entityclass, edt_typesOfService, edt_serviceclass;
    String entityGrpId = "", entityClassId = "", typeOfServiceId = "";
    Button btn_save;

    ArrayList<EntityMasterGroup> entityMasterGroupArrayList;
    ArrayList<EntityTerms> entityMasterTypeOfServiceArrayList;
    ArrayList<EntityClass> entityClassArrayList;

    String companyName = "", custVendorCode = "", registrationNo = "", vendorCode = "", address = "",
            countryId = "", stateId = "",
            districtId = "", talukaId = "", cityId = "", pinCode = "", landLineNo = "", mobileNo = "", emailId = "",
            website = "", selPriceListId = "", currencyId = "", shortName = "", entityMasterID = "", contractReq = "";
    String evaluationDt = "", validFromDt = "", validToDt = "", SystemUserCodeId = "", PaymentTermsId = "", DeliveryTermsId = "",
            finalJsonObj = "", forPendingDelivery = "Y", forGRN = "Y", forPayment = "Y", forPO = "Y", forReceipts = "Y", forTalkProspect = "Y";
    String salesCategoryId = "", taxCodeId = "", creditLimits = "", creditDays = "", resellerName = "";
    ArrayList<EntityContactDetails> entityContactDetailsArrayList = new ArrayList();
    ArrayList<BankDetails> bankDetailsArrayList = new ArrayList<>();
    ArrayList<EntityMasterEnterpriseType> entityMasterEnterpriseTypeArrayList = new ArrayList<>();
    EntityMasterEnterpriseAdapter entityMasterEnterpriseAdapter;
    GridView grid_operation;
    WorkOperationAdapter workOperationAdapter;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_entity_master_classification);

        initView();
        setListener();
/*
        entityMasterEnterpriseTypeArrayList.add(new EntityMasterEnterpriseType("None","Small Enterprise (SE)"));
        entityMasterEnterpriseTypeArrayList.add(new EntityMasterEnterpriseType("MDE","Medium Enterprise (MDE)"));
        entityMasterEnterpriseTypeArrayList.add(new EntityMasterEnterpriseType("ME","Micro Enterprise (ME)"));
        entityMasterEnterpriseTypeArrayList.add(new EntityMasterEnterpriseType("OE","Other Enterprise Type (OE)"));
        workOperationAdapter = new WorkOperationAdapter(EntityMasterClassificationActivity.this, entityMasterEnterpriseTypeArrayList);
       grid_operation.setAdapter(workOperationAdapter);*/


        if (cf.getEntityGroupDataCnt() > 0) {
            storeEntityGroupData();
        } else {
            if (ut.isNet(EntityMasterClassificationActivity.this)) {
                new StartSession(context, new CallbackInterface() {
                    @Override
                    public void callMethod() {

                        new DownloadEntityGroup().execute();
                    }

                    @Override
                    public void callfailMethod(String msg) {

                    }
                });
            } else {
                Toast.makeText(this, "No Internet Connection", Toast.LENGTH_SHORT).show();
            }

        }


        if (cf.getEntitytypeOfServiceCnt() > 0) {
            storeTypeOfServiceData();
        } else {
            if (ut.isNet(EntityMasterClassificationActivity.this)) {
                new StartSession(context, new CallbackInterface() {
                    @Override
                    public void callMethod() {
                        new DownloadTypeOfService().execute();
                    }

                    @Override
                    public void callfailMethod(String msg) {

                    }
                });
            } else {
                Toast.makeText(this, "No Internet Connection", Toast.LENGTH_SHORT).show();
            }

        }

        if (cf.getEntityClassDataCnt() > 0) {
            storeEntityClassData();
        } else {
            if (ut.isNet(EntityMasterClassificationActivity.this)) {
                new StartSession(context, new CallbackInterface() {
                    @Override
                    public void callMethod() {
                        new DownloadEntityClass().execute();
                    }

                    @Override
                    public void callfailMethod(String msg) {

                    }
                });
            } else {
                Toast.makeText(this, "No Internet Connection", Toast.LENGTH_SHORT).show();
            }

        }


    }

    private void initView() {

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar1);
        //toolbar.setLogo(R.mipmap.ic_toolbar_logo_crm);
        toolbar.setLogo(R.drawable.crm_logo_1);
        toolbar.setTitle(R.string.app_name_toolbar_CRM);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        context = EntityMasterClassificationActivity.this;

        ut = new Utility();
        cf = new CommonFunctionCrm(context);
        String settingKey = ut.getSharedPreference_SettingKey(context);
        String dabasename = ut.getValue(context, WebUrlClass.GET_DATABASE_NAME_KEY, settingKey);
        db = new DatabaseHandlers(context, dabasename);
        CompanyURL = ut.getValue(context, WebUrlClass.GET_COMPANY_URL_KEY, settingKey);
        EnvMasterId = ut.getValue(context, WebUrlClass.GET_EnvMasterID_KEY, settingKey);
        PlantMasterId = ut.getValue(context, WebUrlClass.GET_PlantID_KEY, settingKey);
        LoginId = ut.getValue(context, WebUrlClass.GET_LOGIN_KEY, settingKey);
        Password = ut.getValue(context, WebUrlClass.GET_PSW_KEY, settingKey);
        UserMasterId = ut.getValue(context, WebUrlClass.GET_USERMASTERID_KEY, settingKey);
        UserName = ut.getValue(context, WebUrlClass.GET_USERNAME_KEY, settingKey);
        sql = db.getWritableDatabase();


        edt_entitygrp = findViewById(R.id.edt_entitygrp);
        edt_entityclass = findViewById(R.id.edt_entityclass);
        edt_typesOfService = findViewById(R.id.edt_typesOfService);
        edt_serviceclass = findViewById(R.id.edt_serviceclass);
        btn_save = findViewById(R.id.btn_save);
        grid_operation = findViewById(R.id.grid_operation);


        entityMasterGroupArrayList = new ArrayList<>();
        entityMasterTypeOfServiceArrayList = new ArrayList<>();
        entityClassArrayList = new ArrayList<EntityClass>();


        if (getIntent() != null) {
            companyName = getIntent().getStringExtra("ContactName");
            shortName = getIntent().getStringExtra("ShortName");
            entityMasterID = getIntent().getStringExtra("EntityMasterId");
            custVendorCode = getIntent().getStringExtra("CustVendorCode");
            vendorCode = getIntent().getStringExtra("VendorCode");
            registrationNo = getIntent().getStringExtra("RegistrationNo");
            address = getIntent().getStringExtra("Address");
            countryId = getIntent().getStringExtra("CountryId");
            stateId = getIntent().getStringExtra("StateId");
            cityId = getIntent().getStringExtra("CityId");
            districtId = getIntent().getStringExtra("DistrictId");
            talukaId = getIntent().getStringExtra("TalukaId");
            pinCode = getIntent().getStringExtra("PinCode");
            mobileNo = getIntent().getStringExtra("MobileNo");
            landLineNo = getIntent().getStringExtra("LandLineno");
            emailId = getIntent().getStringExtra("EmailId");
            website = getIntent().getStringExtra("Website");
            currencyId = getIntent().getStringExtra("CurrencyId");
            selPriceListId = getIntent().getStringExtra("SelPriceListId");
            contractReq = getIntent().getStringExtra("ContractRequired");


            if (!getIntent().getStringExtra("ContactList").equals("")) {
                entityContactDetailsArrayList = new Gson().fromJson(getIntent().getStringExtra("ContactList"),
                        EntityContactDetails.class).getEntityContactDetailsArrayList();
            }

            evaluationDt = getIntent().getStringExtra("EvaluationDate");
            validFromDt = getIntent().getStringExtra("ValidFromDt");
            validToDt = getIntent().getStringExtra("ValidToDt");
            SystemUserCodeId = getIntent().getStringExtra("SystemuserCodeId");
            PaymentTermsId = getIntent().getStringExtra("PaymentTermsId");
            DeliveryTermsId = getIntent().getStringExtra("DeliveryTermsId");
            forPO = getIntent().getStringExtra("ForPO");
            forReceipts = getIntent().getStringExtra("ForReceipt");

            forPendingDelivery = getIntent().getStringExtra("ForPendingDelivery");
            forGRN = getIntent().getStringExtra("ForGRN");
            forPayment = getIntent().getStringExtra("ForPayment");
            // currencyId = getIntent().getStringExtra("CurrencyId");
            creditLimits = getIntent().getStringExtra("CreditLimits");
            creditDays = getIntent().getStringExtra("CreditDays");
            salesCategoryId = getIntent().getStringExtra("SalesCategory");
            forTalkProspect = getIntent().getStringExtra("TalkProspect");
            taxCodeId = getIntent().getStringExtra("TaxCode");
            resellerName = getIntent().getStringExtra("ResellerName");
            if (!getIntent().getStringExtra("BankList").equals("")) {

                bankDetailsArrayList = new Gson().fromJson(getIntent().getStringExtra("BankList"),
                        BankDetails.class).getBankDetailsArrayList();
            }


        }
    }

    private void setListener() {
        edt_entitygrp.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                Object item = parent.getItemAtPosition(position);

                try {
                    entityGrpId = getPosition_EntityGrpfromspin(entityMasterGroupArrayList, item.toString());

                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        });

        edt_entityclass.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                Object item = parent.getItemAtPosition(position);

                try {
                    entityClassId = getPosition_EntityClassfromspin(entityClassArrayList, item.toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        edt_typesOfService.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                Object item = parent.getItemAtPosition(position);

                try {
                    typeOfServiceId = getPosition_Servicetypefromspin(entityMasterTypeOfServiceArrayList, item.toString());

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        btn_save.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                JSONObject jsonObject = new JSONObject();
                try {
                    jsonObject.put("AadharNo", "");
                    jsonObject.put("AccountId", "");
                    jsonObject.put("AccountNo", "");
                    jsonObject.put("AccountType", "");
                    jsonObject.put("Active", "true");
                    jsonObject.put("Address", address);
                    jsonObject.put("BankAddress", "");
                    jsonObject.put("BankName", "");

                    JSONArray jsonBankArray = new JSONArray();

                    if (bankDetailsArrayList.size() != 0) {
                        for (int i = 0; i < bankDetailsArrayList.size(); i++) {
                            JSONObject jsonBankObject = new JSONObject();
                            jsonBankObject.put("CustVendorPayeeNameId", "");
                            jsonBankObject.put("PayeeName", bankDetailsArrayList.get(i).getPayeeName());
                            jsonBankObject.put("BankName", bankDetailsArrayList.get(i).getBankName());
                            jsonBankObject.put("Branch", bankDetailsArrayList.get(i).getBranch());
                            jsonBankObject.put("BankAddress", bankDetailsArrayList.get(i).getBankAddress());
                            jsonBankObject.put("AccountNo", bankDetailsArrayList.get(i).getAccountNo());
                            jsonBankObject.put("AcountType", bankDetailsArrayList.get(i).getAccountType());
                            jsonBankObject.put("IFSCode", bankDetailsArrayList.get(i).getIFSCCode());
                            jsonBankObject.put("RemittanceInstruction", bankDetailsArrayList.get(i).getRemittanceInstruction());
                            jsonBankArray.put(jsonBankObject);
                        }
                    }
                    jsonObject.put("BankPayeeName", jsonBankArray);
                    jsonObject.put("Branch", address);
                    jsonObject.put("CAT", "");
                    jsonObject.put("CIN", "");
                    jsonObject.put("CSTNo", "");
                    jsonObject.put("CallId", "");
                    jsonObject.put("City", cityId);

                    JSONArray jsonArrayClient = new JSONArray();
                    // JSONObject jsonClientObject = new JSONObject();

                    if (entityContactDetailsArrayList.size() != 0) {
                        for (int i = 0; i < entityContactDetailsArrayList.size(); i++) {
                            JSONObject jsonClientObject = new JSONObject();
                            jsonClientObject.put("ContPerName", entityContactDetailsArrayList.get(i).getContactname());
                            jsonClientObject.put("ContactNo", entityContactDetailsArrayList.get(i).getContactMobile());
                            jsonClientObject.put("DIN", "");
                            jsonClientObject.put("Designation", entityContactDetailsArrayList.get(i).getContactDesignation());
                            jsonClientObject.put("EmailId", entityContactDetailsArrayList.get(i).getContactEmail());
                            jsonClientObject.put("EntityContactInfoId", entityContactDetailsArrayList.get(i).getContactDesignation());
                            jsonClientObject.put("InfluentialLevel", entityContactDetailsArrayList.get(i).getContactInfluence());
                            jsonClientObject.put("IsDefault", entityContactDetailsArrayList.get(i).getContactdefault());
                            jsonClientObject.put("IsVWBLoginAllowed", "N");
                            jsonClientObject.put("LoginId", "");
                            jsonClientObject.put("Password", "");
                            jsonArrayClient.put(jsonClientObject);
                        }
                    }


                    jsonObject.put("ClientDetails", jsonArrayClient);
                    jsonObject.put("ContactName", companyName);
                    jsonObject.put("ContactTitle", companyName);
                    jsonObject.put("Country", countryId);
                    jsonObject.put("CountryId", countryId);

                    jsonObject.put("CreditDays", creditDays);

                    jsonObject.put("CreditLimit", creditLimits);
                    jsonObject.put("CreditTerms", PaymentTermsId);
                    jsonObject.put("Currency", currencyId);
                    jsonObject.put("CurrencyMasterID", currencyId);
                    jsonObject.put("CustVendor", "C");
                    jsonObject.put("CustVendorCode", custVendorCode);
                    final String guid = UUID.randomUUID().toString();
                    jsonObject.put("CustVendorMasterId", guid);//guuid self
                    jsonObject.put("CustVendorName", companyName);
                    jsonObject.put("CustVendorType", "3");//doubt
                    jsonObject.put("DeliveryTerms", DeliveryTermsId);
                    jsonObject.put("District", districtId);
                    jsonObject.put("ECCNo", "");
                    jsonObject.put("ENGRN", forGRN);
                    jsonObject.put("ENInv", forPO);//doubt
                    jsonObject.put("ENPndPO", DeliveryTermsId);
                    jsonObject.put("ENPymt", forPayment);//doubt
                    jsonObject.put("ENRect", forReceipts);//doubt
                    jsonObject.put("Email", emailId);//doubt--basic
                    jsonObject.put("EnterpriseType", "");
                    jsonObject.put("EntityClass", entityClassId);//doubt
                    jsonObject.put("EntityGroupMasterId", entityGrpId);//doubt
                    jsonObject.put("EntityRestDate", "");
                    jsonObject.put("EsicNo", "");
                    jsonObject.put("EvaluationDt", evaluationDt);
                    jsonObject.put("ExDivi", "");
                    jsonObject.put("ExRange", "");
                    jsonObject.put("ExpertiseDetails", "");
                    jsonObject.put("FKTerritoryId", "");
                    jsonObject.put("GSTNO", "");
                    jsonObject.put("IFSCode", "");
                    jsonObject.put("GSTNO", "");
                    jsonObject.put("IndIndemnity", "");//doubt
                    jsonObject.put("InsuranceDetails", "");
                    jsonObject.put("IsActive", "");///basic
                    jsonObject.put("IsApproved", "");//purchase
                    jsonObject.put("IsContractReqd", contractReq);//basic
                    jsonObject.put("IsWLForCRMRef", forTalkProspect);/////doubt
                    jsonObject.put("Latitude", "");//shipTO
                    jsonObject.put("LenderDetails", "");//doubt
                    jsonObject.put("Longitude", "");//shipTO
                    jsonObject.put("MSTNo", "");//doubt
                    jsonObject.put("Mobile", mobileNo);
                    jsonObject.put("PANNO", "");
                    jsonObject.put("PFNo", "");
                    jsonObject.put("PayeeName", "");
                    jsonObject.put("PaymentTerms", PaymentTermsId);//sales
                    jsonObject.put("Phone", landLineNo);
                    jsonObject.put("Pin", pinCode);
                    jsonObject.put("PriceListId", "");
                    jsonObject.put("RegistrationFormNo", registrationNo);
                    jsonObject.put("RemittanceInstruction", "");
                    jsonObject.put("ResellerName", resellerName);

                    jsonObject.put("SalesFamily", "");
                    jsonObject.put("ServClId", "");
                    jsonObject.put("ServiceTaxNo", "");


                    JSONObject shipToJsonObj = new JSONObject();
                    JSONArray shipToJsonArr = new JSONArray();
                    shipToJsonArr.put(shipToJsonObj);
                    jsonObject.put("ShipToDetails", shipToJsonArr);

                    jsonObject.put("ShortName", shortName);
                    jsonObject.put("SlCatId", salesCategoryId);
                    jsonObject.put("State", stateId);
                    if (SystemUserCodeId != "") {
                        jsonObject.put("SystemUserId", SystemUserCodeId);//doubt
                    } else {
                        jsonObject.put("SystemUserId", UserMasterId);//doubt
                    }

                    jsonObject.put("TANNO", "");
                    jsonObject.put("TAN_GSTIN_Number", "");
                    jsonObject.put("Taluka", talukaId);
                    jsonObject.put("TaxClass", taxCodeId);
                    jsonObject.put("TenorYear", "");
                    jsonObject.put("Typeofservices", typeOfServiceId);
                    jsonObject.put("ValidFrom", validFromDt);
                    jsonObject.put("ValidTo", validToDt);
                    jsonObject.put("VendorMasterID", "");
                    jsonObject.put("Website", "");
                    jsonObject.put("vendorCode", vendorCode);//doubt


                    finalJsonObj = jsonObject.toString();


                  /*  if (ut.isNet(EntityMasterClassificationActivity.this)) {
                        new StartSession(EntityMasterClassificationActivity.this, new CallbackInterface() {
                            @Override
                            public void callMethod() {
                                new DownloadCheckDuplicateEmpName().execute(companyName, "A", guid);
                            }

                            @Override
                            public void callfailMethod(String msg) {

                            }
                        });
                    } else {
                        Toast.makeText(EntityMasterClassificationActivity.this, "No Internet Connection", Toast.LENGTH_SHORT).show();
                    }*/

                } catch (JSONException e) {
                    e.printStackTrace();
                }

            }
        });


    }

    private class DownloadEntityGroup extends AsyncTask<String, Void, String> {
        Object res;
        String response = "";

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... strings) {
            String url = CompanyURL + WebUrlClass.api_getEntityGroup;
            try {
                res = ut.OpenConnection(url);
                if (res != null) {

                    String rplc = "\\\r\\\n";
                    // response = res.toString().replaceAll(rplc,"");
                    response = res.toString().replaceAll("\\\\", "");
                    // response = res.toString().replaceAll("rn","");
                    response = response.substring(1, response.length() - 1);
                    ContentValues values = new ContentValues();
                    JSONArray jResults = new JSONArray(response);
                    sql.delete(db.TABLE_ENTITY_GROUP, null,
                            null);
                    Cursor c = sql.rawQuery("SELECT * FROM " + db.TABLE_ENTITY_GROUP, null);
                    int count = c.getCount();
                    String columnName, columnValue;
                    for (int i = 0; i < jResults.length(); i++) {
                        JSONObject jorder = jResults.getJSONObject(i);
                        for (int j = 0; j < c.getColumnCount(); j++) {
                            columnName = c.getColumnName(j);
                            columnValue = jorder.getString(columnName);
                            values.put(columnName, columnValue);
                        }
                        long a = sql.insert(db.TABLE_ENTITY_GROUP, null, values);
                        Log.e("", "" + a);

                    }

                } else {
                    response = "error";
                }

            } catch (Exception e) {
                e.printStackTrace();
                response = "error";
            }
            return response;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            if (!response.equals("error")) {
                storeEntityGroupData();
            }
        }
    }

    private void storeEntityGroupData() {
        entityMasterGroupArrayList.clear();

        String query = "SELECT distinct EntityGroupMasterId, GroupName" +
                " FROM " + db.TABLE_ENTITY_GROUP;
        Cursor cur = sql.rawQuery(query, null);
        if (cur.getCount() > 0) {
            cur.moveToFirst();
            do {

                entityMasterGroupArrayList.add(new EntityMasterGroup(cur.getString(cur.getColumnIndex("EntityGroupMasterId")),
                        cur.getString(cur.getColumnIndex("GroupName"))));

            } while (cur.moveToNext());
        }

        ArrayAdapter<EntityMasterGroup> categoryBeanArrayAdapter =
                new ArrayAdapter<EntityMasterGroup>(EntityMasterClassificationActivity.this,
                        R.layout.crm_custom_spinner_txt, entityMasterGroupArrayList);

        edt_entitygrp.setAdapter(categoryBeanArrayAdapter);
        edt_entitygrp.setSelection(0);
    }

    private class DownloadTypeOfService extends AsyncTask<String, Void, String> {
        Object res;
        String response = "";

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... strings) {
            String url = CompanyURL + WebUrlClass.api_getEntityTerms + "?Value=TypeofServices";
            try {
                res = ut.OpenConnection(url);
                if (res != null) {

                    String rplc = "\\\r\\\n";
                    // response = res.toString().replaceAll(rplc,"");
                    response = res.toString().replaceAll("\\\\", "");
                    // response = res.toString().replaceAll("rn","");
                    response = response.substring(1, response.length() - 1);
                    ContentValues values = new ContentValues();
                    JSONArray jResults = new JSONArray(response);
                    sql.delete(db.TABLE_ENTITY_TYPE_OF_SERVICE, null,
                            null);
                    Cursor c = sql.rawQuery("SELECT * FROM " + db.TABLE_ENTITY_TYPE_OF_SERVICE, null);
                    int count = c.getCount();
                    String columnName, columnValue;
                    for (int i = 0; i < jResults.length(); i++) {
                        JSONObject jorder = jResults.getJSONObject(i);
                        for (int j = 0; j < c.getColumnCount(); j++) {
                            columnName = c.getColumnName(j);
                            columnValue = jorder.getString(columnName);
                            values.put(columnName, columnValue);
                        }
                        long a = sql.insert(db.TABLE_ENTITY_TYPE_OF_SERVICE, null, values);
                        Log.e("", "" + a);

                    }

                } else {
                    response = "error";
                }

            } catch (Exception e) {
                e.printStackTrace();
                response = "error";
            }
            return response;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            if (!response.equals("error")) {
                storeTypeOfServiceData();
            }
        }
    }

    private void storeTypeOfServiceData() {

        entityMasterTypeOfServiceArrayList.clear();

        String query = "SELECT distinct ConfigurationDetailId, Configuration" +
                " FROM " + db.TABLE_ENTITY_TYPE_OF_SERVICE;
        Cursor cur = sql.rawQuery(query, null);
        if (cur.getCount() > 0) {
            cur.moveToFirst();
            do {

                entityMasterTypeOfServiceArrayList.add(new EntityTerms(cur.getString(cur.getColumnIndex("ConfigurationDetailId")),
                        cur.getString(cur.getColumnIndex("Configuration"))));

            } while (cur.moveToNext());
        }

        ArrayAdapter<EntityTerms> categoryBeanArrayAdapter = new ArrayAdapter<EntityTerms>(EntityMasterClassificationActivity.this,
                R.layout.crm_custom_spinner_txt, entityMasterTypeOfServiceArrayList);

        edt_typesOfService.setAdapter(categoryBeanArrayAdapter);
        edt_typesOfService.setSelection(0);

    }

    private class DownloadEntityClass extends AsyncTask<String, Void, String> {
        Object res;
        String response = "";

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... strings) {
            String url = CompanyURL + WebUrlClass.api_getEntityClass;
            try {
                res = ut.OpenConnection(url);
                if (res != null) {

                    String rplc = "\\\r\\\n";
                    // response = res.toString().replaceAll(rplc,"");
                    response = res.toString().replaceAll("\\\\", "");
                    // response = res.toString().replaceAll("rn","");
                    response = response.substring(1, response.length() - 1);
                    ContentValues values = new ContentValues();
                    JSONArray jResults = new JSONArray(response);
                    sql.delete(db.TABLE_ENTITY_CLASS, null,
                            null);
                    Cursor c = sql.rawQuery("SELECT * FROM " + db.TABLE_ENTITY_CLASS, null);
                    int count = c.getCount();
                    String columnName, columnValue;
                    for (int i = 0; i < jResults.length(); i++) {
                        JSONObject jorder = jResults.getJSONObject(i);
                        for (int j = 0; j < c.getColumnCount(); j++) {
                            columnName = c.getColumnName(j);
                            columnValue = jorder.getString(columnName);
                            values.put(columnName, columnValue);
                        }
                        long a = sql.insert(db.TABLE_ENTITY_CLASS, null, values);
                        Log.e("", "" + a);

                    }

                } else {
                    response = "error";
                }

            } catch (Exception e) {
                e.printStackTrace();
                response = "error";
            }
            return response;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            if (!response.equals("error")) {
                storeEntityClassData();
            }
        }
    }

    private void storeEntityClassData() {

        entityClassArrayList.clear();

        String query = "SELECT distinct CodeId, CodeDesc" +
                " FROM " + db.TABLE_ENTITY_CLASS;
        Cursor cur = sql.rawQuery(query, null);
        if (cur.getCount() > 0) {
            cur.moveToFirst();
            do {

                entityClassArrayList.add(new EntityClass(cur.getString(cur.getColumnIndex("CodeId")),
                        cur.getString(cur.getColumnIndex("CodeDesc"))));

            } while (cur.moveToNext());
        }

        ArrayAdapter<EntityClass> categoryBeanArrayAdapter = new ArrayAdapter<EntityClass>(EntityMasterClassificationActivity.this,
                R.layout.crm_custom_spinner_txt, entityClassArrayList);

        edt_entityclass.setAdapter(categoryBeanArrayAdapter);
        edt_entityclass.setSelection(0);
    }

    private String getPosition_EntityGrpfromspin(ArrayList<EntityMasterGroup> entityMasterGroupArrayList1, String grpVal) throws JSONException {
        String grpId = "";
        for (EntityMasterGroup entityMasterGroup : entityMasterGroupArrayList1) {
            if (entityMasterGroup.getGroupName().equalsIgnoreCase(grpVal)) {
                grpId = entityMasterGroup.getEntityGroupMasterId();
            }
        }
        return grpId; //it wasn't found at all
    }

    private String getPosition_EntityClassfromspin(ArrayList<EntityClass> entityClassArrayList1, String classVal) throws JSONException {
        String classId = "";
        for (EntityClass entityClass : entityClassArrayList1) {
            if (entityClass.getCodeDesc().equalsIgnoreCase(classVal)) {
                classId = entityClass.getCodeId();
            }
        }
        return classId; //it wasn't found at all
    }

    private String getPosition_Servicetypefromspin(ArrayList<EntityTerms> entityTermsArrayList1, String serviceVal) throws JSONException {
        String serviceTypeId = "";
        for (EntityTerms entityTerms : entityTermsArrayList1) {
            if (entityTerms.getConfiguration().equalsIgnoreCase(serviceVal)) {
                serviceTypeId = entityTerms.getConfigurationDetailId();
            }
        }
        return serviceTypeId; //it wasn't found at all
    }


    @Override
    public void onBackPressed() {


        String bankDetailsList = "", contactDetailsList = "";

        if (bankDetailsArrayList.size() != 0) {
            bankDetailsList = new Gson().toJson(new BankDetails(bankDetailsArrayList));
        }
        if (entityContactDetailsArrayList.size() != 0) {
            contactDetailsList = new Gson().toJson(new EntityContactDetails(entityContactDetailsArrayList));
        }

        Intent intent = new Intent(EntityMasterClassificationActivity.this, EntityMasterBankActivity.class);

        intent.putExtra("EntityClass", entityClassId);
        intent.putExtra("EntityGroupMasterId", entityGrpId);
        intent.putExtra("Typeofservices", typeOfServiceId);
        intent.putExtra("BankDetailslist", bankDetailsList);
        intent.putExtra("ContactDetailslist", contactDetailsList);

        setResult(15, intent);

        super.onBackPressed();


    }
}